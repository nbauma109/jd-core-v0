package jd.core.test;

import org.apache.bcel.Const;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.StackMap;
import org.apache.bcel.classfile.StackMapEntry;
import org.apache.bcel.classfile.StackMapType;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ClassGen;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.FieldGen;
import org.apache.bcel.generic.InstructionConst;
import org.apache.bcel.generic.InstructionFactory;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;

import java.io.IOException;
import java.io.OutputStream;

/*
 * Generated by:
 * java org.apache.bcel.util.BCELifier jd.core.test.NonUniqueFieldNames
 * 
 * Renamed all fields to "x" after code generation.
 * Added signature attributes to fields.
 */
public class NonUniqueFieldNamesCreator {
  private InstructionFactory _factory;
  private ConstantPoolGen    _cp;
  private ClassGen           _cg;

  public NonUniqueFieldNamesCreator() {
    _cg = new ClassGen("jd.core.test.NonUniqueFieldNames", "java.lang.Object", "NonUniqueFieldNames.java", Const.ACC_PUBLIC | Const.ACC_SUPER, new String[] {  });
    _cg.setMajor(61);
    _cg.setMinor(0);

    _cp = _cg.getConstantPool();
    _factory = new InstructionFactory(_cg, _cp);
  }

  public void create(OutputStream out) throws IOException {
    createFields();
    createMethod_0();
    createMethod_1();
    createMethod_2();
    _cg.getJavaClass().dump(out);
  }

  private void createFields() {
    FieldGen field;

    field = new FieldGen(0, Type.STRING, "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("Ljava/lang/String;"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, Type.BYTE, "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("B"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, Type.BOOLEAN, "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("Z"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, Type.SHORT, "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("S"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, Type.CHAR, "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("C"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, Type.INT, "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("I"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, Type.LONG, "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("J"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, Type.FLOAT, "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("F"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, Type.DOUBLE, "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("D"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, new ArrayType(Type.BYTE, 1), "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("[B"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, new ArrayType(Type.BYTE, 2), "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("[[B"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, new ObjectType("java.util.List"), "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("Ljava/util/List<*>;"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, new ObjectType("java.util.List"), "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("Ljava/util/List<TT;>;"), _cp.getConstantPool()));
    _cg.addField(field.getField());

    field = new FieldGen(0, new ObjectType("java.util.Map"), "x", _cp);
    field.addAttribute(new Signature(_cp.addUtf8("Signature"), 2, _cp.addUtf8("Ljava/util/Map<+TT;-TT;>;"), _cp.getConstantPool()));
    _cg.addField(field.getField());
  }

  private void createMethod_0() {
    InstructionList il = new InstructionList();
    MethodGen method = new MethodGen(Const.ACC_PUBLIC, Type.VOID, Type.NO_ARGS, new String[] {  }, "<init>", "jd.core.test.NonUniqueFieldNames", il, _cp);

    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createInvoke("java.lang.Object", "<init>", Type.VOID, Type.NO_ARGS, Const.INVOKESPECIAL));
    il.append(InstructionFactory.createReturn(Type.VOID));
    method.setMaxStack();
    method.setMaxLocals();
    _cg.addMethod(method.getMethod());
    il.dispose();
  }

  private void createMethod_1() {
    InstructionList il = new InstructionList();
    MethodGen method = new MethodGen(Const.ACC_PUBLIC, Type.INT, Type.NO_ARGS, new String[] {  }, "hashCode", "jd.core.test.NonUniqueFieldNames", il, _cp);
    method.addCodeAttribute(new StackMap(_cp.addUtf8("StackMapTable"), 99, new StackMapEntry[] {new StackMapEntry(255, 102, new StackMapType[] {new StackMapType((byte)7, _cp.addClass("jd.core.test.NonUniqueFieldNames"), _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)4, -1, _cp.getConstantPool()) }, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()), new StackMapEntry(255, 2, new StackMapType[] {new StackMapType((byte)7, _cp.addClass("jd.core.test.NonUniqueFieldNames"), _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)4, -1, _cp.getConstantPool()) }, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()), new StackMapEntry(109, 45, null, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()), new StackMapEntry(255, 8, new StackMapType[] {new StackMapType((byte)7, _cp.addClass("jd.core.test.NonUniqueFieldNames"), _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)4, -1, _cp.getConstantPool()) }, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()), new StackMapEntry(90, 26, null, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()), new StackMapEntry(255, 6, new StackMapType[] {new StackMapType((byte)7, _cp.addClass("jd.core.test.NonUniqueFieldNames"), _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)4, -1, _cp.getConstantPool()) }, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()), new StackMapEntry(80, 16, null, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()), new StackMapEntry(255, 8, new StackMapType[] {new StackMapType((byte)7, _cp.addClass("jd.core.test.NonUniqueFieldNames"), _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)4, -1, _cp.getConstantPool()) }, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()), new StackMapEntry(80, 16, null, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()), new StackMapEntry(255, 8, new StackMapType[] {new StackMapType((byte)7, _cp.addClass("jd.core.test.NonUniqueFieldNames"), _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)4, -1, _cp.getConstantPool()) }, new StackMapType[] {new StackMapType((byte)1, -1, _cp.getConstantPool()), new StackMapType((byte)1, -1, _cp.getConstantPool()) }, _cp.getConstantPool()) }, _cp.getConstantPool()));

    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createStore(Type.INT, 1));
    il.append(new PUSH(_cp, 1));
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.BYTE, Const.GETFIELD));
    il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ArrayType(Type.BYTE, 1), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.Arrays", "hashCode", Type.INT, new Type[] { new ArrayType(Type.BYTE, 1) }, Const.INVOKESTATIC));
    il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ArrayType(Type.BYTE, 2), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.Arrays", "deepHashCode", Type.INT, new Type[] { new ArrayType(Type.OBJECT, 1) }, Const.INVOKESTATIC));
    il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.CHAR, Const.GETFIELD));
    il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.DOUBLE, Const.GETFIELD));
    il.append(_factory.createInvoke("java.lang.Double", "doubleToLongBits", Type.LONG, new Type[] { Type.DOUBLE }, Const.INVOKESTATIC));
    il.append(InstructionFactory.createStore(Type.LONG, 3));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.LONG, 3));
    il.append(InstructionFactory.createLoad(Type.LONG, 3));
    il.append(new PUSH(_cp, 32));
    il.append(InstructionConst.LUSHR);
    il.append(InstructionConst.LXOR);
    il.append(InstructionConst.L2I);
    il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.FLOAT, Const.GETFIELD));
    il.append(_factory.createInvoke("java.lang.Float", "floatToIntBits", Type.INT, new Type[] { Type.FLOAT }, Const.INVOKESTATIC));
    il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.BOOLEAN, Const.GETFIELD));
        BranchInstruction ifeq_93 = InstructionFactory.createBranchInstruction(Const.IFEQ, null);
    il.append(ifeq_93);
    il.append(new PUSH(_cp, 1231));
        BranchInstruction goto_99 = InstructionFactory.createBranchInstruction(Const.GOTO, null);
    il.append(goto_99);
    InstructionHandle ih_102 = il.append(new PUSH(_cp, 1237));
    InstructionHandle ih_105 = il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.INT, Const.GETFIELD));
    il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.LONG, Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.LONG, Const.GETFIELD));
    il.append(new PUSH(_cp, 32));
    il.append(InstructionConst.LUSHR);
    il.append(InstructionConst.LXOR);
    il.append(InstructionConst.L2I);
    il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.Map"), Const.GETFIELD));
        BranchInstruction ifnonnull_144 = InstructionFactory.createBranchInstruction(Const.IFNONNULL, null);
    il.append(ifnonnull_144);
    il.append(new PUSH(_cp, 0));
        BranchInstruction goto_148 = InstructionFactory.createBranchInstruction(Const.GOTO, null);
    il.append(goto_148);
    InstructionHandle ih_151 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.Map"), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.Map", "hashCode", Type.INT, Type.NO_ARGS, Const.INVOKEINTERFACE));
    InstructionHandle ih_160 = il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.SHORT, Const.GETFIELD));
    il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.STRING, Const.GETFIELD));
        BranchInstruction ifnonnull_180 = InstructionFactory.createBranchInstruction(Const.IFNONNULL, null);
    il.append(ifnonnull_180);
    il.append(new PUSH(_cp, 0));
        BranchInstruction goto_184 = InstructionFactory.createBranchInstruction(Const.GOTO, null);
    il.append(goto_184);
    InstructionHandle ih_187 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.STRING, Const.GETFIELD));
    il.append(_factory.createInvoke("java.lang.String", "hashCode", Type.INT, Type.NO_ARGS, Const.INVOKEVIRTUAL));
    InstructionHandle ih_194 = il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
        BranchInstruction ifnonnull_204 = InstructionFactory.createBranchInstruction(Const.IFNONNULL, null);
    il.append(ifnonnull_204);
    il.append(new PUSH(_cp, 0));
        BranchInstruction goto_208 = InstructionFactory.createBranchInstruction(Const.GOTO, null);
    il.append(goto_208);
    InstructionHandle ih_211 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.List", "hashCode", Type.INT, Type.NO_ARGS, Const.INVOKEINTERFACE));
    InstructionHandle ih_220 = il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(new PUSH(_cp, 31));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionConst.IMUL);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
        BranchInstruction ifnonnull_230 = InstructionFactory.createBranchInstruction(Const.IFNONNULL, null);
    il.append(ifnonnull_230);
    il.append(new PUSH(_cp, 0));
        BranchInstruction goto_234 = InstructionFactory.createBranchInstruction(Const.GOTO, null);
    il.append(goto_234);
    InstructionHandle ih_237 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.List", "hashCode", Type.INT, Type.NO_ARGS, Const.INVOKEINTERFACE));
    InstructionHandle ih_246 = il.append(InstructionConst.IADD);
    il.append(InstructionFactory.createStore(Type.INT, 2));
    il.append(InstructionFactory.createLoad(Type.INT, 2));
    il.append(InstructionFactory.createReturn(Type.INT));
    ifeq_93.setTarget(ih_102);
    goto_99.setTarget(ih_105);
    ifnonnull_144.setTarget(ih_151);
    goto_148.setTarget(ih_160);
    ifnonnull_180.setTarget(ih_187);
    goto_184.setTarget(ih_194);
    ifnonnull_204.setTarget(ih_211);
    goto_208.setTarget(ih_220);
    ifnonnull_230.setTarget(ih_237);
    goto_234.setTarget(ih_246);
    method.setMaxStack();
    method.setMaxLocals();
    _cg.addMethod(method.getMethod());
    il.dispose();
  }

  private void createMethod_2() {
    InstructionList il = new InstructionList();
    MethodGen method = new MethodGen(Const.ACC_PUBLIC, Type.BOOLEAN, new Type[] { Type.OBJECT }, new String[] { "arg0" }, "equals", "jd.core.test.NonUniqueFieldNames", il, _cp);
    method.addCodeAttribute(new StackMap(_cp.addUtf8("StackMapTable"), 28, new StackMapEntry[] {new StackMapEntry(7, 7, null, null, _cp.getConstantPool()), new StackMapEntry(5, 5, null, null, _cp.getConstantPool()), new StackMapEntry(12, 12, null, null, _cp.getConstantPool()), new StackMapEntry(252, 17, new StackMapType[] {new StackMapType((byte)7, _cp.addClass("jd.core.test.NonUniqueFieldNames"), _cp.getConstantPool()) }, null, _cp.getConstantPool()), new StackMapEntry(15, 15, null, null, _cp.getConstantPool()), new StackMapEntry(15, 15, null, null, _cp.getConstantPool()), new StackMapEntry(12, 12, null, null, _cp.getConstantPool()), new StackMapEntry(19, 19, null, null, _cp.getConstantPool()), new StackMapEntry(18, 18, null, null, _cp.getConstantPool()), new StackMapEntry(12, 12, null, null, _cp.getConstantPool()), new StackMapEntry(12, 12, null, null, _cp.getConstantPool()), new StackMapEntry(13, 13, null, null, _cp.getConstantPool()), new StackMapEntry(15, 15, null, null, _cp.getConstantPool()), new StackMapEntry(17, 17, null, null, _cp.getConstantPool()), new StackMapEntry(12, 12, null, null, _cp.getConstantPool()), new StackMapEntry(15, 15, null, null, _cp.getConstantPool()), new StackMapEntry(15, 15, null, null, _cp.getConstantPool()), new StackMapEntry(15, 15, null, null, _cp.getConstantPool()), new StackMapEntry(17, 17, null, null, _cp.getConstantPool()), new StackMapEntry(15, 15, null, null, _cp.getConstantPool()), new StackMapEntry(17, 17, null, null, _cp.getConstantPool()) }, _cp.getConstantPool()));

    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 1));
        BranchInstruction if_acmpne_2 = InstructionFactory.createBranchInstruction(Const.IF_ACMPNE, null);
    il.append(if_acmpne_2);
    il.append(new PUSH(_cp, 1));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_7 = il.append(InstructionFactory.createLoad(Type.OBJECT, 1));
        BranchInstruction ifnonnull_8 = InstructionFactory.createBranchInstruction(Const.IFNONNULL, null);
    il.append(ifnonnull_8);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_13 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createInvoke("java.lang.Object", "getClass", new ObjectType("java.lang.Class"), Type.NO_ARGS, Const.INVOKEVIRTUAL));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 1));
    il.append(_factory.createInvoke("java.lang.Object", "getClass", new ObjectType("java.lang.Class"), Type.NO_ARGS, Const.INVOKEVIRTUAL));
        BranchInstruction if_acmpeq_21 = InstructionFactory.createBranchInstruction(Const.IF_ACMPEQ, null);
    il.append(if_acmpeq_21);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_26 = il.append(InstructionFactory.createLoad(Type.OBJECT, 1));
    il.append(_factory.createCheckCast(new ObjectType("jd.core.test.NonUniqueFieldNames")));
    il.append(InstructionFactory.createStore(Type.OBJECT, 2));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.BYTE, Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.BYTE, Const.GETFIELD));
        BranchInstruction if_icmpeq_39 = InstructionFactory.createBranchInstruction(Const.IF_ICMPEQ, null);
    il.append(if_icmpeq_39);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_44 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ArrayType(Type.BYTE, 1), Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ArrayType(Type.BYTE, 1), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.Arrays", "equals", Type.BOOLEAN, new Type[] { new ArrayType(Type.BYTE, 1), new ArrayType(Type.BYTE, 1) }, Const.INVOKESTATIC));
        BranchInstruction ifne_55 = InstructionFactory.createBranchInstruction(Const.IFNE, null);
    il.append(ifne_55);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_60 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ArrayType(Type.BYTE, 2), Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ArrayType(Type.BYTE, 2), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.Arrays", "deepEquals", Type.BOOLEAN, new Type[] { new ArrayType(Type.OBJECT, 1), new ArrayType(Type.OBJECT, 1) }, Const.INVOKESTATIC));
        BranchInstruction ifne_71 = InstructionFactory.createBranchInstruction(Const.IFNE, null);
    il.append(ifne_71);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_76 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.CHAR, Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.CHAR, Const.GETFIELD));
        BranchInstruction if_icmpeq_84 = InstructionFactory.createBranchInstruction(Const.IF_ICMPEQ, null);
    il.append(if_icmpeq_84);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_89 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.DOUBLE, Const.GETFIELD));
    il.append(_factory.createInvoke("java.lang.Double", "doubleToLongBits", Type.LONG, new Type[] { Type.DOUBLE }, Const.INVOKESTATIC));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.DOUBLE, Const.GETFIELD));
    il.append(_factory.createInvoke("java.lang.Double", "doubleToLongBits", Type.LONG, new Type[] { Type.DOUBLE }, Const.INVOKESTATIC));
    il.append(InstructionConst.LCMP);
        BranchInstruction ifeq_104 = InstructionFactory.createBranchInstruction(Const.IFEQ, null);
    il.append(ifeq_104);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_109 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.FLOAT, Const.GETFIELD));
    il.append(_factory.createInvoke("java.lang.Float", "floatToIntBits", Type.INT, new Type[] { Type.FLOAT }, Const.INVOKESTATIC));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.FLOAT, Const.GETFIELD));
    il.append(_factory.createInvoke("java.lang.Float", "floatToIntBits", Type.INT, new Type[] { Type.FLOAT }, Const.INVOKESTATIC));
        BranchInstruction if_icmpeq_123 = InstructionFactory.createBranchInstruction(Const.IF_ICMPEQ, null);
    il.append(if_icmpeq_123);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_128 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.BOOLEAN, Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.BOOLEAN, Const.GETFIELD));
        BranchInstruction if_icmpeq_136 = InstructionFactory.createBranchInstruction(Const.IF_ICMPEQ, null);
    il.append(if_icmpeq_136);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_141 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.INT, Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.INT, Const.GETFIELD));
        BranchInstruction if_icmpeq_149 = InstructionFactory.createBranchInstruction(Const.IF_ICMPEQ, null);
    il.append(if_icmpeq_149);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_154 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.LONG, Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.LONG, Const.GETFIELD));
    il.append(InstructionConst.LCMP);
        BranchInstruction ifeq_163 = InstructionFactory.createBranchInstruction(Const.IFEQ, null);
    il.append(ifeq_163);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_168 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.Map"), Const.GETFIELD));
        BranchInstruction ifnonnull_172 = InstructionFactory.createBranchInstruction(Const.IFNONNULL, null);
    il.append(ifnonnull_172);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.Map"), Const.GETFIELD));
        BranchInstruction ifnull_179 = InstructionFactory.createBranchInstruction(Const.IFNULL, null);
    il.append(ifnull_179);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_184 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.Map"), Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.Map"), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.Map", "equals", Type.BOOLEAN, new Type[] { Type.OBJECT }, Const.INVOKEINTERFACE));
        BranchInstruction ifne_197 = InstructionFactory.createBranchInstruction(Const.IFNE, null);
    il.append(ifne_197);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_202 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.SHORT, Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.SHORT, Const.GETFIELD));
        BranchInstruction if_icmpeq_210 = InstructionFactory.createBranchInstruction(Const.IF_ICMPEQ, null);
    il.append(if_icmpeq_210);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_215 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.STRING, Const.GETFIELD));
        BranchInstruction ifnonnull_219 = InstructionFactory.createBranchInstruction(Const.IFNONNULL, null);
    il.append(ifnonnull_219);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.STRING, Const.GETFIELD));
        BranchInstruction ifnull_226 = InstructionFactory.createBranchInstruction(Const.IFNULL, null);
    il.append(ifnull_226);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_231 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.STRING, Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", Type.STRING, Const.GETFIELD));
    il.append(_factory.createInvoke("java.lang.String", "equals", Type.BOOLEAN, new Type[] { Type.OBJECT }, Const.INVOKEVIRTUAL));
        BranchInstruction ifne_242 = InstructionFactory.createBranchInstruction(Const.IFNE, null);
    il.append(ifne_242);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_247 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
        BranchInstruction ifnonnull_251 = InstructionFactory.createBranchInstruction(Const.IFNONNULL, null);
    il.append(ifnonnull_251);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
        BranchInstruction ifnull_258 = InstructionFactory.createBranchInstruction(Const.IFNULL, null);
    il.append(ifnull_258);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_263 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.List", "equals", Type.BOOLEAN, new Type[] { Type.OBJECT }, Const.INVOKEINTERFACE));
        BranchInstruction ifne_276 = InstructionFactory.createBranchInstruction(Const.IFNE, null);
    il.append(ifne_276);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_281 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
        BranchInstruction ifnonnull_285 = InstructionFactory.createBranchInstruction(Const.IFNONNULL, null);
    il.append(ifnonnull_285);
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
        BranchInstruction ifnull_292 = InstructionFactory.createBranchInstruction(Const.IFNULL, null);
    il.append(ifnull_292);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_297 = il.append(InstructionFactory.createLoad(Type.OBJECT, 0));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
    il.append(InstructionFactory.createLoad(Type.OBJECT, 2));
    il.append(_factory.createFieldAccess("jd.core.test.NonUniqueFieldNames", "x", new ObjectType("java.util.List"), Const.GETFIELD));
    il.append(_factory.createInvoke("java.util.List", "equals", Type.BOOLEAN, new Type[] { Type.OBJECT }, Const.INVOKEINTERFACE));
        BranchInstruction ifne_310 = InstructionFactory.createBranchInstruction(Const.IFNE, null);
    il.append(ifne_310);
    il.append(new PUSH(_cp, 0));
    il.append(InstructionFactory.createReturn(Type.INT));
    InstructionHandle ih_315 = il.append(new PUSH(_cp, 1));
    il.append(InstructionFactory.createReturn(Type.INT));
    if_acmpne_2.setTarget(ih_7);
    ifnonnull_8.setTarget(ih_13);
    if_acmpeq_21.setTarget(ih_26);
    if_icmpeq_39.setTarget(ih_44);
    ifne_55.setTarget(ih_60);
    ifne_71.setTarget(ih_76);
    if_icmpeq_84.setTarget(ih_89);
    ifeq_104.setTarget(ih_109);
    if_icmpeq_123.setTarget(ih_128);
    if_icmpeq_136.setTarget(ih_141);
    if_icmpeq_149.setTarget(ih_154);
    ifeq_163.setTarget(ih_168);
    ifnonnull_172.setTarget(ih_184);
    ifnull_179.setTarget(ih_202);
    ifne_197.setTarget(ih_202);
    if_icmpeq_210.setTarget(ih_215);
    ifnonnull_219.setTarget(ih_231);
    ifnull_226.setTarget(ih_247);
    ifne_242.setTarget(ih_247);
    ifnonnull_251.setTarget(ih_263);
    ifnull_258.setTarget(ih_281);
    ifne_276.setTarget(ih_281);
    ifnonnull_285.setTarget(ih_297);
    ifnull_292.setTarget(ih_315);
    ifne_310.setTarget(ih_315);
    method.setMaxStack();
    method.setMaxLocals();
    _cg.addMethod(method.getMethod());
    il.dispose();
  }
}
