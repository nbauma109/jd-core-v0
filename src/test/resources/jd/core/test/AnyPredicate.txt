/*     */ package org.apache.commons.collections4.functors;
/*     */ 
/*     */ import java.util.Collection;
/*     */ import org.apache.commons.collections4.Predicate;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class AnyPredicate<T>
/*     */   extends AbstractQuantifierPredicate<T>
/*     */ {
/*     */   private static final long serialVersionUID = 7429999530934647542L;
/*     */   
/*     */   public static <T> Predicate<T> anyPredicate(Predicate<? super T>... predicates)
/*     */   {
/*  53 */     FunctorUtils.validate(predicates);
/*  54 */     if (predicates.length == 0) {
/*  55 */       return FalsePredicate.falsePredicate();
/*     */     }
/*  57 */     if (predicates.length == 1) {
/*  58 */       return (Predicate<T>)predicates[0];
/*     */     }
/*  60 */     return new AnyPredicate<>(FunctorUtils.copy(predicates));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <T> Predicate<T> anyPredicate(Collection<? extends Predicate<? super T>> predicates)
/*     */   {
/*  77 */     Predicate<? super T>[] preds = FunctorUtils.validate(predicates);
/*  78 */     if (preds.length == 0) {
/*  79 */       return FalsePredicate.falsePredicate();
/*     */     }
/*  81 */     if (preds.length == 1) {
/*  82 */       return (Predicate<T>)preds[0];
/*     */     }
/*  84 */     return new AnyPredicate<>(preds);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public AnyPredicate(Predicate<? super T>... predicates)
/*     */   {
/*  94 */     super(predicates);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   @Override
/*     */   public boolean evaluate(T object)
/*     */   {
/* 105 */     for (Predicate<? super T> iPredicate : this.iPredicates) {
/* 106 */       if (iPredicate.evaluate(object)) {
/* 107 */         return true;
/*     */       }
/*     */     }
/* 110 */     return false;
/*     */   }
/*     */ }
