/*      */ package org.apache.commons.lang3;
/*      */ 
/*      */ import java.lang.reflect.Array;
/*      */ import java.lang.reflect.Field;
/*      */ import java.lang.reflect.Method;
/*      */ import java.lang.reflect.Type;
/*      */ import java.util.BitSet;
/*      */ import java.util.Comparator;
/*      */ import java.util.HashMap;
/*      */ import java.util.Map;
/*      */ import java.util.Map.Entry;
/*      */ import java.util.Random;
/*      */ import org.apache.commons.lang3.builder.EqualsBuilder;
/*      */ import org.apache.commons.lang3.builder.HashCodeBuilder;
/*      */ import org.apache.commons.lang3.builder.ToStringBuilder;
/*      */ import org.apache.commons.lang3.builder.ToStringStyle;
/*      */ import org.apache.commons.lang3.math.NumberUtils;
/*      */ import org.apache.commons.lang3.mutable.MutableInt;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class ArrayUtils
/*      */ {
/*      */   public static final int INDEX_NOT_FOUND = -1;
/*   54 */   public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*   59 */   public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*   64 */   public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*   69 */   public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*   74 */   public static final char[] EMPTY_CHAR_ARRAY = new char[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*   79 */   public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*   84 */   public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*   89 */   public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*   94 */   public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  101 */   public static final Field[] EMPTY_FIELD_ARRAY = new Field[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  106 */   public static final float[] EMPTY_FLOAT_ARRAY = new float[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  111 */   public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  116 */   public static final int[] EMPTY_INT_ARRAY = new int[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  121 */   public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  126 */   public static final long[] EMPTY_LONG_ARRAY = new long[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  131 */   public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  138 */   public static final Method[] EMPTY_METHOD_ARRAY = new Method[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  143 */   public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  148 */   public static final short[] EMPTY_SHORT_ARRAY = new short[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  153 */   public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*  158 */   public static final String[] EMPTY_STRING_ARRAY = new String[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  165 */   public static final Throwable[] EMPTY_THROWABLE_ARRAY = new Throwable[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  172 */   public static final Type[] EMPTY_TYPE_ARRAY = new Type[0];
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] add(boolean[] array, boolean element)
/*      */   {
/*  203 */     boolean[] newArray = (boolean[])copyArrayGrow1(array, Boolean.TYPE);
/*  204 */     newArray[(newArray.length - 1)] = element;
/*  205 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static boolean[] add(boolean[] array, int index, boolean element)
/*      */   {
/*  239 */     return (boolean[])add(array, index, Boolean.valueOf(element), Boolean.TYPE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] add(byte[] array, byte element)
/*      */   {
/*  264 */     byte[] newArray = (byte[])copyArrayGrow1(array, Byte.TYPE);
/*  265 */     newArray[(newArray.length - 1)] = element;
/*  266 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static byte[] add(byte[] array, int index, byte element)
/*      */   {
/*  301 */     return (byte[])add(array, index, Byte.valueOf(element), Byte.TYPE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] add(char[] array, char element)
/*      */   {
/*  326 */     char[] newArray = (char[])copyArrayGrow1(array, Character.TYPE);
/*  327 */     newArray[(newArray.length - 1)] = element;
/*  328 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static char[] add(char[] array, int index, char element)
/*      */   {
/*  364 */     return (char[])add(array, index, Character.valueOf(element), Character.TYPE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] add(double[] array, double element)
/*      */   {
/*  389 */     double[] newArray = (double[])copyArrayGrow1(array, Double.TYPE);
/*  390 */     newArray[(newArray.length - 1)] = element;
/*  391 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static double[] add(double[] array, int index, double element)
/*      */   {
/*  426 */     return (double[])add(array, index, Double.valueOf(element), Double.TYPE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] add(float[] array, float element)
/*      */   {
/*  451 */     float[] newArray = (float[])copyArrayGrow1(array, Float.TYPE);
/*  452 */     newArray[(newArray.length - 1)] = element;
/*  453 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static float[] add(float[] array, int index, float element)
/*      */   {
/*  488 */     return (float[])add(array, index, Float.valueOf(element), Float.TYPE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] add(int[] array, int element)
/*      */   {
/*  513 */     int[] newArray = (int[])copyArrayGrow1(array, Integer.TYPE);
/*  514 */     newArray[(newArray.length - 1)] = element;
/*  515 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static int[] add(int[] array, int index, int element)
/*      */   {
/*  550 */     return (int[])add(array, index, Integer.valueOf(element), Integer.TYPE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static long[] add(long[] array, int index, long element)
/*      */   {
/*  585 */     return (long[])add(array, index, Long.valueOf(element), Long.TYPE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] add(long[] array, long element)
/*      */   {
/*  610 */     long[] newArray = (long[])copyArrayGrow1(array, Long.TYPE);
/*  611 */     newArray[(newArray.length - 1)] = element;
/*  612 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static Object add(Object array, int index, Object element, Class<?> clss)
/*      */   {
/*  627 */     if (array == null) {
/*  628 */       if (index != 0) {
/*  629 */         throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");
/*      */       }
/*  631 */       Object joinedArray = Array.newInstance(clss, 1);
/*  632 */       Array.set(joinedArray, 0, element);
/*  633 */       return joinedArray;
/*      */     }
/*  635 */     int length = Array.getLength(array);
/*  636 */     if (index > length || index < 0) {
/*  637 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);
/*      */     }
/*  639 */     Object result = Array.newInstance(clss, length + 1);
/*  640 */     System.arraycopy(array, 0, result, 0, index);
/*  641 */     Array.set(result, index, element);
/*  642 */     if (index < length) {
/*  643 */       System.arraycopy(array, index, result, index + 1, length - index);
/*      */     }
/*  645 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static short[] add(short[] array, int index, short element)
/*      */   {
/*  680 */     return (short[])add(array, index, Short.valueOf(element), Short.TYPE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] add(short[] array, short element)
/*      */   {
/*  705 */     short[] newArray = (short[])copyArrayGrow1(array, Short.TYPE);
/*  706 */     newArray[(newArray.length - 1)] = element;
/*  707 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static <T> T[] add(T[] array, int index, T element)
/*      */   {
/*  745 */     Class<?> clss = null;
/*  746 */     if (array != null) {
/*  747 */       clss = array.getClass().getComponentType();
/*  748 */     } else if (element != null) {
/*  749 */       clss = element.getClass();
/*      */     } else {
/*  751 */       throw new IllegalArgumentException("Array and element cannot both be null");
/*      */     }
/*      */     
/*  754 */     T[] newArray = (T[])add(array, index, element, clss);
/*  755 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] add(T[] array, T element)
/*      */   {
/*      */     Class<?> type;
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  789 */     if (array != null) {
/*  790 */       type = array.getClass().getComponentType();
/*  791 */     } else if (element != null) {
/*  792 */       type = element.getClass();
/*      */     } else {
/*  794 */       throw new IllegalArgumentException("Arguments cannot both be null");
/*      */     }
/*      */     
/*      */ 
/*  798 */     T[] newArray = (T[])copyArrayGrow1(array, type);
/*  799 */     newArray[(newArray.length - 1)] = element;
/*  800 */     return newArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] addAll(boolean[] array1, boolean... array2)
/*      */   {
/*  821 */     if (array1 == null)
/*  822 */       return clone(array2);
/*  823 */     if (array2 == null) {
/*  824 */       return clone(array1);
/*      */     }
/*  826 */     boolean[] joinedArray = new boolean[array1.length + array2.length];
/*  827 */     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
/*  828 */     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
/*  829 */     return joinedArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] addAll(byte[] array1, byte... array2)
/*      */   {
/*  850 */     if (array1 == null)
/*  851 */       return clone(array2);
/*  852 */     if (array2 == null) {
/*  853 */       return clone(array1);
/*      */     }
/*  855 */     byte[] joinedArray = new byte[array1.length + array2.length];
/*  856 */     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
/*  857 */     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
/*  858 */     return joinedArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] addAll(char[] array1, char... array2)
/*      */   {
/*  879 */     if (array1 == null)
/*  880 */       return clone(array2);
/*  881 */     if (array2 == null) {
/*  882 */       return clone(array1);
/*      */     }
/*  884 */     char[] joinedArray = new char[array1.length + array2.length];
/*  885 */     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
/*  886 */     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
/*  887 */     return joinedArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] addAll(double[] array1, double... array2)
/*      */   {
/*  908 */     if (array1 == null)
/*  909 */       return clone(array2);
/*  910 */     if (array2 == null) {
/*  911 */       return clone(array1);
/*      */     }
/*  913 */     double[] joinedArray = new double[array1.length + array2.length];
/*  914 */     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
/*  915 */     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
/*  916 */     return joinedArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] addAll(float[] array1, float... array2)
/*      */   {
/*  937 */     if (array1 == null)
/*  938 */       return clone(array2);
/*  939 */     if (array2 == null) {
/*  940 */       return clone(array1);
/*      */     }
/*  942 */     float[] joinedArray = new float[array1.length + array2.length];
/*  943 */     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
/*  944 */     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
/*  945 */     return joinedArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] addAll(int[] array1, int... array2)
/*      */   {
/*  966 */     if (array1 == null)
/*  967 */       return clone(array2);
/*  968 */     if (array2 == null) {
/*  969 */       return clone(array1);
/*      */     }
/*  971 */     int[] joinedArray = new int[array1.length + array2.length];
/*  972 */     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
/*  973 */     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
/*  974 */     return joinedArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] addAll(long[] array1, long... array2)
/*      */   {
/*  995 */     if (array1 == null)
/*  996 */       return clone(array2);
/*  997 */     if (array2 == null) {
/*  998 */       return clone(array1);
/*      */     }
/* 1000 */     long[] joinedArray = new long[array1.length + array2.length];
/* 1001 */     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
/* 1002 */     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
/* 1003 */     return joinedArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] addAll(short[] array1, short... array2)
/*      */   {
/* 1024 */     if (array1 == null)
/* 1025 */       return clone(array2);
/* 1026 */     if (array2 == null) {
/* 1027 */       return clone(array1);
/*      */     }
/* 1029 */     short[] joinedArray = new short[array1.length + array2.length];
/* 1030 */     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
/* 1031 */     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
/* 1032 */     return joinedArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] addAll(T[] array1, T... array2)
/*      */   {
/* 1060 */     if (array1 == null)
/* 1061 */       return clone(array2);
/* 1062 */     if (array2 == null) {
/* 1063 */       return clone(array1);
/*      */     }
/* 1065 */     Class<?> type1 = array1.getClass().getComponentType();
/*      */     
/* 1067 */     T[] joinedArray = (T[])Array.newInstance(type1, array1.length + array2.length);
/* 1068 */     System.arraycopy(array1, 0, joinedArray, 0, array1.length);
/*      */     try {
/* 1070 */       System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
/*      */ 
/*      */ 
/*      */     }
/*      */     catch (ArrayStoreException ase)
/*      */     {
/*      */ 
/*      */ 
/* 1078 */       Class<?> type2 = array2.getClass().getComponentType();
/* 1079 */       if (!type1.isAssignableFrom(type2))
/*      */       {
/* 1081 */         throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName(), ase);
/*      */       }
/* 1083 */       throw ase;
/*      */     }
/* 1085 */     return joinedArray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] addFirst(boolean[] array, boolean element)
/*      */   {
/* 1114 */     return array == null ? add(array, element) : insert(0, array, element);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] addFirst(byte[] array, byte element)
/*      */   {
/* 1143 */     return array == null ? add(array, element) : insert(0, array, element);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] addFirst(char[] array, char element)
/*      */   {
/* 1172 */     return array == null ? add(array, element) : insert(0, array, element);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] addFirst(double[] array, double element)
/*      */   {
/* 1201 */     return array == null ? add(array, element) : insert(0, array, element);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] addFirst(float[] array, float element)
/*      */   {
/* 1230 */     return array == null ? add(array, element) : insert(0, array, element);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] addFirst(int[] array, int element)
/*      */   {
/* 1259 */     return array == null ? add(array, element) : insert(0, array, element);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] addFirst(long[] array, long element)
/*      */   {
/* 1288 */     return array == null ? add(array, element) : insert(0, array, element);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] addFirst(short[] array, short element)
/*      */   {
/* 1317 */     return array == null ? add(array, element) : insert(0, array, element);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] addFirst(T[] array, T element)
/*      */   {
/* 1351 */     return array == null ? add(array, element) : insert(0, array, element);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] clone(boolean[] array)
/*      */   {
/* 1364 */     if (array == null) {
/* 1365 */       return null;
/*      */     }
/* 1367 */     return (boolean[])array.clone();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] clone(byte[] array)
/*      */   {
/* 1380 */     if (array == null) {
/* 1381 */       return null;
/*      */     }
/* 1383 */     return (byte[])array.clone();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] clone(char[] array)
/*      */   {
/* 1396 */     if (array == null) {
/* 1397 */       return null;
/*      */     }
/* 1399 */     return (char[])array.clone();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] clone(double[] array)
/*      */   {
/* 1412 */     if (array == null) {
/* 1413 */       return null;
/*      */     }
/* 1415 */     return (double[])array.clone();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] clone(float[] array)
/*      */   {
/* 1428 */     if (array == null) {
/* 1429 */       return null;
/*      */     }
/* 1431 */     return (float[])array.clone();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] clone(int[] array)
/*      */   {
/* 1444 */     if (array == null) {
/* 1445 */       return null;
/*      */     }
/* 1447 */     return (int[])array.clone();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] clone(long[] array)
/*      */   {
/* 1460 */     if (array == null) {
/* 1461 */       return null;
/*      */     }
/* 1463 */     return (long[])array.clone();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] clone(short[] array)
/*      */   {
/* 1476 */     if (array == null) {
/* 1477 */       return null;
/*      */     }
/* 1479 */     return (short[])array.clone();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] clone(T[] array)
/*      */   {
/* 1498 */     if (array == null) {
/* 1499 */       return null;
/*      */     }
/* 1501 */     return (T[])array.clone();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(boolean[] array, boolean valueToFind)
/*      */   {
/* 1514 */     return indexOf(array, valueToFind) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(byte[] array, byte valueToFind)
/*      */   {
/* 1527 */     return indexOf(array, valueToFind) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(char[] array, char valueToFind)
/*      */   {
/* 1541 */     return indexOf(array, valueToFind) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(double[] array, double valueToFind)
/*      */   {
/* 1554 */     return indexOf(array, valueToFind) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(double[] array, double valueToFind, double tolerance)
/*      */   {
/* 1571 */     return indexOf(array, valueToFind, 0, tolerance) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(float[] array, float valueToFind)
/*      */   {
/* 1584 */     return indexOf(array, valueToFind) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(int[] array, int valueToFind)
/*      */   {
/* 1597 */     return indexOf(array, valueToFind) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(long[] array, long valueToFind)
/*      */   {
/* 1610 */     return indexOf(array, valueToFind) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(Object[] array, Object objectToFind)
/*      */   {
/* 1623 */     return indexOf(array, objectToFind) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(short[] array, short valueToFind)
/*      */   {
/* 1636 */     return indexOf(array, valueToFind) != -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static Object copyArrayGrow1(Object array, Class<?> newArrayComponentType)
/*      */   {
/* 1649 */     if (array != null) {
/* 1650 */       int arrayLength = Array.getLength(array);
/* 1651 */       Object newArray = Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);
/* 1652 */       System.arraycopy(array, 0, newArray, 0, arrayLength);
/* 1653 */       return newArray;
/*      */     }
/* 1655 */     return Array.newInstance(newArrayComponentType, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T get(T[] array, int index)
/*      */   {
/* 1668 */     return get(array, index, null);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T get(T[] array, int index, T defaultValue)
/*      */   {
/* 1682 */     return isArrayIndexValid(array, index) ? array[index] : defaultValue;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int getLength(Object array)
/*      */   {
/* 1707 */     if (array == null) {
/* 1708 */       return 0;
/*      */     }
/* 1710 */     return Array.getLength(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int hashCode(Object array)
/*      */   {
/* 1722 */     return new HashCodeBuilder().append(array).toHashCode();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(boolean[] array, boolean valueToFind)
/*      */   {
/* 1737 */     return indexesOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(boolean[] array, boolean valueToFind, int startIndex)
/*      */   {
/* 1757 */     BitSet bitSet = new BitSet();
/*      */     
/* 1759 */     if (array == null) {
/* 1760 */       return bitSet;
/*      */     }
/*      */     
/* 1763 */     while (startIndex < array.length) {
/* 1764 */       startIndex = indexOf(array, valueToFind, startIndex);
/*      */       
/* 1766 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 1770 */       bitSet.set(startIndex);
/* 1771 */       startIndex++;
/*      */     }
/*      */     
/* 1774 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(byte[] array, byte valueToFind)
/*      */   {
/* 1789 */     return indexesOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(byte[] array, byte valueToFind, int startIndex)
/*      */   {
/* 1808 */     BitSet bitSet = new BitSet();
/*      */     
/* 1810 */     if (array == null) {
/* 1811 */       return bitSet;
/*      */     }
/*      */     
/* 1814 */     while (startIndex < array.length) {
/* 1815 */       startIndex = indexOf(array, valueToFind, startIndex);
/*      */       
/* 1817 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 1821 */       bitSet.set(startIndex);
/* 1822 */       startIndex++;
/*      */     }
/*      */     
/* 1825 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(char[] array, char valueToFind)
/*      */   {
/* 1840 */     return indexesOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(char[] array, char valueToFind, int startIndex)
/*      */   {
/* 1859 */     BitSet bitSet = new BitSet();
/*      */     
/* 1861 */     if (array == null) {
/* 1862 */       return bitSet;
/*      */     }
/*      */     
/* 1865 */     while (startIndex < array.length) {
/* 1866 */       startIndex = indexOf(array, valueToFind, startIndex);
/*      */       
/* 1868 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 1872 */       bitSet.set(startIndex);
/* 1873 */       startIndex++;
/*      */     }
/*      */     
/* 1876 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(double[] array, double valueToFind)
/*      */   {
/* 1891 */     return indexesOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(double[] array, double valueToFind, double tolerance)
/*      */   {
/* 1912 */     return indexesOf(array, valueToFind, 0, tolerance);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(double[] array, double valueToFind, int startIndex)
/*      */   {
/* 1931 */     BitSet bitSet = new BitSet();
/*      */     
/* 1933 */     if (array == null) {
/* 1934 */       return bitSet;
/*      */     }
/*      */     
/* 1937 */     while (startIndex < array.length) {
/* 1938 */       startIndex = indexOf(array, valueToFind, startIndex);
/*      */       
/* 1940 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 1944 */       bitSet.set(startIndex);
/* 1945 */       startIndex++;
/*      */     }
/*      */     
/* 1948 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(double[] array, double valueToFind, int startIndex, double tolerance)
/*      */   {
/* 1973 */     BitSet bitSet = new BitSet();
/*      */     
/* 1975 */     if (array == null) {
/* 1976 */       return bitSet;
/*      */     }
/*      */     
/* 1979 */     while (startIndex < array.length) {
/* 1980 */       startIndex = indexOf(array, valueToFind, startIndex, tolerance);
/*      */       
/* 1982 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 1986 */       bitSet.set(startIndex);
/* 1987 */       startIndex++;
/*      */     }
/*      */     
/* 1990 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(float[] array, float valueToFind)
/*      */   {
/* 2005 */     return indexesOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(float[] array, float valueToFind, int startIndex)
/*      */   {
/* 2024 */     BitSet bitSet = new BitSet();
/*      */     
/* 2026 */     if (array == null) {
/* 2027 */       return bitSet;
/*      */     }
/*      */     
/* 2030 */     while (startIndex < array.length) {
/* 2031 */       startIndex = indexOf(array, valueToFind, startIndex);
/*      */       
/* 2033 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 2037 */       bitSet.set(startIndex);
/* 2038 */       startIndex++;
/*      */     }
/*      */     
/* 2041 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(int[] array, int valueToFind)
/*      */   {
/* 2056 */     return indexesOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(int[] array, int valueToFind, int startIndex)
/*      */   {
/* 2075 */     BitSet bitSet = new BitSet();
/*      */     
/* 2077 */     if (array == null) {
/* 2078 */       return bitSet;
/*      */     }
/*      */     
/* 2081 */     while (startIndex < array.length) {
/* 2082 */       startIndex = indexOf(array, valueToFind, startIndex);
/*      */       
/* 2084 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 2088 */       bitSet.set(startIndex);
/* 2089 */       startIndex++;
/*      */     }
/*      */     
/* 2092 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(long[] array, long valueToFind)
/*      */   {
/* 2107 */     return indexesOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(long[] array, long valueToFind, int startIndex)
/*      */   {
/* 2126 */     BitSet bitSet = new BitSet();
/*      */     
/* 2128 */     if (array == null) {
/* 2129 */       return bitSet;
/*      */     }
/*      */     
/* 2132 */     while (startIndex < array.length) {
/* 2133 */       startIndex = indexOf(array, valueToFind, startIndex);
/*      */       
/* 2135 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 2139 */       bitSet.set(startIndex);
/* 2140 */       startIndex++;
/*      */     }
/*      */     
/* 2143 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(Object[] array, Object objectToFind)
/*      */   {
/* 2158 */     return indexesOf(array, objectToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(Object[] array, Object objectToFind, int startIndex)
/*      */   {
/* 2177 */     BitSet bitSet = new BitSet();
/*      */     
/* 2179 */     if (array == null) {
/* 2180 */       return bitSet;
/*      */     }
/*      */     
/* 2183 */     while (startIndex < array.length) {
/* 2184 */       startIndex = indexOf(array, objectToFind, startIndex);
/*      */       
/* 2186 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 2190 */       bitSet.set(startIndex);
/* 2191 */       startIndex++;
/*      */     }
/*      */     
/* 2194 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(short[] array, short valueToFind)
/*      */   {
/* 2209 */     return indexesOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static BitSet indexesOf(short[] array, short valueToFind, int startIndex)
/*      */   {
/* 2228 */     BitSet bitSet = new BitSet();
/*      */     
/* 2230 */     if (array == null) {
/* 2231 */       return bitSet;
/*      */     }
/*      */     
/* 2234 */     while (startIndex < array.length) {
/* 2235 */       startIndex = indexOf(array, valueToFind, startIndex);
/*      */       
/* 2237 */       if (startIndex == -1) {
/*      */         break;
/*      */       }
/*      */       
/* 2241 */       bitSet.set(startIndex);
/* 2242 */       startIndex++;
/*      */     }
/*      */     
/* 2245 */     return bitSet;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(boolean[] array, boolean valueToFind)
/*      */   {
/* 2261 */     return indexOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(boolean[] array, boolean valueToFind, int startIndex)
/*      */   {
/* 2280 */     if (isEmpty(array)) {
/* 2281 */       return -1;
/*      */     }
/* 2283 */     if (startIndex < 0) {
/* 2284 */       startIndex = 0;
/*      */     }
/* 2286 */     for (int i = startIndex; i < array.length; i++) {
/* 2287 */       if (valueToFind == array[i]) {
/* 2288 */         return i;
/*      */       }
/*      */     }
/* 2291 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(byte[] array, byte valueToFind)
/*      */   {
/* 2307 */     return indexOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(byte[] array, byte valueToFind, int startIndex)
/*      */   {
/* 2325 */     if (array == null) {
/* 2326 */       return -1;
/*      */     }
/* 2328 */     if (startIndex < 0) {
/* 2329 */       startIndex = 0;
/*      */     }
/* 2331 */     for (int i = startIndex; i < array.length; i++) {
/* 2332 */       if (valueToFind == array[i]) {
/* 2333 */         return i;
/*      */       }
/*      */     }
/* 2336 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(char[] array, char valueToFind)
/*      */   {
/* 2353 */     return indexOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(char[] array, char valueToFind, int startIndex)
/*      */   {
/* 2372 */     if (array == null) {
/* 2373 */       return -1;
/*      */     }
/* 2375 */     if (startIndex < 0) {
/* 2376 */       startIndex = 0;
/*      */     }
/* 2378 */     for (int i = startIndex; i < array.length; i++) {
/* 2379 */       if (valueToFind == array[i]) {
/* 2380 */         return i;
/*      */       }
/*      */     }
/* 2383 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(double[] array, double valueToFind)
/*      */   {
/* 2399 */     return indexOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(double[] array, double valueToFind, double tolerance)
/*      */   {
/* 2416 */     return indexOf(array, valueToFind, 0, tolerance);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(double[] array, double valueToFind, int startIndex)
/*      */   {
/* 2434 */     if (isEmpty(array)) {
/* 2435 */       return -1;
/*      */     }
/* 2437 */     if (startIndex < 0) {
/* 2438 */       startIndex = 0;
/*      */     }
/* 2440 */     boolean searchNaN = Double.isNaN(valueToFind);
/* 2441 */     for (int i = startIndex; i < array.length; i++) {
/* 2442 */       double element = array[i];
/* 2443 */       if (valueToFind == element || searchNaN && Double.isNaN(element)) {
/* 2444 */         return i;
/*      */       }
/*      */     }
/* 2447 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance)
/*      */   {
/* 2468 */     if (isEmpty(array)) {
/* 2469 */       return -1;
/*      */     }
/* 2471 */     if (startIndex < 0) {
/* 2472 */       startIndex = 0;
/*      */     }
/* 2474 */     double min = valueToFind - tolerance;
/* 2475 */     double max = valueToFind + tolerance;
/* 2476 */     for (int i = startIndex; i < array.length; i++) {
/* 2477 */       if (array[i] >= min && array[i] <= max) {
/* 2478 */         return i;
/*      */       }
/*      */     }
/* 2481 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(float[] array, float valueToFind)
/*      */   {
/* 2497 */     return indexOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(float[] array, float valueToFind, int startIndex)
/*      */   {
/* 2515 */     if (isEmpty(array)) {
/* 2516 */       return -1;
/*      */     }
/* 2518 */     if (startIndex < 0) {
/* 2519 */       startIndex = 0;
/*      */     }
/* 2521 */     boolean searchNaN = Float.isNaN(valueToFind);
/* 2522 */     for (int i = startIndex; i < array.length; i++) {
/* 2523 */       float element = array[i];
/* 2524 */       if (valueToFind == element || searchNaN && Float.isNaN(element)) {
/* 2525 */         return i;
/*      */       }
/*      */     }
/* 2528 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(int[] array, int valueToFind)
/*      */   {
/* 2544 */     return indexOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(int[] array, int valueToFind, int startIndex)
/*      */   {
/* 2562 */     if (array == null) {
/* 2563 */       return -1;
/*      */     }
/* 2565 */     if (startIndex < 0) {
/* 2566 */       startIndex = 0;
/*      */     }
/* 2568 */     for (int i = startIndex; i < array.length; i++) {
/* 2569 */       if (valueToFind == array[i]) {
/* 2570 */         return i;
/*      */       }
/*      */     }
/* 2573 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(long[] array, long valueToFind)
/*      */   {
/* 2589 */     return indexOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(long[] array, long valueToFind, int startIndex)
/*      */   {
/* 2607 */     if (array == null) {
/* 2608 */       return -1;
/*      */     }
/* 2610 */     if (startIndex < 0) {
/* 2611 */       startIndex = 0;
/*      */     }
/* 2613 */     for (int i = startIndex; i < array.length; i++) {
/* 2614 */       if (valueToFind == array[i]) {
/* 2615 */         return i;
/*      */       }
/*      */     }
/* 2618 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(Object[] array, Object objectToFind)
/*      */   {
/* 2634 */     return indexOf(array, objectToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(Object[] array, Object objectToFind, int startIndex)
/*      */   {
/* 2652 */     if (array == null) {
/* 2653 */       return -1;
/*      */     }
/* 2655 */     if (startIndex < 0) {
/* 2656 */       startIndex = 0;
/*      */     }
/* 2658 */     if (objectToFind == null) {
/* 2659 */       for (int i = startIndex; i < array.length; i++) {
/* 2660 */         if (array[i] == null) {
/* 2661 */           return i;
/*      */         }
/*      */       }
/*      */     } else {
/* 2665 */       for (int i = startIndex; i < array.length; i++) {
/* 2666 */         if (objectToFind.equals(array[i])) {
/* 2667 */           return i;
/*      */         }
/*      */       }
/*      */     }
/* 2671 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(short[] array, short valueToFind)
/*      */   {
/* 2687 */     return indexOf(array, valueToFind, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(short[] array, short valueToFind, int startIndex)
/*      */   {
/* 2705 */     if (array == null) {
/* 2706 */       return -1;
/*      */     }
/* 2708 */     if (startIndex < 0) {
/* 2709 */       startIndex = 0;
/*      */     }
/* 2711 */     for (int i = startIndex; i < array.length; i++) {
/* 2712 */       if (valueToFind == array[i]) {
/* 2713 */         return i;
/*      */       }
/*      */     }
/* 2716 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] insert(int index, boolean[] array, boolean... values)
/*      */   {
/* 2739 */     if (array == null) {
/* 2740 */       return null;
/*      */     }
/* 2742 */     if (isEmpty(values)) {
/* 2743 */       return clone(array);
/*      */     }
/* 2745 */     if (index < 0 || index > array.length) {
/* 2746 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + array.length);
/*      */     }
/*      */     
/* 2749 */     boolean[] result = new boolean[array.length + values.length];
/*      */     
/* 2751 */     System.arraycopy(values, 0, result, index, values.length);
/* 2752 */     if (index > 0) {
/* 2753 */       System.arraycopy(array, 0, result, 0, index);
/*      */     }
/* 2755 */     if (index < array.length) {
/* 2756 */       System.arraycopy(array, index, result, index + values.length, array.length - index);
/*      */     }
/* 2758 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] insert(int index, byte[] array, byte... values)
/*      */   {
/* 2781 */     if (array == null) {
/* 2782 */       return null;
/*      */     }
/* 2784 */     if (isEmpty(values)) {
/* 2785 */       return clone(array);
/*      */     }
/* 2787 */     if (index < 0 || index > array.length) {
/* 2788 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + array.length);
/*      */     }
/*      */     
/* 2791 */     byte[] result = new byte[array.length + values.length];
/*      */     
/* 2793 */     System.arraycopy(values, 0, result, index, values.length);
/* 2794 */     if (index > 0) {
/* 2795 */       System.arraycopy(array, 0, result, 0, index);
/*      */     }
/* 2797 */     if (index < array.length) {
/* 2798 */       System.arraycopy(array, index, result, index + values.length, array.length - index);
/*      */     }
/* 2800 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] insert(int index, char[] array, char... values)
/*      */   {
/* 2823 */     if (array == null) {
/* 2824 */       return null;
/*      */     }
/* 2826 */     if (isEmpty(values)) {
/* 2827 */       return clone(array);
/*      */     }
/* 2829 */     if (index < 0 || index > array.length) {
/* 2830 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + array.length);
/*      */     }
/*      */     
/* 2833 */     char[] result = new char[array.length + values.length];
/*      */     
/* 2835 */     System.arraycopy(values, 0, result, index, values.length);
/* 2836 */     if (index > 0) {
/* 2837 */       System.arraycopy(array, 0, result, 0, index);
/*      */     }
/* 2839 */     if (index < array.length) {
/* 2840 */       System.arraycopy(array, index, result, index + values.length, array.length - index);
/*      */     }
/* 2842 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] insert(int index, double[] array, double... values)
/*      */   {
/* 2865 */     if (array == null) {
/* 2866 */       return null;
/*      */     }
/* 2868 */     if (isEmpty(values)) {
/* 2869 */       return clone(array);
/*      */     }
/* 2871 */     if (index < 0 || index > array.length) {
/* 2872 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + array.length);
/*      */     }
/*      */     
/* 2875 */     double[] result = new double[array.length + values.length];
/*      */     
/* 2877 */     System.arraycopy(values, 0, result, index, values.length);
/* 2878 */     if (index > 0) {
/* 2879 */       System.arraycopy(array, 0, result, 0, index);
/*      */     }
/* 2881 */     if (index < array.length) {
/* 2882 */       System.arraycopy(array, index, result, index + values.length, array.length - index);
/*      */     }
/* 2884 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] insert(int index, float[] array, float... values)
/*      */   {
/* 2907 */     if (array == null) {
/* 2908 */       return null;
/*      */     }
/* 2910 */     if (isEmpty(values)) {
/* 2911 */       return clone(array);
/*      */     }
/* 2913 */     if (index < 0 || index > array.length) {
/* 2914 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + array.length);
/*      */     }
/*      */     
/* 2917 */     float[] result = new float[array.length + values.length];
/*      */     
/* 2919 */     System.arraycopy(values, 0, result, index, values.length);
/* 2920 */     if (index > 0) {
/* 2921 */       System.arraycopy(array, 0, result, 0, index);
/*      */     }
/* 2923 */     if (index < array.length) {
/* 2924 */       System.arraycopy(array, index, result, index + values.length, array.length - index);
/*      */     }
/* 2926 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] insert(int index, int[] array, int... values)
/*      */   {
/* 2949 */     if (array == null) {
/* 2950 */       return null;
/*      */     }
/* 2952 */     if (isEmpty(values)) {
/* 2953 */       return clone(array);
/*      */     }
/* 2955 */     if (index < 0 || index > array.length) {
/* 2956 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + array.length);
/*      */     }
/*      */     
/* 2959 */     int[] result = new int[array.length + values.length];
/*      */     
/* 2961 */     System.arraycopy(values, 0, result, index, values.length);
/* 2962 */     if (index > 0) {
/* 2963 */       System.arraycopy(array, 0, result, 0, index);
/*      */     }
/* 2965 */     if (index < array.length) {
/* 2966 */       System.arraycopy(array, index, result, index + values.length, array.length - index);
/*      */     }
/* 2968 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] insert(int index, long[] array, long... values)
/*      */   {
/* 2991 */     if (array == null) {
/* 2992 */       return null;
/*      */     }
/* 2994 */     if (isEmpty(values)) {
/* 2995 */       return clone(array);
/*      */     }
/* 2997 */     if (index < 0 || index > array.length) {
/* 2998 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + array.length);
/*      */     }
/*      */     
/* 3001 */     long[] result = new long[array.length + values.length];
/*      */     
/* 3003 */     System.arraycopy(values, 0, result, index, values.length);
/* 3004 */     if (index > 0) {
/* 3005 */       System.arraycopy(array, 0, result, 0, index);
/*      */     }
/* 3007 */     if (index < array.length) {
/* 3008 */       System.arraycopy(array, index, result, index + values.length, array.length - index);
/*      */     }
/* 3010 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] insert(int index, short[] array, short... values)
/*      */   {
/* 3033 */     if (array == null) {
/* 3034 */       return null;
/*      */     }
/* 3036 */     if (isEmpty(values)) {
/* 3037 */       return clone(array);
/*      */     }
/* 3039 */     if (index < 0 || index > array.length) {
/* 3040 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + array.length);
/*      */     }
/*      */     
/* 3043 */     short[] result = new short[array.length + values.length];
/*      */     
/* 3045 */     System.arraycopy(values, 0, result, index, values.length);
/* 3046 */     if (index > 0) {
/* 3047 */       System.arraycopy(array, 0, result, 0, index);
/*      */     }
/* 3049 */     if (index < array.length) {
/* 3050 */       System.arraycopy(array, index, result, index + values.length, array.length - index);
/*      */     }
/* 3052 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @SafeVarargs
/*      */   public static <T> T[] insert(int index, T[] array, T... values)
/*      */   {
/* 3085 */     if (array == null) {
/* 3086 */       return null;
/*      */     }
/* 3088 */     if (isEmpty(values)) {
/* 3089 */       return clone(array);
/*      */     }
/* 3091 */     if (index < 0 || index > array.length) {
/* 3092 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + array.length);
/*      */     }
/*      */     
/* 3095 */     Class<?> type = array.getClass().getComponentType();
/*      */     
/*      */ 
/* 3098 */     T[] result = (T[])Array.newInstance(type, array.length + values.length);
/*      */     
/* 3100 */     System.arraycopy(values, 0, result, index, values.length);
/* 3101 */     if (index > 0) {
/* 3102 */       System.arraycopy(array, 0, result, 0, index);
/*      */     }
/* 3104 */     if (index < array.length) {
/* 3105 */       System.arraycopy(array, index, result, index + values.length, array.length - index);
/*      */     }
/* 3107 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> boolean isArrayIndexValid(T[] array, int index)
/*      */   {
/* 3126 */     return index >= 0 && getLength(array) > index;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(boolean[] array)
/*      */   {
/* 3137 */     return getLength(array) == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(byte[] array)
/*      */   {
/* 3148 */     return getLength(array) == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(char[] array)
/*      */   {
/* 3162 */     return getLength(array) == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(double[] array)
/*      */   {
/* 3173 */     return getLength(array) == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(float[] array)
/*      */   {
/* 3184 */     return getLength(array) == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(int[] array)
/*      */   {
/* 3195 */     return getLength(array) == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(long[] array)
/*      */   {
/* 3208 */     return getLength(array) == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(Object[] array)
/*      */   {
/* 3220 */     return getLength(array) == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(short[] array)
/*      */   {
/* 3231 */     return getLength(array) == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static boolean isEquals(Object array1, Object array2)
/*      */   {
/* 3248 */     return new EqualsBuilder().append(array1, array2).isEquals();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotEmpty(boolean[] array)
/*      */   {
/* 3259 */     return !isEmpty(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotEmpty(byte[] array)
/*      */   {
/* 3270 */     return !isEmpty(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotEmpty(char[] array)
/*      */   {
/* 3281 */     return !isEmpty(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotEmpty(double[] array)
/*      */   {
/* 3292 */     return !isEmpty(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotEmpty(float[] array)
/*      */   {
/* 3303 */     return !isEmpty(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotEmpty(int[] array)
/*      */   {
/* 3314 */     return !isEmpty(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotEmpty(long[] array)
/*      */   {
/* 3325 */     return !isEmpty(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotEmpty(short[] array)
/*      */   {
/* 3336 */     return !isEmpty(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> boolean isNotEmpty(T[] array)
/*      */   {
/* 3349 */     return !isEmpty(array);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(boolean[] array1, boolean[] array2)
/*      */   {
/* 3362 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(byte[] array1, byte[] array2)
/*      */   {
/* 3375 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(char[] array1, char[] array2)
/*      */   {
/* 3388 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(double[] array1, double[] array2)
/*      */   {
/* 3401 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(float[] array1, float[] array2)
/*      */   {
/* 3414 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(int[] array1, int[] array2)
/*      */   {
/* 3427 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(long[] array1, long[] array2)
/*      */   {
/* 3440 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(Object array1, Object array2)
/*      */   {
/* 3456 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(Object[] array1, Object[] array2)
/*      */   {
/* 3472 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameLength(short[] array1, short[] array2)
/*      */   {
/* 3485 */     return getLength(array1) == getLength(array2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSameType(Object array1, Object array2)
/*      */   {
/* 3498 */     if (array1 == null || array2 == null) {
/* 3499 */       throw new IllegalArgumentException("The Array must not be null");
/*      */     }
/* 3501 */     return array1.getClass().getName().equals(array2.getClass().getName());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSorted(boolean[] array)
/*      */   {
/* 3513 */     if (array == null || array.length < 2) {
/* 3514 */       return true;
/*      */     }
/*      */     
/* 3517 */     boolean previous = array[0];
/* 3518 */     int n = array.length;
/* 3519 */     for (int i = 1; i < n; i++) {
/* 3520 */       boolean current = array[i];
/* 3521 */       if (BooleanUtils.compare(previous, current) > 0) {
/* 3522 */         return false;
/*      */       }
/*      */       
/* 3525 */       previous = current;
/*      */     }
/* 3527 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSorted(byte[] array)
/*      */   {
/* 3538 */     if (array == null || array.length < 2) {
/* 3539 */       return true;
/*      */     }
/*      */     
/* 3542 */     byte previous = array[0];
/* 3543 */     int n = array.length;
/* 3544 */     for (int i = 1; i < n; i++) {
/* 3545 */       byte current = array[i];
/* 3546 */       if (NumberUtils.compare(previous, current) > 0) {
/* 3547 */         return false;
/*      */       }
/*      */       
/* 3550 */       previous = current;
/*      */     }
/* 3552 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSorted(char[] array)
/*      */   {
/* 3563 */     if (array == null || array.length < 2) {
/* 3564 */       return true;
/*      */     }
/*      */     
/* 3567 */     char previous = array[0];
/* 3568 */     int n = array.length;
/* 3569 */     for (int i = 1; i < n; i++) {
/* 3570 */       char current = array[i];
/* 3571 */       if (CharUtils.compare(previous, current) > 0) {
/* 3572 */         return false;
/*      */       }
/*      */       
/* 3575 */       previous = current;
/*      */     }
/* 3577 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSorted(double[] array)
/*      */   {
/* 3588 */     if (array == null || array.length < 2) {
/* 3589 */       return true;
/*      */     }
/*      */     
/* 3592 */     double previous = array[0];
/* 3593 */     int n = array.length;
/* 3594 */     for (int i = 1; i < n; i++) {
/* 3595 */       double current = array[i];
/* 3596 */       if (Double.compare(previous, current) > 0) {
/* 3597 */         return false;
/*      */       }
/*      */       
/* 3600 */       previous = current;
/*      */     }
/* 3602 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSorted(float[] array)
/*      */   {
/* 3613 */     if (array == null || array.length < 2) {
/* 3614 */       return true;
/*      */     }
/*      */     
/* 3617 */     float previous = array[0];
/* 3618 */     int n = array.length;
/* 3619 */     for (int i = 1; i < n; i++) {
/* 3620 */       float current = array[i];
/* 3621 */       if (Float.compare(previous, current) > 0) {
/* 3622 */         return false;
/*      */       }
/*      */       
/* 3625 */       previous = current;
/*      */     }
/* 3627 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSorted(int[] array)
/*      */   {
/* 3638 */     if (array == null || array.length < 2) {
/* 3639 */       return true;
/*      */     }
/*      */     
/* 3642 */     int previous = array[0];
/* 3643 */     int n = array.length;
/* 3644 */     for (int i = 1; i < n; i++) {
/* 3645 */       int current = array[i];
/* 3646 */       if (NumberUtils.compare(previous, current) > 0) {
/* 3647 */         return false;
/*      */       }
/*      */       
/* 3650 */       previous = current;
/*      */     }
/* 3652 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSorted(long[] array)
/*      */   {
/* 3663 */     if (array == null || array.length < 2) {
/* 3664 */       return true;
/*      */     }
/*      */     
/* 3667 */     long previous = array[0];
/* 3668 */     int n = array.length;
/* 3669 */     for (int i = 1; i < n; i++) {
/* 3670 */       long current = array[i];
/* 3671 */       if (NumberUtils.compare(previous, current) > 0) {
/* 3672 */         return false;
/*      */       }
/*      */       
/* 3675 */       previous = current;
/*      */     }
/* 3677 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isSorted(short[] array)
/*      */   {
/* 3688 */     if (array == null || array.length < 2) {
/* 3689 */       return true;
/*      */     }
/*      */     
/* 3692 */     short previous = array[0];
/* 3693 */     int n = array.length;
/* 3694 */     for (int i = 1; i < n; i++) {
/* 3695 */       short current = array[i];
/* 3696 */       if (NumberUtils.compare(previous, current) > 0) {
/* 3697 */         return false;
/*      */       }
/*      */       
/* 3700 */       previous = current;
/*      */     }
/* 3702 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T extends Comparable<? super T>> boolean isSorted(T[] array)
/*      */   {
/* 3715 */     return isSorted(array, Comparable::compareTo);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> boolean isSorted(T[] array, Comparator<T> comparator)
/*      */   {
/* 3728 */     if (comparator == null) {
/* 3729 */       throw new IllegalArgumentException("Comparator should not be null.");
/*      */     }
/*      */     
/* 3732 */     if (array == null || array.length < 2) {
/* 3733 */       return true;
/*      */     }
/*      */     
/* 3736 */     T previous = array[0];
/* 3737 */     int n = array.length;
/* 3738 */     for (int i = 1; i < n; i++) {
/* 3739 */       T current = array[i];
/* 3740 */       if (comparator.compare(previous, current) > 0) {
/* 3741 */         return false;
/*      */       }
/*      */       
/* 3744 */       previous = current;
/*      */     }
/* 3746 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(boolean[] array, boolean valueToFind)
/*      */   {
/* 3761 */     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex)
/*      */   {
/* 3779 */     if (isEmpty(array)) {
/* 3780 */       return -1;
/*      */     }
/* 3782 */     if (startIndex < 0)
/* 3783 */       return -1;
/* 3784 */     if (startIndex >= array.length) {
/* 3785 */       startIndex = array.length - 1;
/*      */     }
/* 3787 */     for (int i = startIndex; i >= 0; i--) {
/* 3788 */       if (valueToFind == array[i]) {
/* 3789 */         return i;
/*      */       }
/*      */     }
/* 3792 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(byte[] array, byte valueToFind)
/*      */   {
/* 3806 */     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex)
/*      */   {
/* 3824 */     if (array == null) {
/* 3825 */       return -1;
/*      */     }
/* 3827 */     if (startIndex < 0)
/* 3828 */       return -1;
/* 3829 */     if (startIndex >= array.length) {
/* 3830 */       startIndex = array.length - 1;
/*      */     }
/* 3832 */     for (int i = startIndex; i >= 0; i--) {
/* 3833 */       if (valueToFind == array[i]) {
/* 3834 */         return i;
/*      */       }
/*      */     }
/* 3837 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(char[] array, char valueToFind)
/*      */   {
/* 3852 */     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(char[] array, char valueToFind, int startIndex)
/*      */   {
/* 3871 */     if (array == null) {
/* 3872 */       return -1;
/*      */     }
/* 3874 */     if (startIndex < 0)
/* 3875 */       return -1;
/* 3876 */     if (startIndex >= array.length) {
/* 3877 */       startIndex = array.length - 1;
/*      */     }
/* 3879 */     for (int i = startIndex; i >= 0; i--) {
/* 3880 */       if (valueToFind == array[i]) {
/* 3881 */         return i;
/*      */       }
/*      */     }
/* 3884 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(double[] array, double valueToFind)
/*      */   {
/* 3898 */     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(double[] array, double valueToFind, double tolerance)
/*      */   {
/* 3915 */     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(double[] array, double valueToFind, int startIndex)
/*      */   {
/* 3933 */     if (isEmpty(array)) {
/* 3934 */       return -1;
/*      */     }
/* 3936 */     if (startIndex < 0)
/* 3937 */       return -1;
/* 3938 */     if (startIndex >= array.length) {
/* 3939 */       startIndex = array.length - 1;
/*      */     }
/* 3941 */     for (int i = startIndex; i >= 0; i--) {
/* 3942 */       if (valueToFind == array[i]) {
/* 3943 */         return i;
/*      */       }
/*      */     }
/* 3946 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance)
/*      */   {
/* 3967 */     if (isEmpty(array)) {
/* 3968 */       return -1;
/*      */     }
/* 3970 */     if (startIndex < 0)
/* 3971 */       return -1;
/* 3972 */     if (startIndex >= array.length) {
/* 3973 */       startIndex = array.length - 1;
/*      */     }
/* 3975 */     double min = valueToFind - tolerance;
/* 3976 */     double max = valueToFind + tolerance;
/* 3977 */     for (int i = startIndex; i >= 0; i--) {
/* 3978 */       if (array[i] >= min && array[i] <= max) {
/* 3979 */         return i;
/*      */       }
/*      */     }
/* 3982 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(float[] array, float valueToFind)
/*      */   {
/* 3996 */     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(float[] array, float valueToFind, int startIndex)
/*      */   {
/* 4015 */     if (isEmpty(array)) {
/* 4016 */       return -1;
/*      */     }
/* 4018 */     if (startIndex < 0)
/* 4019 */       return -1;
/* 4020 */     if (startIndex >= array.length) {
/* 4021 */       startIndex = array.length - 1;
/*      */     }
/* 4023 */     for (int i = startIndex; i >= 0; i--) {
/* 4024 */       if (valueToFind == array[i]) {
/* 4025 */         return i;
/*      */       }
/*      */     }
/* 4028 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(int[] array, int valueToFind)
/*      */   {
/* 4042 */     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(int[] array, int valueToFind, int startIndex)
/*      */   {
/* 4060 */     if (array == null) {
/* 4061 */       return -1;
/*      */     }
/* 4063 */     if (startIndex < 0)
/* 4064 */       return -1;
/* 4065 */     if (startIndex >= array.length) {
/* 4066 */       startIndex = array.length - 1;
/*      */     }
/* 4068 */     for (int i = startIndex; i >= 0; i--) {
/* 4069 */       if (valueToFind == array[i]) {
/* 4070 */         return i;
/*      */       }
/*      */     }
/* 4073 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(long[] array, long valueToFind)
/*      */   {
/* 4087 */     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(long[] array, long valueToFind, int startIndex)
/*      */   {
/* 4105 */     if (array == null) {
/* 4106 */       return -1;
/*      */     }
/* 4108 */     if (startIndex < 0)
/* 4109 */       return -1;
/* 4110 */     if (startIndex >= array.length) {
/* 4111 */       startIndex = array.length - 1;
/*      */     }
/* 4113 */     for (int i = startIndex; i >= 0; i--) {
/* 4114 */       if (valueToFind == array[i]) {
/* 4115 */         return i;
/*      */       }
/*      */     }
/* 4118 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(Object[] array, Object objectToFind)
/*      */   {
/* 4132 */     return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex)
/*      */   {
/* 4150 */     if (array == null) {
/* 4151 */       return -1;
/*      */     }
/* 4153 */     if (startIndex < 0)
/* 4154 */       return -1;
/* 4155 */     if (startIndex >= array.length) {
/* 4156 */       startIndex = array.length - 1;
/*      */     }
/* 4158 */     if (objectToFind == null) {
/* 4159 */       for (int i = startIndex; i >= 0; i--) {
/* 4160 */         if (array[i] == null) {
/* 4161 */           return i;
/*      */         }
/*      */       }
/* 4164 */     } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
/* 4165 */       for (int i = startIndex; i >= 0; i--) {
/* 4166 */         if (objectToFind.equals(array[i])) {
/* 4167 */           return i;
/*      */         }
/*      */       }
/*      */     }
/* 4171 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(short[] array, short valueToFind)
/*      */   {
/* 4185 */     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(short[] array, short valueToFind, int startIndex)
/*      */   {
/* 4203 */     if (array == null) {
/* 4204 */       return -1;
/*      */     }
/* 4206 */     if (startIndex < 0)
/* 4207 */       return -1;
/* 4208 */     if (startIndex >= array.length) {
/* 4209 */       startIndex = array.length - 1;
/*      */     }
/* 4211 */     for (int i = startIndex; i >= 0; i--) {
/* 4212 */       if (valueToFind == array[i]) {
/* 4213 */         return i;
/*      */       }
/*      */     }
/* 4216 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] nullToEmpty(boolean[] array)
/*      */   {
/* 4233 */     if (isEmpty(array)) {
/* 4234 */       return EMPTY_BOOLEAN_ARRAY;
/*      */     }
/* 4236 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Boolean[] nullToEmpty(Boolean[] array)
/*      */   {
/* 4253 */     if (isEmpty(array)) {
/* 4254 */       return EMPTY_BOOLEAN_OBJECT_ARRAY;
/*      */     }
/* 4256 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] nullToEmpty(byte[] array)
/*      */   {
/* 4273 */     if (isEmpty(array)) {
/* 4274 */       return EMPTY_BYTE_ARRAY;
/*      */     }
/* 4276 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Byte[] nullToEmpty(Byte[] array)
/*      */   {
/* 4293 */     if (isEmpty(array)) {
/* 4294 */       return EMPTY_BYTE_OBJECT_ARRAY;
/*      */     }
/* 4296 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] nullToEmpty(char[] array)
/*      */   {
/* 4313 */     if (isEmpty(array)) {
/* 4314 */       return EMPTY_CHAR_ARRAY;
/*      */     }
/* 4316 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Character[] nullToEmpty(Character[] array)
/*      */   {
/* 4333 */     if (isEmpty(array)) {
/* 4334 */       return EMPTY_CHARACTER_OBJECT_ARRAY;
/*      */     }
/* 4336 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Class<?>[] nullToEmpty(Class<?>[] array)
/*      */   {
/* 4353 */     if (isEmpty(array)) {
/* 4354 */       return EMPTY_CLASS_ARRAY;
/*      */     }
/* 4356 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] nullToEmpty(double[] array)
/*      */   {
/* 4373 */     if (isEmpty(array)) {
/* 4374 */       return EMPTY_DOUBLE_ARRAY;
/*      */     }
/* 4376 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Double[] nullToEmpty(Double[] array)
/*      */   {
/* 4393 */     if (isEmpty(array)) {
/* 4394 */       return EMPTY_DOUBLE_OBJECT_ARRAY;
/*      */     }
/* 4396 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] nullToEmpty(float[] array)
/*      */   {
/* 4413 */     if (isEmpty(array)) {
/* 4414 */       return EMPTY_FLOAT_ARRAY;
/*      */     }
/* 4416 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Float[] nullToEmpty(Float[] array)
/*      */   {
/* 4433 */     if (isEmpty(array)) {
/* 4434 */       return EMPTY_FLOAT_OBJECT_ARRAY;
/*      */     }
/* 4436 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] nullToEmpty(int[] array)
/*      */   {
/* 4453 */     if (isEmpty(array)) {
/* 4454 */       return EMPTY_INT_ARRAY;
/*      */     }
/* 4456 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Integer[] nullToEmpty(Integer[] array)
/*      */   {
/* 4473 */     if (isEmpty(array)) {
/* 4474 */       return EMPTY_INTEGER_OBJECT_ARRAY;
/*      */     }
/* 4476 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] nullToEmpty(long[] array)
/*      */   {
/* 4496 */     if (isEmpty(array)) {
/* 4497 */       return EMPTY_LONG_ARRAY;
/*      */     }
/* 4499 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Long[] nullToEmpty(Long[] array)
/*      */   {
/* 4516 */     if (isEmpty(array)) {
/* 4517 */       return EMPTY_LONG_OBJECT_ARRAY;
/*      */     }
/* 4519 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Object[] nullToEmpty(Object[] array)
/*      */   {
/* 4536 */     if (isEmpty(array)) {
/* 4537 */       return EMPTY_OBJECT_ARRAY;
/*      */     }
/* 4539 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] nullToEmpty(short[] array)
/*      */   {
/* 4556 */     if (isEmpty(array)) {
/* 4557 */       return EMPTY_SHORT_ARRAY;
/*      */     }
/* 4559 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Short[] nullToEmpty(Short[] array)
/*      */   {
/* 4576 */     if (isEmpty(array)) {
/* 4577 */       return EMPTY_SHORT_OBJECT_ARRAY;
/*      */     }
/* 4579 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] nullToEmpty(String[] array)
/*      */   {
/* 4596 */     if (isEmpty(array)) {
/* 4597 */       return EMPTY_STRING_ARRAY;
/*      */     }
/* 4599 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] nullToEmpty(T[] array, Class<T[]> type)
/*      */   {
/* 4618 */     if (type == null) {
/* 4619 */       throw new IllegalArgumentException("The type must not be null");
/*      */     }
/*      */     
/* 4622 */     if (array == null) {
/* 4623 */       return (T[])type.cast(Array.newInstance(type.getComponentType(), 0));
/*      */     }
/* 4625 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] remove(boolean[] array, int index)
/*      */   {
/* 4657 */     return (boolean[])remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] remove(byte[] array, int index)
/*      */   {
/* 4689 */     return (byte[])remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] remove(char[] array, int index)
/*      */   {
/* 4721 */     return (char[])remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] remove(double[] array, int index)
/*      */   {
/* 4753 */     return (double[])remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] remove(float[] array, int index)
/*      */   {
/* 4785 */     return (float[])remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] remove(int[] array, int index)
/*      */   {
/* 4817 */     return (int[])remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] remove(long[] array, int index)
/*      */   {
/* 4849 */     return (long[])remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static Object remove(Object array, int index)
/*      */   {
/* 4874 */     int length = getLength(array);
/* 4875 */     if (index < 0 || index >= length) {
/* 4876 */       throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);
/*      */     }
/*      */     
/* 4879 */     Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);
/* 4880 */     System.arraycopy(array, 0, result, 0, index);
/* 4881 */     if (index < length - 1) {
/* 4882 */       System.arraycopy(array, index + 1, result, index, length - index - 1);
/*      */     }
/*      */     
/* 4885 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] remove(short[] array, int index)
/*      */   {
/* 4917 */     return (short[])remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] remove(T[] array, int index)
/*      */   {
/* 4951 */     return (T[])remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] removeAll(boolean[] array, int... indices)
/*      */   {
/* 4980 */     return (boolean[])removeAll(array, indices);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] removeAll(byte[] array, int... indices)
/*      */   {
/* 5013 */     return (byte[])removeAll(array, indices);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] removeAll(char[] array, int... indices)
/*      */   {
/* 5046 */     return (char[])removeAll(array, indices);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] removeAll(double[] array, int... indices)
/*      */   {
/* 5079 */     return (double[])removeAll(array, indices);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] removeAll(float[] array, int... indices)
/*      */   {
/* 5112 */     return (float[])removeAll(array, indices);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] removeAll(int[] array, int... indices)
/*      */   {
/* 5145 */     return (int[])removeAll(array, indices);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] removeAll(long[] array, int... indices)
/*      */   {
/* 5178 */     return (long[])removeAll(array, indices);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   static Object removeAll(Object array, BitSet indices)
/*      */   {
/* 5191 */     if (array == null) {
/* 5192 */       return null;
/*      */     }
/*      */     
/* 5195 */     int srcLength = getLength(array);
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 5202 */     int removals = indices.cardinality();
/* 5203 */     Object result = Array.newInstance(array.getClass().getComponentType(), srcLength - removals);
/* 5204 */     int srcIndex = 0;
/* 5205 */     int destIndex = 0;
/*      */     
/*      */     int set;
/* 5208 */     while ((set = indices.nextSetBit(srcIndex)) != -1) {
/* 5209 */       int count = set - srcIndex;
/* 5210 */       if (count > 0) {
/* 5211 */         System.arraycopy(array, srcIndex, result, destIndex, count);
/* 5212 */         destIndex += count;
/*      */       }
/* 5214 */       srcIndex = indices.nextClearBit(set);
/*      */     }
/* 5216 */     int count = srcLength - srcIndex;
/* 5217 */     if (count > 0) {
/* 5218 */       System.arraycopy(array, srcIndex, result, destIndex, count);
/*      */     }
/* 5220 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   static Object removeAll(Object array, int... indices)
/*      */   {
/* 5232 */     int length = getLength(array);
/* 5233 */     int diff = 0;
/* 5234 */     int[] clonedIndices = ArraySorter.sort(clone(indices));
/*      */     
/*      */ 
/* 5237 */     if (isNotEmpty(clonedIndices)) {
/* 5238 */       int i = clonedIndices.length;
/* 5239 */       int prevIndex = length;
/* 5240 */       for (;;) { i--; if (i < 0) break;
/* 5241 */         int index = clonedIndices[i];
/* 5242 */         if (index < 0 || index >= length) {
/* 5243 */           throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);
/*      */         }
/* 5245 */         if (index >= prevIndex) {
/*      */           continue;
/*      */         }
/* 5248 */         diff++;
/* 5249 */         prevIndex = index;
/*      */       }
/*      */     }
/*      */     
/*      */ 
/* 5254 */     Object result = Array.newInstance(array.getClass().getComponentType(), length - diff);
/* 5255 */     if (diff < length) {
/* 5256 */       int end = length;
/* 5257 */       int dest = length - diff;
/* 5258 */       for (int i = clonedIndices.length - 1; i >= 0; i--) {
/* 5259 */         int index = clonedIndices[i];
/* 5260 */         if (end - index > 1) {
/* 5261 */           int cp = end - index - 1;
/* 5262 */           dest -= cp;
/* 5263 */           System.arraycopy(array, index + 1, result, dest, cp);
/*      */         }
/*      */         
/* 5266 */         end = index;
/*      */       }
/* 5268 */       if (end > 0) {
/* 5269 */         System.arraycopy(array, 0, result, 0, end);
/*      */       }
/*      */     }
/* 5272 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] removeAll(short[] array, int... indices)
/*      */   {
/* 5305 */     return (short[])removeAll(array, indices);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] removeAll(T[] array, int... indices)
/*      */   {
/* 5336 */     return (T[])removeAll(array, indices);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static boolean[] removeAllOccurences(boolean[] array, boolean element)
/*      */   {
/* 5357 */     return (boolean[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static byte[] removeAllOccurences(byte[] array, byte element)
/*      */   {
/* 5378 */     return (byte[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static char[] removeAllOccurences(char[] array, char element)
/*      */   {
/* 5399 */     return (char[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static double[] removeAllOccurences(double[] array, double element)
/*      */   {
/* 5420 */     return (double[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static float[] removeAllOccurences(float[] array, float element)
/*      */   {
/* 5441 */     return (float[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static int[] removeAllOccurences(int[] array, int element)
/*      */   {
/* 5462 */     return (int[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static long[] removeAllOccurences(long[] array, long element)
/*      */   {
/* 5483 */     return (long[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static short[] removeAllOccurences(short[] array, short element)
/*      */   {
/* 5504 */     return (short[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static <T> T[] removeAllOccurences(T[] array, T element)
/*      */   {
/* 5526 */     return (T[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] removeAllOccurrences(boolean[] array, boolean element)
/*      */   {
/* 5545 */     return (boolean[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] removeAllOccurrences(byte[] array, byte element)
/*      */   {
/* 5564 */     return (byte[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] removeAllOccurrences(char[] array, char element)
/*      */   {
/* 5583 */     return (char[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] removeAllOccurrences(double[] array, double element)
/*      */   {
/* 5602 */     return (double[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] removeAllOccurrences(float[] array, float element)
/*      */   {
/* 5621 */     return (float[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] removeAllOccurrences(int[] array, int element)
/*      */   {
/* 5640 */     return (int[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] removeAllOccurrences(long[] array, long element)
/*      */   {
/* 5659 */     return (long[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] removeAllOccurrences(short[] array, short element)
/*      */   {
/* 5678 */     return (short[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] removeAllOccurrences(T[] array, T element)
/*      */   {
/* 5698 */     return (T[])removeAll(array, indexesOf(array, element));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] removeElement(boolean[] array, boolean element)
/*      */   {
/* 5727 */     int index = indexOf(array, element);
/* 5728 */     if (index == -1) {
/* 5729 */       return clone(array);
/*      */     }
/* 5731 */     return remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] removeElement(byte[] array, byte element)
/*      */   {
/* 5760 */     int index = indexOf(array, element);
/* 5761 */     if (index == -1) {
/* 5762 */       return clone(array);
/*      */     }
/* 5764 */     return remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] removeElement(char[] array, char element)
/*      */   {
/* 5793 */     int index = indexOf(array, element);
/* 5794 */     if (index == -1) {
/* 5795 */       return clone(array);
/*      */     }
/* 5797 */     return remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] removeElement(double[] array, double element)
/*      */   {
/* 5826 */     int index = indexOf(array, element);
/* 5827 */     if (index == -1) {
/* 5828 */       return clone(array);
/*      */     }
/* 5830 */     return remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] removeElement(float[] array, float element)
/*      */   {
/* 5859 */     int index = indexOf(array, element);
/* 5860 */     if (index == -1) {
/* 5861 */       return clone(array);
/*      */     }
/* 5863 */     return remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] removeElement(int[] array, int element)
/*      */   {
/* 5892 */     int index = indexOf(array, element);
/* 5893 */     if (index == -1) {
/* 5894 */       return clone(array);
/*      */     }
/* 5896 */     return remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] removeElement(long[] array, long element)
/*      */   {
/* 5925 */     int index = indexOf(array, element);
/* 5926 */     if (index == -1) {
/* 5927 */       return clone(array);
/*      */     }
/* 5929 */     return remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] removeElement(short[] array, short element)
/*      */   {
/* 5958 */     int index = indexOf(array, element);
/* 5959 */     if (index == -1) {
/* 5960 */       return clone(array);
/*      */     }
/* 5962 */     return remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] removeElement(T[] array, Object element)
/*      */   {
/* 5992 */     int index = indexOf(array, element);
/* 5993 */     if (index == -1) {
/* 5994 */       return clone(array);
/*      */     }
/* 5996 */     return remove(array, index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] removeElements(boolean[] array, boolean... values)
/*      */   {
/* 6027 */     if (isEmpty(array) || isEmpty(values)) {
/* 6028 */       return clone(array);
/*      */     }
/* 6030 */     HashMap<Boolean, MutableInt> occurrences = new HashMap<>(2);
/* 6031 */     for (boolean v : values) {
/* 6032 */       Boolean boxed = Boolean.valueOf(v);
/* 6033 */       MutableInt count = (MutableInt)occurrences.get(boxed);
/* 6034 */       if (count == null) {
/* 6035 */         occurrences.put(boxed, new MutableInt(1));
/*      */       } else {
/* 6037 */         count.increment();
/*      */       }
/*      */     }
/* 6040 */     BitSet toRemove = new BitSet();
/* 6041 */     for (int i = 0; i < array.length; i++) {
/* 6042 */       boolean key = array[i];
/* 6043 */       MutableInt count = (MutableInt)occurrences.get(Boolean.valueOf(key));
/* 6044 */       if (count != null) {
/* 6045 */         if (count.decrementAndGet() == 0) {
/* 6046 */           occurrences.remove(Boolean.valueOf(key));
/*      */         }
/* 6048 */         toRemove.set(i);
/*      */       }
/*      */     }
/* 6051 */     return (boolean[])removeAll(array, toRemove);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] removeElements(byte[] array, byte... values)
/*      */   {
/* 6082 */     if (isEmpty(array) || isEmpty(values)) {
/* 6083 */       return clone(array);
/*      */     }
/* 6085 */     Map<Byte, MutableInt> occurrences = new HashMap<>(values.length);
/* 6086 */     for (byte v : values) {
/* 6087 */       Byte boxed = Byte.valueOf(v);
/* 6088 */       MutableInt count = (MutableInt)occurrences.get(boxed);
/* 6089 */       if (count == null) {
/* 6090 */         occurrences.put(boxed, new MutableInt(1));
/*      */       } else {
/* 6092 */         count.increment();
/*      */       }
/*      */     }
/* 6095 */     BitSet toRemove = new BitSet();
/* 6096 */     for (int i = 0; i < array.length; i++) {
/* 6097 */       byte key = array[i];
/* 6098 */       MutableInt count = (MutableInt)occurrences.get(Byte.valueOf(key));
/* 6099 */       if (count != null) {
/* 6100 */         if (count.decrementAndGet() == 0) {
/* 6101 */           occurrences.remove(Byte.valueOf(key));
/*      */         }
/* 6103 */         toRemove.set(i);
/*      */       }
/*      */     }
/* 6106 */     return (byte[])removeAll(array, toRemove);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] removeElements(char[] array, char... values)
/*      */   {
/* 6137 */     if (isEmpty(array) || isEmpty(values)) {
/* 6138 */       return clone(array);
/*      */     }
/* 6140 */     HashMap<Character, MutableInt> occurrences = new HashMap<>(values.length);
/* 6141 */     for (char v : values) {
/* 6142 */       Character boxed = Character.valueOf(v);
/* 6143 */       MutableInt count = (MutableInt)occurrences.get(boxed);
/* 6144 */       if (count == null) {
/* 6145 */         occurrences.put(boxed, new MutableInt(1));
/*      */       } else {
/* 6147 */         count.increment();
/*      */       }
/*      */     }
/* 6150 */     BitSet toRemove = new BitSet();
/* 6151 */     for (int i = 0; i < array.length; i++) {
/* 6152 */       char key = array[i];
/* 6153 */       MutableInt count = (MutableInt)occurrences.get(Character.valueOf(key));
/* 6154 */       if (count != null) {
/* 6155 */         if (count.decrementAndGet() == 0) {
/* 6156 */           occurrences.remove(Character.valueOf(key));
/*      */         }
/* 6158 */         toRemove.set(i);
/*      */       }
/*      */     }
/* 6161 */     return (char[])removeAll(array, toRemove);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] removeElements(double[] array, double... values)
/*      */   {
/* 6192 */     if (isEmpty(array) || isEmpty(values)) {
/* 6193 */       return clone(array);
/*      */     }
/* 6195 */     HashMap<Double, MutableInt> occurrences = new HashMap<>(values.length);
/* 6196 */     for (double v : values) {
/* 6197 */       Double boxed = Double.valueOf(v);
/* 6198 */       MutableInt count = (MutableInt)occurrences.get(boxed);
/* 6199 */       if (count == null) {
/* 6200 */         occurrences.put(boxed, new MutableInt(1));
/*      */       } else {
/* 6202 */         count.increment();
/*      */       }
/*      */     }
/* 6205 */     BitSet toRemove = new BitSet();
/* 6206 */     for (int i = 0; i < array.length; i++) {
/* 6207 */       double key = array[i];
/* 6208 */       MutableInt count = (MutableInt)occurrences.get(Double.valueOf(key));
/* 6209 */       if (count != null) {
/* 6210 */         if (count.decrementAndGet() == 0) {
/* 6211 */           occurrences.remove(Double.valueOf(key));
/*      */         }
/* 6213 */         toRemove.set(i);
/*      */       }
/*      */     }
/* 6216 */     return (double[])removeAll(array, toRemove);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] removeElements(float[] array, float... values)
/*      */   {
/* 6247 */     if (isEmpty(array) || isEmpty(values)) {
/* 6248 */       return clone(array);
/*      */     }
/* 6250 */     HashMap<Float, MutableInt> occurrences = new HashMap<>(values.length);
/* 6251 */     for (float v : values) {
/* 6252 */       Float boxed = Float.valueOf(v);
/* 6253 */       MutableInt count = (MutableInt)occurrences.get(boxed);
/* 6254 */       if (count == null) {
/* 6255 */         occurrences.put(boxed, new MutableInt(1));
/*      */       } else {
/* 6257 */         count.increment();
/*      */       }
/*      */     }
/* 6260 */     BitSet toRemove = new BitSet();
/* 6261 */     for (int i = 0; i < array.length; i++) {
/* 6262 */       float key = array[i];
/* 6263 */       MutableInt count = (MutableInt)occurrences.get(Float.valueOf(key));
/* 6264 */       if (count != null) {
/* 6265 */         if (count.decrementAndGet() == 0) {
/* 6266 */           occurrences.remove(Float.valueOf(key));
/*      */         }
/* 6268 */         toRemove.set(i);
/*      */       }
/*      */     }
/* 6271 */     return (float[])removeAll(array, toRemove);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] removeElements(int[] array, int... values)
/*      */   {
/* 6302 */     if (isEmpty(array) || isEmpty(values)) {
/* 6303 */       return clone(array);
/*      */     }
/* 6305 */     HashMap<Integer, MutableInt> occurrences = new HashMap<>(values.length);
/* 6306 */     for (int v : values) {
/* 6307 */       Integer boxed = Integer.valueOf(v);
/* 6308 */       MutableInt count = (MutableInt)occurrences.get(boxed);
/* 6309 */       if (count == null) {
/* 6310 */         occurrences.put(boxed, new MutableInt(1));
/*      */       } else {
/* 6312 */         count.increment();
/*      */       }
/*      */     }
/* 6315 */     BitSet toRemove = new BitSet();
/* 6316 */     for (int i = 0; i < array.length; i++) {
/* 6317 */       int key = array[i];
/* 6318 */       MutableInt count = (MutableInt)occurrences.get(Integer.valueOf(key));
/* 6319 */       if (count != null) {
/* 6320 */         if (count.decrementAndGet() == 0) {
/* 6321 */           occurrences.remove(Integer.valueOf(key));
/*      */         }
/* 6323 */         toRemove.set(i);
/*      */       }
/*      */     }
/* 6326 */     return (int[])removeAll(array, toRemove);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] removeElements(long[] array, long... values)
/*      */   {
/* 6357 */     if (isEmpty(array) || isEmpty(values)) {
/* 6358 */       return clone(array);
/*      */     }
/* 6360 */     HashMap<Long, MutableInt> occurrences = new HashMap<>(values.length);
/* 6361 */     for (long v : values) {
/* 6362 */       Long boxed = Long.valueOf(v);
/* 6363 */       MutableInt count = (MutableInt)occurrences.get(boxed);
/* 6364 */       if (count == null) {
/* 6365 */         occurrences.put(boxed, new MutableInt(1));
/*      */       } else {
/* 6367 */         count.increment();
/*      */       }
/*      */     }
/* 6370 */     BitSet toRemove = new BitSet();
/* 6371 */     for (int i = 0; i < array.length; i++) {
/* 6372 */       long key = array[i];
/* 6373 */       MutableInt count = (MutableInt)occurrences.get(Long.valueOf(key));
/* 6374 */       if (count != null) {
/* 6375 */         if (count.decrementAndGet() == 0) {
/* 6376 */           occurrences.remove(Long.valueOf(key));
/*      */         }
/* 6378 */         toRemove.set(i);
/*      */       }
/*      */     }
/* 6381 */     return (long[])removeAll(array, toRemove);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] removeElements(short[] array, short... values)
/*      */   {
/* 6412 */     if (isEmpty(array) || isEmpty(values)) {
/* 6413 */       return clone(array);
/*      */     }
/* 6415 */     HashMap<Short, MutableInt> occurrences = new HashMap<>(values.length);
/* 6416 */     for (short v : values) {
/* 6417 */       Short boxed = Short.valueOf(v);
/* 6418 */       MutableInt count = (MutableInt)occurrences.get(boxed);
/* 6419 */       if (count == null) {
/* 6420 */         occurrences.put(boxed, new MutableInt(1));
/*      */       } else {
/* 6422 */         count.increment();
/*      */       }
/*      */     }
/* 6425 */     BitSet toRemove = new BitSet();
/* 6426 */     for (int i = 0; i < array.length; i++) {
/* 6427 */       short key = array[i];
/* 6428 */       MutableInt count = (MutableInt)occurrences.get(Short.valueOf(key));
/* 6429 */       if (count != null) {
/* 6430 */         if (count.decrementAndGet() == 0) {
/* 6431 */           occurrences.remove(Short.valueOf(key));
/*      */         }
/* 6433 */         toRemove.set(i);
/*      */       }
/*      */     }
/* 6436 */     return (short[])removeAll(array, toRemove);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @SafeVarargs
/*      */   public static <T> T[] removeElements(T[] array, T... values)
/*      */   {
/* 6469 */     if (isEmpty(array) || isEmpty(values)) {
/* 6470 */       return clone(array);
/*      */     }
/* 6472 */     HashMap<T, MutableInt> occurrences = new HashMap<>(values.length);
/* 6473 */     for (T v : values) {
/* 6474 */       MutableInt count = (MutableInt)occurrences.get(v);
/* 6475 */       if (count == null) {
/* 6476 */         occurrences.put(v, new MutableInt(1));
/*      */       } else {
/* 6478 */         count.increment();
/*      */       }
/*      */     }
/* 6481 */     BitSet toRemove = new BitSet();
/* 6482 */     for (int i = 0; i < array.length; i++) {
/* 6483 */       T key = array[i];
/* 6484 */       MutableInt count = (MutableInt)occurrences.get(key);
/* 6485 */       if (count != null) {
/* 6486 */         if (count.decrementAndGet() == 0) {
/* 6487 */           occurrences.remove(key);
/*      */         }
/* 6489 */         toRemove.set(i);
/*      */       }
/*      */     }
/*      */     
/* 6493 */     T[] result = (T[])removeAll(array, toRemove);
/* 6494 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(boolean[] array)
/*      */   {
/* 6505 */     if (array == null) {
/* 6506 */       return;
/*      */     }
/* 6508 */     reverse(array, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(boolean[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 6529 */     if (array == null) {
/* 6530 */       return;
/*      */     }
/* 6532 */     int i = Math.max(startIndexInclusive, 0);
/* 6533 */     int j = Math.min(array.length, endIndexExclusive) - 1;
/*      */     
/* 6535 */     while (j > i) {
/* 6536 */       boolean tmp = array[j];
/* 6537 */       array[j] = array[i];
/* 6538 */       array[i] = tmp;
/* 6539 */       j--;
/* 6540 */       i++;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(byte[] array)
/*      */   {
/* 6552 */     if (array == null) {
/* 6553 */       return;
/*      */     }
/* 6555 */     reverse(array, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(byte[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 6576 */     if (array == null) {
/* 6577 */       return;
/*      */     }
/* 6579 */     int i = Math.max(startIndexInclusive, 0);
/* 6580 */     int j = Math.min(array.length, endIndexExclusive) - 1;
/*      */     
/* 6582 */     while (j > i) {
/* 6583 */       byte tmp = array[j];
/* 6584 */       array[j] = array[i];
/* 6585 */       array[i] = tmp;
/* 6586 */       j--;
/* 6587 */       i++;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(char[] array)
/*      */   {
/* 6599 */     if (array == null) {
/* 6600 */       return;
/*      */     }
/* 6602 */     reverse(array, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(char[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 6623 */     if (array == null) {
/* 6624 */       return;
/*      */     }
/* 6626 */     int i = Math.max(startIndexInclusive, 0);
/* 6627 */     int j = Math.min(array.length, endIndexExclusive) - 1;
/*      */     
/* 6629 */     while (j > i) {
/* 6630 */       char tmp = array[j];
/* 6631 */       array[j] = array[i];
/* 6632 */       array[i] = tmp;
/* 6633 */       j--;
/* 6634 */       i++;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(double[] array)
/*      */   {
/* 6646 */     if (array == null) {
/* 6647 */       return;
/*      */     }
/* 6649 */     reverse(array, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(double[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 6670 */     if (array == null) {
/* 6671 */       return;
/*      */     }
/* 6673 */     int i = Math.max(startIndexInclusive, 0);
/* 6674 */     int j = Math.min(array.length, endIndexExclusive) - 1;
/*      */     
/* 6676 */     while (j > i) {
/* 6677 */       double tmp = array[j];
/* 6678 */       array[j] = array[i];
/* 6679 */       array[i] = tmp;
/* 6680 */       j--;
/* 6681 */       i++;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(float[] array)
/*      */   {
/* 6693 */     if (array == null) {
/* 6694 */       return;
/*      */     }
/* 6696 */     reverse(array, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(float[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 6717 */     if (array == null) {
/* 6718 */       return;
/*      */     }
/* 6720 */     int i = Math.max(startIndexInclusive, 0);
/* 6721 */     int j = Math.min(array.length, endIndexExclusive) - 1;
/*      */     
/* 6723 */     while (j > i) {
/* 6724 */       float tmp = array[j];
/* 6725 */       array[j] = array[i];
/* 6726 */       array[i] = tmp;
/* 6727 */       j--;
/* 6728 */       i++;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(int[] array)
/*      */   {
/* 6740 */     if (array == null) {
/* 6741 */       return;
/*      */     }
/* 6743 */     reverse(array, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(int[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 6764 */     if (array == null) {
/* 6765 */       return;
/*      */     }
/* 6767 */     int i = Math.max(startIndexInclusive, 0);
/* 6768 */     int j = Math.min(array.length, endIndexExclusive) - 1;
/*      */     
/* 6770 */     while (j > i) {
/* 6771 */       int tmp = array[j];
/* 6772 */       array[j] = array[i];
/* 6773 */       array[i] = tmp;
/* 6774 */       j--;
/* 6775 */       i++;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(long[] array)
/*      */   {
/* 6787 */     if (array == null) {
/* 6788 */       return;
/*      */     }
/* 6790 */     reverse(array, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(long[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 6811 */     if (array == null) {
/* 6812 */       return;
/*      */     }
/* 6814 */     int i = Math.max(startIndexInclusive, 0);
/* 6815 */     int j = Math.min(array.length, endIndexExclusive) - 1;
/*      */     
/* 6817 */     while (j > i) {
/* 6818 */       long tmp = array[j];
/* 6819 */       array[j] = array[i];
/* 6820 */       array[i] = tmp;
/* 6821 */       j--;
/* 6822 */       i++;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(Object[] array)
/*      */   {
/* 6836 */     if (array == null) {
/* 6837 */       return;
/*      */     }
/* 6839 */     reverse(array, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(Object[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 6860 */     if (array == null) {
/* 6861 */       return;
/*      */     }
/* 6863 */     int i = Math.max(startIndexInclusive, 0);
/* 6864 */     int j = Math.min(array.length, endIndexExclusive) - 1;
/*      */     
/* 6866 */     while (j > i) {
/* 6867 */       Object tmp = array[j];
/* 6868 */       array[j] = array[i];
/* 6869 */       array[i] = tmp;
/* 6870 */       j--;
/* 6871 */       i++;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(short[] array)
/*      */   {
/* 6883 */     if (array == null) {
/* 6884 */       return;
/*      */     }
/* 6886 */     reverse(array, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void reverse(short[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 6907 */     if (array == null) {
/* 6908 */       return;
/*      */     }
/* 6910 */     int i = Math.max(startIndexInclusive, 0);
/* 6911 */     int j = Math.min(array.length, endIndexExclusive) - 1;
/*      */     
/* 6913 */     while (j > i) {
/* 6914 */       short tmp = array[j];
/* 6915 */       array[j] = array[i];
/* 6916 */       array[i] = tmp;
/* 6917 */       j--;
/* 6918 */       i++;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(boolean[] array, int offset)
/*      */   {
/* 6935 */     if (array == null) {
/* 6936 */       return;
/*      */     }
/* 6938 */     shift(array, 0, array.length, offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(boolean[] array, int startIndexInclusive, int endIndexExclusive, int offset)
/*      */   {
/* 6961 */     if (array == null) {
/* 6962 */       return;
/*      */     }
/* 6964 */     if (startIndexInclusive >= array.length - 1 || endIndexExclusive <= 0) {
/* 6965 */       return;
/*      */     }
/* 6967 */     if (startIndexInclusive < 0) {
/* 6968 */       startIndexInclusive = 0;
/*      */     }
/* 6970 */     if (endIndexExclusive >= array.length) {
/* 6971 */       endIndexExclusive = array.length;
/*      */     }
/* 6973 */     int n = endIndexExclusive - startIndexInclusive;
/* 6974 */     if (n <= 1) {
/* 6975 */       return;
/*      */     }
/* 6977 */     offset %= n;
/* 6978 */     if (offset < 0) {
/* 6979 */       offset += n;
/*      */     }
/*      */     
/*      */ 
/* 6983 */     while (n > 1 && offset > 0) {
/* 6984 */       int n_offset = n - offset;
/*      */       
/* 6986 */       if (offset > n_offset) {
/* 6987 */         swap(array, startIndexInclusive, startIndexInclusive + n - n_offset, n_offset);
/* 6988 */         n = offset;
/* 6989 */         offset -= n_offset;
/* 6990 */       } else if (offset < n_offset) {
/* 6991 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 6992 */         startIndexInclusive += offset;
/* 6993 */         n = n_offset;
/*      */       } else {
/* 6995 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 6996 */         return;
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(byte[] array, int offset)
/*      */   {
/* 7014 */     if (array == null) {
/* 7015 */       return;
/*      */     }
/* 7017 */     shift(array, 0, array.length, offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(byte[] array, int startIndexInclusive, int endIndexExclusive, int offset)
/*      */   {
/* 7040 */     if (array == null) {
/* 7041 */       return;
/*      */     }
/* 7043 */     if (startIndexInclusive >= array.length - 1 || endIndexExclusive <= 0) {
/* 7044 */       return;
/*      */     }
/* 7046 */     if (startIndexInclusive < 0) {
/* 7047 */       startIndexInclusive = 0;
/*      */     }
/* 7049 */     if (endIndexExclusive >= array.length) {
/* 7050 */       endIndexExclusive = array.length;
/*      */     }
/* 7052 */     int n = endIndexExclusive - startIndexInclusive;
/* 7053 */     if (n <= 1) {
/* 7054 */       return;
/*      */     }
/* 7056 */     offset %= n;
/* 7057 */     if (offset < 0) {
/* 7058 */       offset += n;
/*      */     }
/*      */     
/*      */ 
/* 7062 */     while (n > 1 && offset > 0) {
/* 7063 */       int n_offset = n - offset;
/*      */       
/* 7065 */       if (offset > n_offset) {
/* 7066 */         swap(array, startIndexInclusive, startIndexInclusive + n - n_offset, n_offset);
/* 7067 */         n = offset;
/* 7068 */         offset -= n_offset;
/* 7069 */       } else if (offset < n_offset) {
/* 7070 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7071 */         startIndexInclusive += offset;
/* 7072 */         n = n_offset;
/*      */       } else {
/* 7074 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7075 */         return;
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(char[] array, int offset)
/*      */   {
/* 7093 */     if (array == null) {
/* 7094 */       return;
/*      */     }
/* 7096 */     shift(array, 0, array.length, offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(char[] array, int startIndexInclusive, int endIndexExclusive, int offset)
/*      */   {
/* 7119 */     if (array == null) {
/* 7120 */       return;
/*      */     }
/* 7122 */     if (startIndexInclusive >= array.length - 1 || endIndexExclusive <= 0) {
/* 7123 */       return;
/*      */     }
/* 7125 */     if (startIndexInclusive < 0) {
/* 7126 */       startIndexInclusive = 0;
/*      */     }
/* 7128 */     if (endIndexExclusive >= array.length) {
/* 7129 */       endIndexExclusive = array.length;
/*      */     }
/* 7131 */     int n = endIndexExclusive - startIndexInclusive;
/* 7132 */     if (n <= 1) {
/* 7133 */       return;
/*      */     }
/* 7135 */     offset %= n;
/* 7136 */     if (offset < 0) {
/* 7137 */       offset += n;
/*      */     }
/*      */     
/*      */ 
/* 7141 */     while (n > 1 && offset > 0) {
/* 7142 */       int n_offset = n - offset;
/*      */       
/* 7144 */       if (offset > n_offset) {
/* 7145 */         swap(array, startIndexInclusive, startIndexInclusive + n - n_offset, n_offset);
/* 7146 */         n = offset;
/* 7147 */         offset -= n_offset;
/* 7148 */       } else if (offset < n_offset) {
/* 7149 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7150 */         startIndexInclusive += offset;
/* 7151 */         n = n_offset;
/*      */       } else {
/* 7153 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7154 */         return;
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(double[] array, int offset)
/*      */   {
/* 7172 */     if (array == null) {
/* 7173 */       return;
/*      */     }
/* 7175 */     shift(array, 0, array.length, offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(double[] array, int startIndexInclusive, int endIndexExclusive, int offset)
/*      */   {
/* 7198 */     if (array == null) {
/* 7199 */       return;
/*      */     }
/* 7201 */     if (startIndexInclusive >= array.length - 1 || endIndexExclusive <= 0) {
/* 7202 */       return;
/*      */     }
/* 7204 */     if (startIndexInclusive < 0) {
/* 7205 */       startIndexInclusive = 0;
/*      */     }
/* 7207 */     if (endIndexExclusive >= array.length) {
/* 7208 */       endIndexExclusive = array.length;
/*      */     }
/* 7210 */     int n = endIndexExclusive - startIndexInclusive;
/* 7211 */     if (n <= 1) {
/* 7212 */       return;
/*      */     }
/* 7214 */     offset %= n;
/* 7215 */     if (offset < 0) {
/* 7216 */       offset += n;
/*      */     }
/*      */     
/*      */ 
/* 7220 */     while (n > 1 && offset > 0) {
/* 7221 */       int n_offset = n - offset;
/*      */       
/* 7223 */       if (offset > n_offset) {
/* 7224 */         swap(array, startIndexInclusive, startIndexInclusive + n - n_offset, n_offset);
/* 7225 */         n = offset;
/* 7226 */         offset -= n_offset;
/* 7227 */       } else if (offset < n_offset) {
/* 7228 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7229 */         startIndexInclusive += offset;
/* 7230 */         n = n_offset;
/*      */       } else {
/* 7232 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7233 */         return;
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(float[] array, int offset)
/*      */   {
/* 7251 */     if (array == null) {
/* 7252 */       return;
/*      */     }
/* 7254 */     shift(array, 0, array.length, offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(float[] array, int startIndexInclusive, int endIndexExclusive, int offset)
/*      */   {
/* 7277 */     if (array == null) {
/* 7278 */       return;
/*      */     }
/* 7280 */     if (startIndexInclusive >= array.length - 1 || endIndexExclusive <= 0) {
/* 7281 */       return;
/*      */     }
/* 7283 */     if (startIndexInclusive < 0) {
/* 7284 */       startIndexInclusive = 0;
/*      */     }
/* 7286 */     if (endIndexExclusive >= array.length) {
/* 7287 */       endIndexExclusive = array.length;
/*      */     }
/* 7289 */     int n = endIndexExclusive - startIndexInclusive;
/* 7290 */     if (n <= 1) {
/* 7291 */       return;
/*      */     }
/* 7293 */     offset %= n;
/* 7294 */     if (offset < 0) {
/* 7295 */       offset += n;
/*      */     }
/*      */     
/*      */ 
/* 7299 */     while (n > 1 && offset > 0) {
/* 7300 */       int n_offset = n - offset;
/*      */       
/* 7302 */       if (offset > n_offset) {
/* 7303 */         swap(array, startIndexInclusive, startIndexInclusive + n - n_offset, n_offset);
/* 7304 */         n = offset;
/* 7305 */         offset -= n_offset;
/* 7306 */       } else if (offset < n_offset) {
/* 7307 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7308 */         startIndexInclusive += offset;
/* 7309 */         n = n_offset;
/*      */       } else {
/* 7311 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7312 */         return;
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(int[] array, int offset)
/*      */   {
/* 7330 */     if (array == null) {
/* 7331 */       return;
/*      */     }
/* 7333 */     shift(array, 0, array.length, offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(int[] array, int startIndexInclusive, int endIndexExclusive, int offset)
/*      */   {
/* 7356 */     if (array == null) {
/* 7357 */       return;
/*      */     }
/* 7359 */     if (startIndexInclusive >= array.length - 1 || endIndexExclusive <= 0) {
/* 7360 */       return;
/*      */     }
/* 7362 */     if (startIndexInclusive < 0) {
/* 7363 */       startIndexInclusive = 0;
/*      */     }
/* 7365 */     if (endIndexExclusive >= array.length) {
/* 7366 */       endIndexExclusive = array.length;
/*      */     }
/* 7368 */     int n = endIndexExclusive - startIndexInclusive;
/* 7369 */     if (n <= 1) {
/* 7370 */       return;
/*      */     }
/* 7372 */     offset %= n;
/* 7373 */     if (offset < 0) {
/* 7374 */       offset += n;
/*      */     }
/*      */     
/*      */ 
/* 7378 */     while (n > 1 && offset > 0) {
/* 7379 */       int n_offset = n - offset;
/*      */       
/* 7381 */       if (offset > n_offset) {
/* 7382 */         swap(array, startIndexInclusive, startIndexInclusive + n - n_offset, n_offset);
/* 7383 */         n = offset;
/* 7384 */         offset -= n_offset;
/* 7385 */       } else if (offset < n_offset) {
/* 7386 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7387 */         startIndexInclusive += offset;
/* 7388 */         n = n_offset;
/*      */       } else {
/* 7390 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7391 */         return;
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(long[] array, int offset)
/*      */   {
/* 7409 */     if (array == null) {
/* 7410 */       return;
/*      */     }
/* 7412 */     shift(array, 0, array.length, offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(long[] array, int startIndexInclusive, int endIndexExclusive, int offset)
/*      */   {
/* 7435 */     if (array == null) {
/* 7436 */       return;
/*      */     }
/* 7438 */     if (startIndexInclusive >= array.length - 1 || endIndexExclusive <= 0) {
/* 7439 */       return;
/*      */     }
/* 7441 */     if (startIndexInclusive < 0) {
/* 7442 */       startIndexInclusive = 0;
/*      */     }
/* 7444 */     if (endIndexExclusive >= array.length) {
/* 7445 */       endIndexExclusive = array.length;
/*      */     }
/* 7447 */     int n = endIndexExclusive - startIndexInclusive;
/* 7448 */     if (n <= 1) {
/* 7449 */       return;
/*      */     }
/* 7451 */     offset %= n;
/* 7452 */     if (offset < 0) {
/* 7453 */       offset += n;
/*      */     }
/*      */     
/*      */ 
/* 7457 */     while (n > 1 && offset > 0) {
/* 7458 */       int n_offset = n - offset;
/*      */       
/* 7460 */       if (offset > n_offset) {
/* 7461 */         swap(array, startIndexInclusive, startIndexInclusive + n - n_offset, n_offset);
/* 7462 */         n = offset;
/* 7463 */         offset -= n_offset;
/* 7464 */       } else if (offset < n_offset) {
/* 7465 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7466 */         startIndexInclusive += offset;
/* 7467 */         n = n_offset;
/*      */       } else {
/* 7469 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7470 */         return;
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(Object[] array, int offset)
/*      */   {
/* 7490 */     if (array == null) {
/* 7491 */       return;
/*      */     }
/* 7493 */     shift(array, 0, array.length, offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(Object[] array, int startIndexInclusive, int endIndexExclusive, int offset)
/*      */   {
/* 7516 */     if (array == null) {
/* 7517 */       return;
/*      */     }
/* 7519 */     if (startIndexInclusive >= array.length - 1 || endIndexExclusive <= 0) {
/* 7520 */       return;
/*      */     }
/* 7522 */     if (startIndexInclusive < 0) {
/* 7523 */       startIndexInclusive = 0;
/*      */     }
/* 7525 */     if (endIndexExclusive >= array.length) {
/* 7526 */       endIndexExclusive = array.length;
/*      */     }
/* 7528 */     int n = endIndexExclusive - startIndexInclusive;
/* 7529 */     if (n <= 1) {
/* 7530 */       return;
/*      */     }
/* 7532 */     offset %= n;
/* 7533 */     if (offset < 0) {
/* 7534 */       offset += n;
/*      */     }
/*      */     
/*      */ 
/* 7538 */     while (n > 1 && offset > 0) {
/* 7539 */       int n_offset = n - offset;
/*      */       
/* 7541 */       if (offset > n_offset) {
/* 7542 */         swap(array, startIndexInclusive, startIndexInclusive + n - n_offset, n_offset);
/* 7543 */         n = offset;
/* 7544 */         offset -= n_offset;
/* 7545 */       } else if (offset < n_offset) {
/* 7546 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7547 */         startIndexInclusive += offset;
/* 7548 */         n = n_offset;
/*      */       } else {
/* 7550 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7551 */         return;
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(short[] array, int offset)
/*      */   {
/* 7569 */     if (array == null) {
/* 7570 */       return;
/*      */     }
/* 7572 */     shift(array, 0, array.length, offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shift(short[] array, int startIndexInclusive, int endIndexExclusive, int offset)
/*      */   {
/* 7595 */     if (array == null) {
/* 7596 */       return;
/*      */     }
/* 7598 */     if (startIndexInclusive >= array.length - 1 || endIndexExclusive <= 0) {
/* 7599 */       return;
/*      */     }
/* 7601 */     if (startIndexInclusive < 0) {
/* 7602 */       startIndexInclusive = 0;
/*      */     }
/* 7604 */     if (endIndexExclusive >= array.length) {
/* 7605 */       endIndexExclusive = array.length;
/*      */     }
/* 7607 */     int n = endIndexExclusive - startIndexInclusive;
/* 7608 */     if (n <= 1) {
/* 7609 */       return;
/*      */     }
/* 7611 */     offset %= n;
/* 7612 */     if (offset < 0) {
/* 7613 */       offset += n;
/*      */     }
/*      */     
/*      */ 
/* 7617 */     while (n > 1 && offset > 0) {
/* 7618 */       int n_offset = n - offset;
/*      */       
/* 7620 */       if (offset > n_offset) {
/* 7621 */         swap(array, startIndexInclusive, startIndexInclusive + n - n_offset, n_offset);
/* 7622 */         n = offset;
/* 7623 */         offset -= n_offset;
/* 7624 */       } else if (offset < n_offset) {
/* 7625 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7626 */         startIndexInclusive += offset;
/* 7627 */         n = n_offset;
/*      */       } else {
/* 7629 */         swap(array, startIndexInclusive, startIndexInclusive + n_offset, offset);
/* 7630 */         return;
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(boolean[] array)
/*      */   {
/* 7643 */     shuffle(array, new Random());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(boolean[] array, Random random)
/*      */   {
/* 7655 */     for (int i = array.length; i > 1; i--) {
/* 7656 */       swap(array, i - 1, random.nextInt(i), 1);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(byte[] array)
/*      */   {
/* 7668 */     shuffle(array, new Random());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(byte[] array, Random random)
/*      */   {
/* 7680 */     for (int i = array.length; i > 1; i--) {
/* 7681 */       swap(array, i - 1, random.nextInt(i), 1);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(char[] array)
/*      */   {
/* 7693 */     shuffle(array, new Random());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(char[] array, Random random)
/*      */   {
/* 7705 */     for (int i = array.length; i > 1; i--) {
/* 7706 */       swap(array, i - 1, random.nextInt(i), 1);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(double[] array)
/*      */   {
/* 7718 */     shuffle(array, new Random());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(double[] array, Random random)
/*      */   {
/* 7730 */     for (int i = array.length; i > 1; i--) {
/* 7731 */       swap(array, i - 1, random.nextInt(i), 1);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(float[] array)
/*      */   {
/* 7743 */     shuffle(array, new Random());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(float[] array, Random random)
/*      */   {
/* 7755 */     for (int i = array.length; i > 1; i--) {
/* 7756 */       swap(array, i - 1, random.nextInt(i), 1);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(int[] array)
/*      */   {
/* 7768 */     shuffle(array, new Random());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(int[] array, Random random)
/*      */   {
/* 7780 */     for (int i = array.length; i > 1; i--) {
/* 7781 */       swap(array, i - 1, random.nextInt(i), 1);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(long[] array)
/*      */   {
/* 7793 */     shuffle(array, new Random());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(long[] array, Random random)
/*      */   {
/* 7805 */     for (int i = array.length; i > 1; i--) {
/* 7806 */       swap(array, i - 1, random.nextInt(i), 1);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(Object[] array)
/*      */   {
/* 7818 */     shuffle(array, new Random());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(Object[] array, Random random)
/*      */   {
/* 7830 */     for (int i = array.length; i > 1; i--) {
/* 7831 */       swap(array, i - 1, random.nextInt(i), 1);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(short[] array)
/*      */   {
/* 7843 */     shuffle(array, new Random());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void shuffle(short[] array, Random random)
/*      */   {
/* 7855 */     for (int i = array.length; i > 1; i--) {
/* 7856 */       swap(array, i - 1, random.nextInt(i), 1);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 7881 */     if (array == null) {
/* 7882 */       return null;
/*      */     }
/* 7884 */     if (startIndexInclusive < 0) {
/* 7885 */       startIndexInclusive = 0;
/*      */     }
/* 7887 */     if (endIndexExclusive > array.length) {
/* 7888 */       endIndexExclusive = array.length;
/*      */     }
/* 7890 */     int newSize = endIndexExclusive - startIndexInclusive;
/* 7891 */     if (newSize <= 0) {
/* 7892 */       return EMPTY_BOOLEAN_ARRAY;
/*      */     }
/*      */     
/* 7895 */     boolean[] subarray = new boolean[newSize];
/* 7896 */     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
/* 7897 */     return subarray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 7921 */     if (array == null) {
/* 7922 */       return null;
/*      */     }
/* 7924 */     if (startIndexInclusive < 0) {
/* 7925 */       startIndexInclusive = 0;
/*      */     }
/* 7927 */     if (endIndexExclusive > array.length) {
/* 7928 */       endIndexExclusive = array.length;
/*      */     }
/* 7930 */     int newSize = endIndexExclusive - startIndexInclusive;
/* 7931 */     if (newSize <= 0) {
/* 7932 */       return EMPTY_BYTE_ARRAY;
/*      */     }
/*      */     
/* 7935 */     byte[] subarray = new byte[newSize];
/* 7936 */     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
/* 7937 */     return subarray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 7961 */     if (array == null) {
/* 7962 */       return null;
/*      */     }
/* 7964 */     if (startIndexInclusive < 0) {
/* 7965 */       startIndexInclusive = 0;
/*      */     }
/* 7967 */     if (endIndexExclusive > array.length) {
/* 7968 */       endIndexExclusive = array.length;
/*      */     }
/* 7970 */     int newSize = endIndexExclusive - startIndexInclusive;
/* 7971 */     if (newSize <= 0) {
/* 7972 */       return EMPTY_CHAR_ARRAY;
/*      */     }
/*      */     
/* 7975 */     char[] subarray = new char[newSize];
/* 7976 */     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
/* 7977 */     return subarray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 8001 */     if (array == null) {
/* 8002 */       return null;
/*      */     }
/* 8004 */     if (startIndexInclusive < 0) {
/* 8005 */       startIndexInclusive = 0;
/*      */     }
/* 8007 */     if (endIndexExclusive > array.length) {
/* 8008 */       endIndexExclusive = array.length;
/*      */     }
/* 8010 */     int newSize = endIndexExclusive - startIndexInclusive;
/* 8011 */     if (newSize <= 0) {
/* 8012 */       return EMPTY_DOUBLE_ARRAY;
/*      */     }
/*      */     
/* 8015 */     double[] subarray = new double[newSize];
/* 8016 */     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
/* 8017 */     return subarray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 8041 */     if (array == null) {
/* 8042 */       return null;
/*      */     }
/* 8044 */     if (startIndexInclusive < 0) {
/* 8045 */       startIndexInclusive = 0;
/*      */     }
/* 8047 */     if (endIndexExclusive > array.length) {
/* 8048 */       endIndexExclusive = array.length;
/*      */     }
/* 8050 */     int newSize = endIndexExclusive - startIndexInclusive;
/* 8051 */     if (newSize <= 0) {
/* 8052 */       return EMPTY_FLOAT_ARRAY;
/*      */     }
/*      */     
/* 8055 */     float[] subarray = new float[newSize];
/* 8056 */     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
/* 8057 */     return subarray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 8081 */     if (array == null) {
/* 8082 */       return null;
/*      */     }
/* 8084 */     if (startIndexInclusive < 0) {
/* 8085 */       startIndexInclusive = 0;
/*      */     }
/* 8087 */     if (endIndexExclusive > array.length) {
/* 8088 */       endIndexExclusive = array.length;
/*      */     }
/* 8090 */     int newSize = endIndexExclusive - startIndexInclusive;
/* 8091 */     if (newSize <= 0) {
/* 8092 */       return EMPTY_INT_ARRAY;
/*      */     }
/*      */     
/* 8095 */     int[] subarray = new int[newSize];
/* 8096 */     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
/* 8097 */     return subarray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 8121 */     if (array == null) {
/* 8122 */       return null;
/*      */     }
/* 8124 */     if (startIndexInclusive < 0) {
/* 8125 */       startIndexInclusive = 0;
/*      */     }
/* 8127 */     if (endIndexExclusive > array.length) {
/* 8128 */       endIndexExclusive = array.length;
/*      */     }
/* 8130 */     int newSize = endIndexExclusive - startIndexInclusive;
/* 8131 */     if (newSize <= 0) {
/* 8132 */       return EMPTY_LONG_ARRAY;
/*      */     }
/*      */     
/* 8135 */     long[] subarray = new long[newSize];
/* 8136 */     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
/* 8137 */     return subarray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 8161 */     if (array == null) {
/* 8162 */       return null;
/*      */     }
/* 8164 */     if (startIndexInclusive < 0) {
/* 8165 */       startIndexInclusive = 0;
/*      */     }
/* 8167 */     if (endIndexExclusive > array.length) {
/* 8168 */       endIndexExclusive = array.length;
/*      */     }
/* 8170 */     int newSize = endIndexExclusive - startIndexInclusive;
/* 8171 */     if (newSize <= 0) {
/* 8172 */       return EMPTY_SHORT_ARRAY;
/*      */     }
/*      */     
/* 8175 */     short[] subarray = new short[newSize];
/* 8176 */     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
/* 8177 */     return subarray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive)
/*      */   {
/* 8212 */     if (array == null) {
/* 8213 */       return null;
/*      */     }
/* 8215 */     if (startIndexInclusive < 0) {
/* 8216 */       startIndexInclusive = 0;
/*      */     }
/* 8218 */     if (endIndexExclusive > array.length) {
/* 8219 */       endIndexExclusive = array.length;
/*      */     }
/* 8221 */     int newSize = endIndexExclusive - startIndexInclusive;
/* 8222 */     Class<?> type = array.getClass().getComponentType();
/* 8223 */     if (newSize <= 0)
/*      */     {
/* 8225 */       T[] emptyArray = (T[])Array.newInstance(type, 0);
/* 8226 */       return emptyArray;
/*      */     }
/*      */     
/*      */ 
/* 8230 */     T[] subarray = (T[])Array.newInstance(type, newSize);
/* 8231 */     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
/* 8232 */     return subarray;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(boolean[] array, int offset1, int offset2)
/*      */   {
/* 8257 */     if (isEmpty(array)) {
/* 8258 */       return;
/*      */     }
/* 8260 */     swap(array, offset1, offset2, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(boolean[] array, int offset1, int offset2, int len)
/*      */   {
/* 8288 */     if (isEmpty(array) || offset1 >= array.length || offset2 >= array.length) {
/* 8289 */       return;
/*      */     }
/* 8291 */     if (offset1 < 0) {
/* 8292 */       offset1 = 0;
/*      */     }
/* 8294 */     if (offset2 < 0) {
/* 8295 */       offset2 = 0;
/*      */     }
/* 8297 */     len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
/* 8298 */     for (int i = 0; i < len; i++, offset1++, offset2++) {
/* 8299 */       boolean aux = array[offset1];
/* 8300 */       array[offset1] = array[offset2];
/* 8301 */       array[offset2] = aux;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(byte[] array, int offset1, int offset2)
/*      */   {
/* 8328 */     if (isEmpty(array)) {
/* 8329 */       return;
/*      */     }
/* 8331 */     swap(array, offset1, offset2, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(byte[] array, int offset1, int offset2, int len)
/*      */   {
/* 8359 */     if (isEmpty(array) || offset1 >= array.length || offset2 >= array.length) {
/* 8360 */       return;
/*      */     }
/* 8362 */     if (offset1 < 0) {
/* 8363 */       offset1 = 0;
/*      */     }
/* 8365 */     if (offset2 < 0) {
/* 8366 */       offset2 = 0;
/*      */     }
/* 8368 */     len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
/* 8369 */     for (int i = 0; i < len; i++, offset1++, offset2++) {
/* 8370 */       byte aux = array[offset1];
/* 8371 */       array[offset1] = array[offset2];
/* 8372 */       array[offset2] = aux;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(char[] array, int offset1, int offset2)
/*      */   {
/* 8398 */     if (isEmpty(array)) {
/* 8399 */       return;
/*      */     }
/* 8401 */     swap(array, offset1, offset2, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(char[] array, int offset1, int offset2, int len)
/*      */   {
/* 8429 */     if (isEmpty(array) || offset1 >= array.length || offset2 >= array.length) {
/* 8430 */       return;
/*      */     }
/* 8432 */     if (offset1 < 0) {
/* 8433 */       offset1 = 0;
/*      */     }
/* 8435 */     if (offset2 < 0) {
/* 8436 */       offset2 = 0;
/*      */     }
/* 8438 */     len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
/* 8439 */     for (int i = 0; i < len; i++, offset1++, offset2++) {
/* 8440 */       char aux = array[offset1];
/* 8441 */       array[offset1] = array[offset2];
/* 8442 */       array[offset2] = aux;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(double[] array, int offset1, int offset2)
/*      */   {
/* 8468 */     if (isEmpty(array)) {
/* 8469 */       return;
/*      */     }
/* 8471 */     swap(array, offset1, offset2, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(double[] array, int offset1, int offset2, int len)
/*      */   {
/* 8499 */     if (isEmpty(array) || offset1 >= array.length || offset2 >= array.length) {
/* 8500 */       return;
/*      */     }
/* 8502 */     if (offset1 < 0) {
/* 8503 */       offset1 = 0;
/*      */     }
/* 8505 */     if (offset2 < 0) {
/* 8506 */       offset2 = 0;
/*      */     }
/* 8508 */     len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
/* 8509 */     for (int i = 0; i < len; i++, offset1++, offset2++) {
/* 8510 */       double aux = array[offset1];
/* 8511 */       array[offset1] = array[offset2];
/* 8512 */       array[offset2] = aux;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(float[] array, int offset1, int offset2)
/*      */   {
/* 8538 */     if (isEmpty(array)) {
/* 8539 */       return;
/*      */     }
/* 8541 */     swap(array, offset1, offset2, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(float[] array, int offset1, int offset2, int len)
/*      */   {
/* 8569 */     if (isEmpty(array) || offset1 >= array.length || offset2 >= array.length) {
/* 8570 */       return;
/*      */     }
/* 8572 */     if (offset1 < 0) {
/* 8573 */       offset1 = 0;
/*      */     }
/* 8575 */     if (offset2 < 0) {
/* 8576 */       offset2 = 0;
/*      */     }
/* 8578 */     len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
/* 8579 */     for (int i = 0; i < len; i++, offset1++, offset2++) {
/* 8580 */       float aux = array[offset1];
/* 8581 */       array[offset1] = array[offset2];
/* 8582 */       array[offset2] = aux;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(int[] array, int offset1, int offset2)
/*      */   {
/* 8609 */     if (isEmpty(array)) {
/* 8610 */       return;
/*      */     }
/* 8612 */     swap(array, offset1, offset2, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(int[] array, int offset1, int offset2, int len)
/*      */   {
/* 8640 */     if (isEmpty(array) || offset1 >= array.length || offset2 >= array.length) {
/* 8641 */       return;
/*      */     }
/* 8643 */     if (offset1 < 0) {
/* 8644 */       offset1 = 0;
/*      */     }
/* 8646 */     if (offset2 < 0) {
/* 8647 */       offset2 = 0;
/*      */     }
/* 8649 */     len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
/* 8650 */     for (int i = 0; i < len; i++, offset1++, offset2++) {
/* 8651 */       int aux = array[offset1];
/* 8652 */       array[offset1] = array[offset2];
/* 8653 */       array[offset2] = aux;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(long[] array, int offset1, int offset2)
/*      */   {
/* 8680 */     if (isEmpty(array)) {
/* 8681 */       return;
/*      */     }
/* 8683 */     swap(array, offset1, offset2, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(long[] array, int offset1, int offset2, int len)
/*      */   {
/* 8711 */     if (isEmpty(array) || offset1 >= array.length || offset2 >= array.length) {
/* 8712 */       return;
/*      */     }
/* 8714 */     if (offset1 < 0) {
/* 8715 */       offset1 = 0;
/*      */     }
/* 8717 */     if (offset2 < 0) {
/* 8718 */       offset2 = 0;
/*      */     }
/* 8720 */     len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
/* 8721 */     for (int i = 0; i < len; i++, offset1++, offset2++) {
/* 8722 */       long aux = array[offset1];
/* 8723 */       array[offset1] = array[offset2];
/* 8724 */       array[offset2] = aux;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(Object[] array, int offset1, int offset2)
/*      */   {
/* 8752 */     if (isEmpty(array)) {
/* 8753 */       return;
/*      */     }
/* 8755 */     swap(array, offset1, offset2, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(Object[] array, int offset1, int offset2, int len)
/*      */   {
/* 8783 */     if (isEmpty(array) || offset1 >= array.length || offset2 >= array.length) {
/* 8784 */       return;
/*      */     }
/* 8786 */     if (offset1 < 0) {
/* 8787 */       offset1 = 0;
/*      */     }
/* 8789 */     if (offset2 < 0) {
/* 8790 */       offset2 = 0;
/*      */     }
/* 8792 */     len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
/* 8793 */     for (int i = 0; i < len; i++, offset1++, offset2++) {
/* 8794 */       Object aux = array[offset1];
/* 8795 */       array[offset1] = array[offset2];
/* 8796 */       array[offset2] = aux;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(short[] array, int offset1, int offset2)
/*      */   {
/* 8822 */     if (isEmpty(array)) {
/* 8823 */       return;
/*      */     }
/* 8825 */     swap(array, offset1, offset2, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static void swap(short[] array, int offset1, int offset2, int len)
/*      */   {
/* 8853 */     if (isEmpty(array) || offset1 >= array.length || offset2 >= array.length) {
/* 8854 */       return;
/*      */     }
/* 8856 */     if (offset1 < 0) {
/* 8857 */       offset1 = 0;
/*      */     }
/* 8859 */     if (offset2 < 0) {
/* 8860 */       offset2 = 0;
/*      */     }
/* 8862 */     if (offset1 == offset2) {
/* 8863 */       return;
/*      */     }
/* 8865 */     len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
/* 8866 */     for (int i = 0; i < len; i++, offset1++, offset2++) {
/* 8867 */       short aux = array[offset1];
/* 8868 */       array[offset1] = array[offset2];
/* 8869 */       array[offset2] = aux;
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T[] toArray(T... items)
/*      */   {
/* 8913 */     return items;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Map<Object, Object> toMap(Object[] array)
/*      */   {
/* 8944 */     if (array == null) {
/* 8945 */       return null;
/*      */     }
/* 8947 */     Map<Object, Object> map = new HashMap<>((int)(array.length * 1.5D));
/* 8948 */     for (int i = 0; i < array.length; i++) {
/* 8949 */       Object object = array[i];
/* 8950 */       if ((object instanceof Entry)) {
/* 8951 */         Entry<?, ?> entry = (Entry)object;
/* 8952 */         map.put(entry.getKey(), entry.getValue());
/* 8953 */       } else if ((object instanceof Object[])) {
/* 8954 */         Object[] entry = (Object[])object;
/* 8955 */         if (entry.length < 2) {
/* 8956 */           throw new IllegalArgumentException("Array element " + i + ", '" + object + "', has a length less than 2");
/*      */         }
/*      */         
/*      */ 
/* 8960 */         map.put(entry[0], entry[1]);
/*      */       } else {
/* 8962 */         throw new IllegalArgumentException("Array element " + i + ", '" + object + "', is neither of type Map.Entry nor an Array");
/*      */       }
/*      */     }
/*      */     
/*      */ 
/* 8967 */     return map;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Boolean[] toObject(boolean[] array)
/*      */   {
/* 8979 */     if (array == null)
/* 8980 */       return null;
/* 8981 */     if (array.length == 0) {
/* 8982 */       return EMPTY_BOOLEAN_OBJECT_ARRAY;
/*      */     }
/* 8984 */     Boolean[] result = new Boolean[array.length];
/* 8985 */     for (int i = 0; i < array.length; i++) {
/* 8986 */       result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);
/*      */     }
/* 8988 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Byte[] toObject(byte[] array)
/*      */   {
/* 9000 */     if (array == null)
/* 9001 */       return null;
/* 9002 */     if (array.length == 0) {
/* 9003 */       return EMPTY_BYTE_OBJECT_ARRAY;
/*      */     }
/* 9005 */     Byte[] result = new Byte[array.length];
/* 9006 */     for (int i = 0; i < array.length; i++) {
/* 9007 */       result[i] = Byte.valueOf(array[i]);
/*      */     }
/* 9009 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Character[] toObject(char[] array)
/*      */   {
/* 9021 */     if (array == null)
/* 9022 */       return null;
/* 9023 */     if (array.length == 0) {
/* 9024 */       return EMPTY_CHARACTER_OBJECT_ARRAY;
/*      */     }
/* 9026 */     Character[] result = new Character[array.length];
/* 9027 */     for (int i = 0; i < array.length; i++) {
/* 9028 */       result[i] = Character.valueOf(array[i]);
/*      */     }
/* 9030 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Double[] toObject(double[] array)
/*      */   {
/* 9042 */     if (array == null)
/* 9043 */       return null;
/* 9044 */     if (array.length == 0) {
/* 9045 */       return EMPTY_DOUBLE_OBJECT_ARRAY;
/*      */     }
/* 9047 */     Double[] result = new Double[array.length];
/* 9048 */     for (int i = 0; i < array.length; i++) {
/* 9049 */       result[i] = Double.valueOf(array[i]);
/*      */     }
/* 9051 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Float[] toObject(float[] array)
/*      */   {
/* 9063 */     if (array == null)
/* 9064 */       return null;
/* 9065 */     if (array.length == 0) {
/* 9066 */       return EMPTY_FLOAT_OBJECT_ARRAY;
/*      */     }
/* 9068 */     Float[] result = new Float[array.length];
/* 9069 */     for (int i = 0; i < array.length; i++) {
/* 9070 */       result[i] = Float.valueOf(array[i]);
/*      */     }
/* 9072 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Integer[] toObject(int[] array)
/*      */   {
/* 9084 */     if (array == null)
/* 9085 */       return null;
/* 9086 */     if (array.length == 0) {
/* 9087 */       return EMPTY_INTEGER_OBJECT_ARRAY;
/*      */     }
/* 9089 */     Integer[] result = new Integer[array.length];
/* 9090 */     for (int i = 0; i < array.length; i++) {
/* 9091 */       result[i] = Integer.valueOf(array[i]);
/*      */     }
/* 9093 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Long[] toObject(long[] array)
/*      */   {
/* 9105 */     if (array == null)
/* 9106 */       return null;
/* 9107 */     if (array.length == 0) {
/* 9108 */       return EMPTY_LONG_OBJECT_ARRAY;
/*      */     }
/* 9110 */     Long[] result = new Long[array.length];
/* 9111 */     for (int i = 0; i < array.length; i++) {
/* 9112 */       result[i] = Long.valueOf(array[i]);
/*      */     }
/* 9114 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Short[] toObject(short[] array)
/*      */   {
/* 9126 */     if (array == null)
/* 9127 */       return null;
/* 9128 */     if (array.length == 0) {
/* 9129 */       return EMPTY_SHORT_OBJECT_ARRAY;
/*      */     }
/* 9131 */     Short[] result = new Short[array.length];
/* 9132 */     for (int i = 0; i < array.length; i++) {
/* 9133 */       result[i] = Short.valueOf(array[i]);
/*      */     }
/* 9135 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] toPrimitive(Boolean[] array)
/*      */   {
/* 9150 */     if (array == null)
/* 9151 */       return null;
/* 9152 */     if (array.length == 0) {
/* 9153 */       return EMPTY_BOOLEAN_ARRAY;
/*      */     }
/* 9155 */     boolean[] result = new boolean[array.length];
/* 9156 */     for (int i = 0; i < array.length; i++) {
/* 9157 */       result[i] = array[i].booleanValue();
/*      */     }
/* 9159 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean[] toPrimitive(Boolean[] array, boolean valueForNull)
/*      */   {
/* 9172 */     if (array == null)
/* 9173 */       return null;
/* 9174 */     if (array.length == 0) {
/* 9175 */       return EMPTY_BOOLEAN_ARRAY;
/*      */     }
/* 9177 */     boolean[] result = new boolean[array.length];
/* 9178 */     for (int i = 0; i < array.length; i++) {
/* 9179 */       Boolean b = array[i];
/* 9180 */       result[i] = (b == null ? valueForNull : b.booleanValue());
/*      */     }
/* 9182 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] toPrimitive(Byte[] array)
/*      */   {
/* 9197 */     if (array == null)
/* 9198 */       return null;
/* 9199 */     if (array.length == 0) {
/* 9200 */       return EMPTY_BYTE_ARRAY;
/*      */     }
/* 9202 */     byte[] result = new byte[array.length];
/* 9203 */     for (int i = 0; i < array.length; i++) {
/* 9204 */       result[i] = array[i].byteValue();
/*      */     }
/* 9206 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] toPrimitive(Byte[] array, byte valueForNull)
/*      */   {
/* 9219 */     if (array == null)
/* 9220 */       return null;
/* 9221 */     if (array.length == 0) {
/* 9222 */       return EMPTY_BYTE_ARRAY;
/*      */     }
/* 9224 */     byte[] result = new byte[array.length];
/* 9225 */     for (int i = 0; i < array.length; i++) {
/* 9226 */       Byte b = array[i];
/* 9227 */       result[i] = (b == null ? valueForNull : b.byteValue());
/*      */     }
/* 9229 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] toPrimitive(Character[] array)
/*      */   {
/* 9244 */     if (array == null)
/* 9245 */       return null;
/* 9246 */     if (array.length == 0) {
/* 9247 */       return EMPTY_CHAR_ARRAY;
/*      */     }
/* 9249 */     char[] result = new char[array.length];
/* 9250 */     for (int i = 0; i < array.length; i++) {
/* 9251 */       result[i] = array[i].charValue();
/*      */     }
/* 9253 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static char[] toPrimitive(Character[] array, char valueForNull)
/*      */   {
/* 9266 */     if (array == null)
/* 9267 */       return null;
/* 9268 */     if (array.length == 0) {
/* 9269 */       return EMPTY_CHAR_ARRAY;
/*      */     }
/* 9271 */     char[] result = new char[array.length];
/* 9272 */     for (int i = 0; i < array.length; i++) {
/* 9273 */       Character b = array[i];
/* 9274 */       result[i] = (b == null ? valueForNull : b.charValue());
/*      */     }
/* 9276 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] toPrimitive(Double[] array)
/*      */   {
/* 9291 */     if (array == null)
/* 9292 */       return null;
/* 9293 */     if (array.length == 0) {
/* 9294 */       return EMPTY_DOUBLE_ARRAY;
/*      */     }
/* 9296 */     double[] result = new double[array.length];
/* 9297 */     for (int i = 0; i < array.length; i++) {
/* 9298 */       result[i] = array[i].doubleValue();
/*      */     }
/* 9300 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static double[] toPrimitive(Double[] array, double valueForNull)
/*      */   {
/* 9313 */     if (array == null)
/* 9314 */       return null;
/* 9315 */     if (array.length == 0) {
/* 9316 */       return EMPTY_DOUBLE_ARRAY;
/*      */     }
/* 9318 */     double[] result = new double[array.length];
/* 9319 */     for (int i = 0; i < array.length; i++) {
/* 9320 */       Double b = array[i];
/* 9321 */       result[i] = (b == null ? valueForNull : b.doubleValue());
/*      */     }
/* 9323 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] toPrimitive(Float[] array)
/*      */   {
/* 9338 */     if (array == null)
/* 9339 */       return null;
/* 9340 */     if (array.length == 0) {
/* 9341 */       return EMPTY_FLOAT_ARRAY;
/*      */     }
/* 9343 */     float[] result = new float[array.length];
/* 9344 */     for (int i = 0; i < array.length; i++) {
/* 9345 */       result[i] = array[i].floatValue();
/*      */     }
/* 9347 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static float[] toPrimitive(Float[] array, float valueForNull)
/*      */   {
/* 9360 */     if (array == null)
/* 9361 */       return null;
/* 9362 */     if (array.length == 0) {
/* 9363 */       return EMPTY_FLOAT_ARRAY;
/*      */     }
/* 9365 */     float[] result = new float[array.length];
/* 9366 */     for (int i = 0; i < array.length; i++) {
/* 9367 */       Float b = array[i];
/* 9368 */       result[i] = (b == null ? valueForNull : b.floatValue());
/*      */     }
/* 9370 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] toPrimitive(Integer[] array)
/*      */   {
/* 9385 */     if (array == null)
/* 9386 */       return null;
/* 9387 */     if (array.length == 0) {
/* 9388 */       return EMPTY_INT_ARRAY;
/*      */     }
/* 9390 */     int[] result = new int[array.length];
/* 9391 */     for (int i = 0; i < array.length; i++) {
/* 9392 */       result[i] = array[i].intValue();
/*      */     }
/* 9394 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] toPrimitive(Integer[] array, int valueForNull)
/*      */   {
/* 9407 */     if (array == null)
/* 9408 */       return null;
/* 9409 */     if (array.length == 0) {
/* 9410 */       return EMPTY_INT_ARRAY;
/*      */     }
/* 9412 */     int[] result = new int[array.length];
/* 9413 */     for (int i = 0; i < array.length; i++) {
/* 9414 */       Integer b = array[i];
/* 9415 */       result[i] = (b == null ? valueForNull : b.intValue());
/*      */     }
/* 9417 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] toPrimitive(Long[] array)
/*      */   {
/* 9432 */     if (array == null)
/* 9433 */       return null;
/* 9434 */     if (array.length == 0) {
/* 9435 */       return EMPTY_LONG_ARRAY;
/*      */     }
/* 9437 */     long[] result = new long[array.length];
/* 9438 */     for (int i = 0; i < array.length; i++) {
/* 9439 */       result[i] = array[i].longValue();
/*      */     }
/* 9441 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static long[] toPrimitive(Long[] array, long valueForNull)
/*      */   {
/* 9454 */     if (array == null)
/* 9455 */       return null;
/* 9456 */     if (array.length == 0) {
/* 9457 */       return EMPTY_LONG_ARRAY;
/*      */     }
/* 9459 */     long[] result = new long[array.length];
/* 9460 */     for (int i = 0; i < array.length; i++) {
/* 9461 */       Long b = array[i];
/* 9462 */       result[i] = (b == null ? valueForNull : b.longValue());
/*      */     }
/* 9464 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static Object toPrimitive(Object array)
/*      */   {
/* 9477 */     if (array == null) {
/* 9478 */       return null;
/*      */     }
/* 9480 */     Class<?> ct = array.getClass().getComponentType();
/* 9481 */     Class<?> pt = ClassUtils.wrapperToPrimitive(ct);
/* 9482 */     if (Boolean.TYPE.equals(pt)) {
/* 9483 */       return toPrimitive((Boolean[])array);
/*      */     }
/* 9485 */     if (Character.TYPE.equals(pt)) {
/* 9486 */       return toPrimitive((Character[])array);
/*      */     }
/* 9488 */     if (Byte.TYPE.equals(pt)) {
/* 9489 */       return toPrimitive((Byte[])array);
/*      */     }
/* 9491 */     if (Integer.TYPE.equals(pt)) {
/* 9492 */       return toPrimitive((Integer[])array);
/*      */     }
/* 9494 */     if (Long.TYPE.equals(pt)) {
/* 9495 */       return toPrimitive((Long[])array);
/*      */     }
/* 9497 */     if (Short.TYPE.equals(pt)) {
/* 9498 */       return toPrimitive((Short[])array);
/*      */     }
/* 9500 */     if (Double.TYPE.equals(pt)) {
/* 9501 */       return toPrimitive((Double[])array);
/*      */     }
/* 9503 */     if (Float.TYPE.equals(pt)) {
/* 9504 */       return toPrimitive((Float[])array);
/*      */     }
/* 9506 */     return array;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] toPrimitive(Short[] array)
/*      */   {
/* 9521 */     if (array == null)
/* 9522 */       return null;
/* 9523 */     if (array.length == 0) {
/* 9524 */       return EMPTY_SHORT_ARRAY;
/*      */     }
/* 9526 */     short[] result = new short[array.length];
/* 9527 */     for (int i = 0; i < array.length; i++) {
/* 9528 */       result[i] = array[i].shortValue();
/*      */     }
/* 9530 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static short[] toPrimitive(Short[] array, short valueForNull)
/*      */   {
/* 9543 */     if (array == null)
/* 9544 */       return null;
/* 9545 */     if (array.length == 0) {
/* 9546 */       return EMPTY_SHORT_ARRAY;
/*      */     }
/* 9548 */     short[] result = new short[array.length];
/* 9549 */     for (int i = 0; i < array.length; i++) {
/* 9550 */       Short b = array[i];
/* 9551 */       result[i] = (b == null ? valueForNull : b.shortValue());
/*      */     }
/* 9553 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String toString(Object array)
/*      */   {
/* 9570 */     return toString(array, "{}");
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String toString(Object array, String stringIfNull)
/*      */   {
/* 9586 */     if (array == null) {
/* 9587 */       return stringIfNull;
/*      */     }
/* 9589 */     return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] toStringArray(Object[] array)
/*      */   {
/* 9604 */     if (array == null)
/* 9605 */       return null;
/* 9606 */     if (array.length == 0) {
/* 9607 */       return EMPTY_STRING_ARRAY;
/*      */     }
/*      */     
/* 9610 */     String[] result = new String[array.length];
/* 9611 */     for (int i = 0; i < array.length; i++) {
/* 9612 */       result[i] = array[i].toString();
/*      */     }
/*      */     
/* 9615 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] toStringArray(Object[] array, String valueForNullElements)
/*      */   {
/* 9630 */     if (null == array)
/* 9631 */       return null;
/* 9632 */     if (array.length == 0) {
/* 9633 */       return EMPTY_STRING_ARRAY;
/*      */     }
/*      */     
/* 9636 */     String[] result = new String[array.length];
/* 9637 */     for (int i = 0; i < array.length; i++) {
/* 9638 */       Object object = array[i];
/* 9639 */       result[i] = (object == null ? valueForNullElements : object.toString());
/*      */     }
/*      */     
/* 9642 */     return result;
/*      */   }
/*      */ }
