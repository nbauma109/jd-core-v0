/*     */ package org.apache.commons.lang3.builder;
/*     */ 
/*     */ import java.lang.reflect.AccessibleObject;
/*     */ import java.lang.reflect.Field;
/*     */ import java.lang.reflect.Modifier;
/*     */ import java.util.Collection;
/*     */ import java.util.Comparator;
/*     */ import java.util.HashSet;
/*     */ import java.util.Set;
/*     */ import org.apache.commons.lang3.ArraySorter;
/*     */ import org.apache.commons.lang3.ArrayUtils;
/*     */ import org.apache.commons.lang3.Validate;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class HashCodeBuilder
/*     */   implements Builder<Integer>
/*     */ {
/*     */   private static final int DEFAULT_INITIAL_VALUE = 17;
/*     */   private static final int DEFAULT_MULTIPLIER_VALUE = 37;
/*     */   private final int iConstant;
/*     */   private int iTotal;
/* 123 */   private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<>();
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static Set<IDKey> getRegistry()
/*     */   {
/* 151 */     return (Set)REGISTRY.get();
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static boolean isRegistered(Object value)
/*     */   {
/* 166 */     Set<IDKey> registry = getRegistry();
/* 167 */     return (registry != null) && (registry.contains(new IDKey(value)));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private static void reflectionAppend(Object object, Class<?> clazz, HashCodeBuilder builder, boolean useTransients, String[] excludeFields)
/*     */   {
/* 188 */     if (isRegistered(object)) {
/* 189 */       return;
/*     */     }
/*     */     try {
/* 192 */       register(object);
/*     */       
/* 194 */       Field[] fields = (Field[])ArraySorter.sort(clazz.getDeclaredFields(), Comparator.comparing(Field::getName));
/* 195 */       AccessibleObject.setAccessible(fields, true);
/* 196 */       for (Field field : fields) {
/* 197 */         if ((ArrayUtils.contains(excludeFields, field.getName())) || 
/* 198 */           (field.getName().contains("$")) || ((!useTransients) && 
/* 199 */           (Modifier.isTransient(field.getModifiers()))) || 
/* 200 */           (Modifier.isStatic(field.getModifiers())) || 
/* 201 */           (field.isAnnotationPresent(HashCodeExclude.class)))
/*     */           continue;
/* 203 */         try { Object fieldValue = field.get(object);
/* 204 */           builder.append(fieldValue);
/*     */         }
/*     */         catch (IllegalAccessException e)
/*     */         {
/* 208 */           throw new InternalError("Unexpected IllegalAccessException");
/*     */         }
/*     */       }
/*     */     }
/*     */     finally {
/* 213 */       unregister(object);
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object)
/*     */   {
/* 258 */     return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, new String[0]);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object, boolean testTransients)
/*     */   {
/* 305 */     return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null, new String[0]);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String... excludeFields)
/*     */   {
/* 360 */     Validate.notNull(object, "object", new Object[0]);
/* 361 */     HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);
/* 362 */     Class<?> clazz = object.getClass();
/* 363 */     reflectionAppend(object, clazz, builder, testTransients, excludeFields);
/* 364 */     while ((clazz.getSuperclass() != null) && (clazz != reflectUpToClass)) {
/* 365 */       clazz = clazz.getSuperclass();
/* 366 */       reflectionAppend(object, clazz, builder, testTransients, excludeFields);
/*     */     }
/* 368 */     return builder.toHashCode();
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static int reflectionHashCode(Object object, boolean testTransients)
/*     */   {
/* 407 */     return reflectionHashCode(17, 37, object, testTransients, null, new String[0]);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static int reflectionHashCode(Object object, Collection<String> excludeFields)
/*     */   {
/* 447 */     return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static int reflectionHashCode(Object object, String... excludeFields)
/*     */   {
/* 488 */     return reflectionHashCode(17, 37, object, false, null, excludeFields);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private static void register(Object value)
/*     */   {
/* 501 */     Set<IDKey> registry = getRegistry();
/* 502 */     if (registry == null) {
/* 503 */       registry = new HashSet<>();
/* 504 */       REGISTRY.set(registry);
/*     */     }
/* 506 */     registry.add(new IDKey(value));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private static void unregister(Object value)
/*     */   {
/* 522 */     Set<IDKey> registry = getRegistry();
/* 523 */     if (registry != null) {
/* 524 */       registry.remove(new IDKey(value));
/* 525 */       if (registry.isEmpty()) {
/* 526 */         REGISTRY.remove();
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder()
/*     */   {
/* 547 */     this.iConstant = 37;
/* 548 */     this.iTotal = 17;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder(int initialOddNumber, int multiplierOddNumber)
/*     */   {
/* 569 */     Validate.isTrue(initialOddNumber % 2 != 0, "HashCodeBuilder requires an odd initial value", new Object[0]);
/* 570 */     Validate.isTrue(multiplierOddNumber % 2 != 0, "HashCodeBuilder requires an odd multiplier", new Object[0]);
/* 571 */     this.iConstant = multiplierOddNumber;
/* 572 */     this.iTotal = initialOddNumber;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(boolean value)
/*     */   {
/* 597 */     this.iTotal = (this.iTotal * this.iConstant + (value ? 0 : 1));
/* 598 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(boolean[] array)
/*     */   {
/* 611 */     if (array == null) {
/* 612 */       this.iTotal *= this.iConstant;
/*     */     } else {
/* 614 */       for (boolean element : array) {
/* 615 */         append(element);
/*     */       }
/*     */     }
/* 618 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(byte value)
/*     */   {
/* 633 */     this.iTotal = (this.iTotal * this.iConstant + value);
/* 634 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(byte[] array)
/*     */   {
/* 649 */     if (array == null) {
/* 650 */       this.iTotal *= this.iConstant;
/*     */     } else {
/* 652 */       for (byte element : array) {
/* 653 */         append(element);
/*     */       }
/*     */     }
/* 656 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(char value)
/*     */   {
/* 669 */     this.iTotal = (this.iTotal * this.iConstant + value);
/* 670 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(char[] array)
/*     */   {
/* 683 */     if (array == null) {
/* 684 */       this.iTotal *= this.iConstant;
/*     */     } else {
/* 686 */       for (char element : array) {
/* 687 */         append(element);
/*     */       }
/*     */     }
/* 690 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(double value)
/*     */   {
/* 703 */     return append(Double.doubleToLongBits(value));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(double[] array)
/*     */   {
/* 716 */     if (array == null) {
/* 717 */       this.iTotal *= this.iConstant;
/*     */     } else {
/* 719 */       for (double element : array) {
/* 720 */         append(element);
/*     */       }
/*     */     }
/* 723 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(float value)
/*     */   {
/* 736 */     this.iTotal = (this.iTotal * this.iConstant + Float.floatToIntBits(value));
/* 737 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(float[] array)
/*     */   {
/* 750 */     if (array == null) {
/* 751 */       this.iTotal *= this.iConstant;
/*     */     } else {
/* 753 */       for (float element : array) {
/* 754 */         append(element);
/*     */       }
/*     */     }
/* 757 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(int value)
/*     */   {
/* 770 */     this.iTotal = (this.iTotal * this.iConstant + value);
/* 771 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(int[] array)
/*     */   {
/* 784 */     if (array == null) {
/* 785 */       this.iTotal *= this.iConstant;
/*     */     } else {
/* 787 */       for (int element : array) {
/* 788 */         append(element);
/*     */       }
/*     */     }
/* 791 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(long value)
/*     */   {
/* 808 */     this.iTotal = (this.iTotal * this.iConstant + (int)(value ^ value >> 32));
/* 809 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(long[] array)
/*     */   {
/* 822 */     if (array == null) {
/* 823 */       this.iTotal *= this.iConstant;
/*     */     } else {
/* 825 */       for (long element : array) {
/* 826 */         append(element);
/*     */       }
/*     */     }
/* 829 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(Object object)
/*     */   {
/* 842 */     if (object == null) {
/* 843 */       this.iTotal *= this.iConstant;
/*     */     }
/* 845 */     else if (object.getClass().isArray())
/*     */     {
/*     */ 
/* 848 */       appendArray(object);
/*     */     } else {
/* 850 */       this.iTotal = (this.iTotal * this.iConstant + object.hashCode());
/*     */     }
/* 852 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   private void appendArray(Object object)
/*     */   {
/* 866 */     if ((object instanceof long[])) {
/* 867 */       append((long[])object);
/* 868 */     } else if ((object instanceof int[])) {
/* 869 */       append((int[])object);
/* 870 */     } else if ((object instanceof short[])) {
/* 871 */       append((short[])object);
/* 872 */     } else if ((object instanceof char[])) {
/* 873 */       append((char[])object);
/* 874 */     } else if ((object instanceof byte[])) {
/* 875 */       append((byte[])object);
/* 876 */     } else if ((object instanceof double[])) {
/* 877 */       append((double[])object);
/* 878 */     } else if ((object instanceof float[])) {
/* 879 */       append((float[])object);
/* 880 */     } else if ((object instanceof boolean[])) {
/* 881 */       append((boolean[])object);
/*     */     }
/*     */     else {
/* 884 */       append((Object[])object);
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(Object[] array)
/*     */   {
/* 898 */     if (array == null) {
/* 899 */       this.iTotal *= this.iConstant;
/*     */     } else {
/* 901 */       for (Object element : array) {
/* 902 */         append(element);
/*     */       }
/*     */     }
/* 905 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(short value)
/*     */   {
/* 918 */     this.iTotal = (this.iTotal * this.iConstant + value);
/* 919 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder append(short[] array)
/*     */   {
/* 932 */     if (array == null) {
/* 933 */       this.iTotal *= this.iConstant;
/*     */     } else {
/* 935 */       for (short element : array) {
/* 936 */         append(element);
/*     */       }
/*     */     }
/* 939 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public HashCodeBuilder appendSuper(int superHashCode)
/*     */   {
/* 953 */     this.iTotal = (this.iTotal * this.iConstant + superHashCode);
/* 954 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public int toHashCode()
/*     */   {
/* 965 */     return this.iTotal;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public Integer build()
/*     */   {
/* 977 */     return Integer.valueOf(toHashCode());
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   @Override
/*     */   public int hashCode()
/*     */   {
/* 991 */     return toHashCode();
/*     */   }
/*     */ }