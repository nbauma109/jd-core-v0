package gr.androiddev.FuelPrices;

import android.app.Activity;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.Uri;
import android.os.Handler;
import android.util.Log;
import android.widget.Toast;
import java.util.Calendar;
import java.util.HashMap;

public class StaticTools
{
  public static final String KEY = "fad0a-bdb4c-fd748-7951e-2f215";
  public static int NOT_FOUND_ACCURACY = 0;
  public static int NOT_FOUND_LATITUDE = 200;
  public static int NOT_FOUND_LONGITUDE = 200;
  private static final String TAG = "FUELPRICES";
  private static String TimeLog = "";
  private static final HashMap<Character, Character> accents = new HashMap<Character, Character>() {};
  private static String bestProvider;
  private static DatabaseSG databasesg;
  private static GPSReceiver gpsReceiver;
  private static LocationManager locationManager;
  private static Activity mActivity;
  private static long startT1;
  
  static
  {
    NOT_FOUND_ACCURACY = -1; bestProvider = ""; startT1 = 0L;
  }
  
  public static void Log(String paramString)
  {
    Log.i("FUELPRICES", paramString);
  }
  
  public static void Log(String paramString1, String paramString2)
  {
    Log.i("FUELPRICES", paramString1 + ": " + paramString2);
  }
  
  public static void callNumber(String paramString)
  {
    getActiveActivity().startActivity(new Intent("android.intent.action.CALL", Uri.parse("tel:" + paramString)));
  }
  
  public static Activity getActiveActivity()
  {
    return mActivity;
  }
  
  public static DatabaseSG getDatabaseInstance()
  {
    if (databasesg == null) {
      databasesg = new DatabaseSG(getActiveActivity());
    }
    return databasesg;
  }
  
  public static String getDateFromTimestamp(String paramString)
  {
    str = "N/A";
    try {} catch (Exception paramString)
    {
      for (;;)
      {
        paramString = str;
      }
    }
    return paramString;
  }
  
  public static Drawable getDrawablefromTitle(String paramString)
  {
    Drawable localDrawable = getActiveActivity().getResources().getDrawable(2130837532);
    if (paramString.equals("BP")) {
      localDrawable = getActiveActivity().getResources().getDrawable(2130837518);
    }
    for (;;)
    {
      localDrawable.setBounds(0, 0, localDrawable.getIntrinsicWidth() / 2, localDrawable.getIntrinsicHeight() / 2); return localDrawable;
      if (paramString.equals("SHELL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837543);
      }
      else if (paramString.equals("EKO - ΕΛΔΑ"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837522);
      }
      else if (paramString.equals("ΑΝΕΞΑΡΤΗΤΟ ΠΡΑΤΗΡΙΟ"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837514);
      }
      else if (paramString.equals("ΑΙΓΑΙΟ (AEGEAN)"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837512);
      }
      else if (paramString.equals("ΑΡΓΩ"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837516);
      }
      else if (paramString.equals("AVIN"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837517);
      }
      else if (paramString.equals("VITUMINA"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837532);
      }
      else if (paramString.equals("CYCLON"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837519);
      }
      else if (paramString.equals("DRACOIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837521);
      }
      else if (paramString.equals("ΕΛΙΝΟΙΛ"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837523);
      }
      else if (paramString.equals("EL-PETROIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837524);
      }
      else if (paramString.equals("ΕΤΕΚΑ"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837525);
      }
      else if (paramString.equals("JETOIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837533);
      }
      else if (paramString.equals("KAOIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837534);
      }
      else if (paramString.equals("KMOIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837536);
      }
      else if (paramString.equals("GALONOIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837532);
      }
      else if (paramString.equals("MEDOIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837540);
      }
      else if (paramString.equals("REVOIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837542);
      }
      else if (paramString.equals("SILKOIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837544);
      }
      else if (paramString.equals("SUNOIL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837545);
      }
      else if (paramString.equals("CRETA PETROL"))
      {
        localDrawable = getActiveActivity().getResources().getDrawable(2130837532);
      }
      else
      {
        if (!paramString.equals("Υγραέριο")) {
          continue;
        }
        localDrawable = getActiveActivity().getResources().getDrawable(2130837548);
      }
    }
  }
  
  public static LocationManager getLocationManager(LocationProvider paramLocationProvider)
  {
    bool1 = false; int i = 0;
    if (locationManager == null)
    {
      new Handler().postDelayed(new Runnable()
      {
        public void run()
        {
          if (StaticTools.locationManager == null || StaticTools.gpsReceiver == null) {
            return;
          }
          StaticTools.Log("getLocationManager", "Timeout for retrieving location"); StaticTools.stopLocationManager();
        }
      }, 60000L); bestProvider = ""; gpsReceiver = new GPSReceiver(); locationManager = (LocationManager)getActiveActivity().getSystemService("location");
    }
    for (;;)
    {
      try {} catch (Exception localException2)
      {
        boolean bool2 = bool1; continue;
      }
    }
  }
  
  public static boolean isConnected(Activity paramActivity)
  {
    boolean bool = false; paramActivity = (ConnectivityManager)paramActivity.getSystemService("connectivity");
    try {} catch (NullPointerException paramActivity)
    {
      for (;;) {}
    }
    return bool;
  }
  
  public static String removeAccents(String paramString)
  {
    char[] arrayOfChar = paramString.toCharArray();
    for (int i = 0;; i++)
    {
      if (i >= arrayOfChar.length) {
        return new String(arrayOfChar);
      }
      paramString = (Character)accents.get(Character.valueOf(arrayOfChar[i]));
      if (paramString == null) {
        continue;
      }
      arrayOfChar[i] = paramString.charValue();
    }
  }
  
  public static void setActiveActivity(Activity paramActivity)
  {
    mActivity = paramActivity;
  }
  
  public static void setTimeEnd()
  {
    Log("TIMEEND", TimeLog + " " + String.valueOf(System.currentTimeMillis() - startT1) + "ms");
  }
  
  public static void setTimeStart(String paramString)
  {
    TimeLog = paramString; Log("TIMESTART", TimeLog); startT1 = System.currentTimeMillis();
  }
  
  public static void showToastMessage(Activity paramActivity, final String paramString, final int paramInt)
  {
    paramActivity.runOnUiThread(new Runnable()
    {
      public void run()
      {
        Toast.makeText(StaticTools.this, paramString, paramInt).show();
      }
    });
  }
  
  public static void stopLocationManager()
  {
    if (locationManager == null) {
      return;
    }
    locationManager.removeUpdates(gpsReceiver); locationManager = null;
  }
  
  public static enum LocationProvider
  {
    BESTOFBOTH, ANY, GPS, NETWORK;
  }
}
