/*      */ package org.apache.commons.lang3;
/*      */ 
/*      */ import java.io.UnsupportedEncodingException;
/*      */ import java.nio.charset.Charset;
/*      */ import java.text.Normalizer;
/*      */ import java.text.Normalizer.Form;
/*      */ import java.util.ArrayList;
/*      */ import java.util.Arrays;
/*      */ import java.util.HashSet;
/*      */ import java.util.Iterator;
/*      */ import java.util.List;
/*      */ import java.util.Locale;
/*      */ import java.util.Objects;
/*      */ import java.util.Set;
/*      */ import java.util.StringJoiner;
/*      */ import java.util.function.Supplier;
/*      */ import java.util.regex.Pattern;
/*      */ import org.apache.commons.lang3.function.ToBooleanBiFunction;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class StringUtils
/*      */ {
/*      */   private static final int STRING_BUILDER_SIZE = 256;
/*      */   public static final String SPACE = " ";
/*      */   public static final String EMPTY = "";
/*      */   public static final String LF = "\n";
/*      */   public static final String CR = "\r";
/*      */   public static final int INDEX_NOT_FOUND = -1;
/*      */   private static final int PAD_LIMIT = 8192;
/*  188 */   private static final Pattern STRIP_ACCENTS_PATTERN = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String abbreviate(String str, int maxWidth)
/*      */   {
/*  222 */     return abbreviate(str, "...", 0, maxWidth);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String abbreviate(String str, int offset, int maxWidth)
/*      */   {
/*  261 */     return abbreviate(str, "...", offset, maxWidth);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String abbreviate(String str, String abbrevMarker, int maxWidth)
/*      */   {
/*  301 */     return abbreviate(str, abbrevMarker, 0, maxWidth);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String abbreviate(String str, String abbrevMarker, int offset, int maxWidth)
/*      */   {
/*  341 */     if (isNotEmpty(str) && "".equals(abbrevMarker) && maxWidth > 0)
/*  342 */       return substring(str, 0, maxWidth);
/*  343 */     if (isAnyEmpty(new CharSequence[] { str, abbrevMarker })) {
/*  344 */       return str;
/*      */     }
/*  346 */     int abbrevMarkerLength = abbrevMarker.length();
/*  347 */     int minAbbrevWidth = abbrevMarkerLength + 1;
/*  348 */     int minAbbrevWidthOffset = abbrevMarkerLength + abbrevMarkerLength + 1;
/*      */     
/*  350 */     if (maxWidth < minAbbrevWidth) {
/*  351 */       throw new IllegalArgumentException(String.format("Minimum abbreviation width is %d", Integer.valueOf(minAbbrevWidth)));
/*      */     }
/*  353 */     int strLen = str.length();
/*  354 */     if (strLen <= maxWidth) {
/*  355 */       return str;
/*      */     }
/*  357 */     if (offset > strLen) {
/*  358 */       offset = strLen;
/*      */     }
/*  360 */     if (strLen - offset < maxWidth - abbrevMarkerLength) {
/*  361 */       offset = strLen - (maxWidth - abbrevMarkerLength);
/*      */     }
/*  363 */     if (offset <= abbrevMarkerLength + 1) {
/*  364 */       return str.substring(0, maxWidth - abbrevMarkerLength) + abbrevMarker;
/*      */     }
/*  366 */     if (maxWidth < minAbbrevWidthOffset) {
/*  367 */       throw new IllegalArgumentException(String.format("Minimum abbreviation width with offset is %d", Integer.valueOf(minAbbrevWidthOffset)));
/*      */     }
/*  369 */     if (offset + maxWidth - abbrevMarkerLength < strLen) {
/*  370 */       return abbrevMarker + abbreviate(str.substring(offset), abbrevMarker, maxWidth - abbrevMarkerLength);
/*      */     }
/*  372 */     return abbrevMarker + str.substring(strLen - (maxWidth - abbrevMarkerLength));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String abbreviateMiddle(String str, String middle, int length)
/*      */   {
/*  405 */     if (isAnyEmpty(new CharSequence[] { str, middle }) || length >= str.length() || length < middle.length() + 2) {
/*  406 */       return str;
/*      */     }
/*      */     
/*  409 */     int targetSting = length - middle.length();
/*  410 */     int startOffset = targetSting / 2 + targetSting % 2;
/*  411 */     int endOffset = str.length() - targetSting / 2;
/*      */     
/*  413 */     return str.substring(0, startOffset) + middle + str
/*      */     
/*  415 */       .substring(endOffset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static String appendIfMissing(String str, CharSequence suffix, boolean ignoreCase, CharSequence... suffixes)
/*      */   {
/*  430 */     if (str == null || isEmpty(suffix) || endsWith(str, suffix, ignoreCase)) {
/*  431 */       return str;
/*      */     }
/*  433 */     if (ArrayUtils.isNotEmpty(suffixes)) {
/*  434 */       for (CharSequence s : suffixes) {
/*  435 */         if (endsWith(str, s, ignoreCase)) {
/*  436 */           return str;
/*      */         }
/*      */       }
/*      */     }
/*  440 */     return str + suffix.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String appendIfMissing(String str, CharSequence suffix, CharSequence... suffixes)
/*      */   {
/*  478 */     return appendIfMissing(str, suffix, false, suffixes);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String appendIfMissingIgnoreCase(String str, CharSequence suffix, CharSequence... suffixes)
/*      */   {
/*  516 */     return appendIfMissing(str, suffix, true, suffixes);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String capitalize(String str)
/*      */   {
/*  541 */     int strLen = length(str);
/*  542 */     if (strLen == 0) {
/*  543 */       return str;
/*      */     }
/*      */     
/*  546 */     int firstCodepoint = str.codePointAt(0);
/*  547 */     int newCodePoint = Character.toTitleCase(firstCodepoint);
/*  548 */     if (firstCodepoint == newCodePoint)
/*      */     {
/*  550 */       return str;
/*      */     }
/*      */     
/*  553 */     int[] newCodePoints = new int[strLen];
/*  554 */     int outOffset = 0;
/*  555 */     newCodePoints[(outOffset++)] = newCodePoint;
/*  556 */     for (int inOffset = Character.charCount(firstCodepoint); inOffset < strLen;) {
/*  557 */       int codepoint = str.codePointAt(inOffset);
/*  558 */       newCodePoints[(outOffset++)] = codepoint;
/*  559 */       inOffset += Character.charCount(codepoint);
/*      */     }
/*  561 */     return new String(newCodePoints, 0, outOffset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String center(String str, int size)
/*      */   {
/*  588 */     return center(str, size, ' ');
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String center(String str, int size, char padChar)
/*      */   {
/*  616 */     if (str == null || size <= 0) {
/*  617 */       return str;
/*      */     }
/*  619 */     int strLen = str.length();
/*  620 */     int pads = size - strLen;
/*  621 */     if (pads <= 0) {
/*  622 */       return str;
/*      */     }
/*  624 */     str = leftPad(str, strLen + pads / 2, padChar);
/*  625 */     str = rightPad(str, size, padChar);
/*  626 */     return str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String center(String str, int size, String padStr)
/*      */   {
/*  656 */     if (str == null || size <= 0) {
/*  657 */       return str;
/*      */     }
/*  659 */     if (isEmpty(padStr)) {
/*  660 */       padStr = " ";
/*      */     }
/*  662 */     int strLen = str.length();
/*  663 */     int pads = size - strLen;
/*  664 */     if (pads <= 0) {
/*  665 */       return str;
/*      */     }
/*  667 */     str = leftPad(str, strLen + pads / 2, padStr);
/*  668 */     str = rightPad(str, size, padStr);
/*  669 */     return str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String chomp(String str)
/*      */   {
/*  698 */     if (isEmpty(str)) {
/*  699 */       return str;
/*      */     }
/*      */     
/*  702 */     if (str.length() == 1) {
/*  703 */       char ch = str.charAt(0);
/*  704 */       if (ch == '\r' || ch == '\n') {
/*  705 */         return "";
/*      */       }
/*  707 */       return str;
/*      */     }
/*      */     
/*  710 */     int lastIdx = str.length() - 1;
/*  711 */     char last = str.charAt(lastIdx);
/*      */     
/*  713 */     if (last == '\n') {
/*  714 */       if (str.charAt(lastIdx - 1) == '\r') {
/*  715 */         lastIdx--;
/*      */       }
/*  717 */     } else if (last != '\r') {
/*  718 */       lastIdx++;
/*      */     }
/*  720 */     return str.substring(0, lastIdx);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static String chomp(String str, String separator)
/*      */   {
/*  752 */     return removeEnd(str, separator);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String chop(String str)
/*      */   {
/*  779 */     if (str == null) {
/*  780 */       return null;
/*      */     }
/*  782 */     int strLen = str.length();
/*  783 */     if (strLen < 2) {
/*  784 */       return "";
/*      */     }
/*  786 */     int lastIdx = strLen - 1;
/*  787 */     String ret = str.substring(0, lastIdx);
/*  788 */     char last = str.charAt(lastIdx);
/*  789 */     if (last == '\n' && ret.charAt(lastIdx - 1) == '\r') {
/*  790 */       return ret.substring(0, lastIdx - 1);
/*      */     }
/*  792 */     return ret;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int compare(String str1, String str2)
/*      */   {
/*  828 */     return compare(str1, str2, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int compare(String str1, String str2, boolean nullIsLess)
/*      */   {
/*  866 */     if (str1 == str2) {
/*  867 */       return 0;
/*      */     }
/*  869 */     if (str1 == null) {
/*  870 */       return nullIsLess ? -1 : 1;
/*      */     }
/*  872 */     if (str2 == null) {
/*  873 */       return nullIsLess ? 1 : -1;
/*      */     }
/*  875 */     return str1.compareTo(str2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int compareIgnoreCase(String str1, String str2)
/*      */   {
/*  916 */     return compareIgnoreCase(str1, str2, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int compareIgnoreCase(String str1, String str2, boolean nullIsLess)
/*      */   {
/*  959 */     if (str1 == str2) {
/*  960 */       return 0;
/*      */     }
/*  962 */     if (str1 == null) {
/*  963 */       return nullIsLess ? -1 : 1;
/*      */     }
/*  965 */     if (str2 == null) {
/*  966 */       return nullIsLess ? 1 : -1;
/*      */     }
/*  968 */     return str1.compareToIgnoreCase(str2);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(CharSequence seq, CharSequence searchSeq)
/*      */   {
/*  994 */     if (seq == null || searchSeq == null) {
/*  995 */       return false;
/*      */     }
/*  997 */     return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean contains(CharSequence seq, int searchChar)
/*      */   {
/* 1021 */     if (isEmpty(seq)) {
/* 1022 */       return false;
/*      */     }
/* 1024 */     return CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsAny(CharSequence cs, char... searchChars)
/*      */   {
/* 1053 */     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
/* 1054 */       return false;
/*      */     }
/* 1056 */     int csLength = cs.length();
/* 1057 */     int searchLength = searchChars.length;
/* 1058 */     int csLast = csLength - 1;
/* 1059 */     int searchLast = searchLength - 1;
/* 1060 */     for (int i = 0; i < csLength; i++) {
/* 1061 */       char ch = cs.charAt(i);
/* 1062 */       for (int j = 0; j < searchLength; j++) {
/* 1063 */         if (searchChars[j] == ch) {
/* 1064 */           if (Character.isHighSurrogate(ch)) {
/* 1065 */             if (j == searchLast)
/*      */             {
/* 1067 */               return true;
/*      */             }
/* 1069 */             if (i < csLast && searchChars[(j + 1)] == cs.charAt(i + 1)) {
/* 1070 */               return true;
/*      */             }
/*      */           }
/*      */           else {
/* 1074 */             return true;
/*      */           }
/*      */         }
/*      */       }
/*      */     }
/* 1079 */     return false;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsAny(CharSequence cs, CharSequence searchChars)
/*      */   {
/* 1114 */     if (searchChars == null) {
/* 1115 */       return false;
/*      */     }
/* 1117 */     return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsAny(CharSequence cs, CharSequence... searchCharSequences)
/*      */   {
/* 1148 */     return containsAny(StringUtils::contains, cs, searchCharSequences);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static boolean containsAny(ToBooleanBiFunction<CharSequence, CharSequence> test, CharSequence cs, CharSequence... searchCharSequences)
/*      */   {
/* 1169 */     if (isEmpty(cs) || ArrayUtils.isEmpty(searchCharSequences)) {
/* 1170 */       return false;
/*      */     }
/* 1172 */     for (CharSequence searchCharSequence : searchCharSequences) {
/* 1173 */       if (test.applyAsBoolean(cs, searchCharSequence)) {
/* 1174 */         return true;
/*      */       }
/*      */     }
/* 1177 */     return false;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsAnyIgnoreCase(CharSequence cs, CharSequence... searchCharSequences)
/*      */   {
/* 1210 */     return containsAny(StringUtils::containsIgnoreCase, cs, searchCharSequences);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsIgnoreCase(CharSequence str, CharSequence searchStr)
/*      */   {
/* 1238 */     if (str == null || searchStr == null) {
/* 1239 */       return false;
/*      */     }
/* 1241 */     int len = searchStr.length();
/* 1242 */     int max = str.length() - len;
/* 1243 */     for (int i = 0; i <= max; i++) {
/* 1244 */       if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {
/* 1245 */         return true;
/*      */       }
/*      */     }
/* 1248 */     return false;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsNone(CharSequence cs, char... searchChars)
/*      */   {
/* 1275 */     if (cs == null || searchChars == null) {
/* 1276 */       return true;
/*      */     }
/* 1278 */     int csLen = cs.length();
/* 1279 */     int csLast = csLen - 1;
/* 1280 */     int searchLen = searchChars.length;
/* 1281 */     int searchLast = searchLen - 1;
/* 1282 */     for (int i = 0; i < csLen; i++) {
/* 1283 */       char ch = cs.charAt(i);
/* 1284 */       for (int j = 0; j < searchLen; j++) {
/* 1285 */         if (searchChars[j] == ch) {
/* 1286 */           if (Character.isHighSurrogate(ch)) {
/* 1287 */             if (j == searchLast)
/*      */             {
/* 1289 */               return false;
/*      */             }
/* 1291 */             if (i < csLast && searchChars[(j + 1)] == cs.charAt(i + 1)) {
/* 1292 */               return false;
/*      */             }
/*      */           }
/*      */           else {
/* 1296 */             return false;
/*      */           }
/*      */         }
/*      */       }
/*      */     }
/* 1301 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsNone(CharSequence cs, String invalidChars)
/*      */   {
/* 1328 */     if (invalidChars == null) {
/* 1329 */       return true;
/*      */     }
/* 1331 */     return containsNone(cs, invalidChars.toCharArray());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsOnly(CharSequence cs, char... valid)
/*      */   {
/* 1358 */     if (valid == null || cs == null) {
/* 1359 */       return false;
/*      */     }
/* 1361 */     if (cs.length() == 0) {
/* 1362 */       return true;
/*      */     }
/* 1364 */     if (valid.length == 0) {
/* 1365 */       return false;
/*      */     }
/* 1367 */     return indexOfAnyBut(cs, valid) == -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsOnly(CharSequence cs, String validChars)
/*      */   {
/* 1394 */     if (cs == null || validChars == null) {
/* 1395 */       return false;
/*      */     }
/* 1397 */     return containsOnly(cs, validChars.toCharArray());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean containsWhitespace(CharSequence seq)
/*      */   {
/* 1412 */     if (isEmpty(seq)) {
/* 1413 */       return false;
/*      */     }
/* 1415 */     int strLen = seq.length();
/* 1416 */     for (int i = 0; i < strLen; i++) {
/* 1417 */       if (Character.isWhitespace(seq.charAt(i))) {
/* 1418 */         return true;
/*      */       }
/*      */     }
/* 1421 */     return false;
/*      */   }
/*      */   
/*      */   private static void convertRemainingAccentCharacters(StringBuilder decomposed) {
/* 1425 */     for (int i = 0; i < decomposed.length(); i++) {
/* 1426 */       if (decomposed.charAt(i) == 'Ł') {
/* 1427 */         decomposed.setCharAt(i, 'L');
/* 1428 */       } else if (decomposed.charAt(i) == 'ł') {
/* 1429 */         decomposed.setCharAt(i, 'l');
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int countMatches(CharSequence str, char ch)
/*      */   {
/* 1454 */     if (isEmpty(str)) {
/* 1455 */       return 0;
/*      */     }
/* 1457 */     int count = 0;
/*      */     
/* 1459 */     for (int i = 0; i < str.length(); i++) {
/* 1460 */       if (ch == str.charAt(i)) {
/* 1461 */         count++;
/*      */       }
/*      */     }
/* 1464 */     return count;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int countMatches(CharSequence str, CharSequence sub)
/*      */   {
/* 1490 */     if (isEmpty(str) || isEmpty(sub)) {
/* 1491 */       return 0;
/*      */     }
/* 1493 */     int count = 0;
/* 1494 */     int idx = 0;
/* 1495 */     while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != -1) {
/* 1496 */       count++;
/* 1497 */       idx += sub.length();
/*      */     }
/* 1499 */     return count;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T extends CharSequence> T defaultIfBlank(T str, T defaultStr)
/*      */   {
/* 1523 */     return isBlank(str) ? defaultStr : str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T extends CharSequence> T defaultIfEmpty(T str, T defaultStr)
/*      */   {
/* 1545 */     return isEmpty(str) ? defaultStr : str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String defaultString(String str)
/*      */   {
/* 1565 */     return defaultString(str, "");
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String defaultString(String str, String defaultStr)
/*      */   {
/* 1586 */     return str == null ? defaultStr : str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String deleteWhitespace(String str)
/*      */   {
/* 1604 */     if (isEmpty(str)) {
/* 1605 */       return str;
/*      */     }
/* 1607 */     int sz = str.length();
/* 1608 */     char[] chs = new char[sz];
/* 1609 */     int count = 0;
/* 1610 */     for (int i = 0; i < sz; i++) {
/* 1611 */       if (!Character.isWhitespace(str.charAt(i))) {
/* 1612 */         chs[(count++)] = str.charAt(i);
/*      */       }
/*      */     }
/* 1615 */     if (count == sz) {
/* 1616 */       return str;
/*      */     }
/* 1618 */     if (count == 0) {
/* 1619 */       return "";
/*      */     }
/* 1621 */     return new String(chs, 0, count);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String difference(String str1, String str2)
/*      */   {
/* 1653 */     if (str1 == null) {
/* 1654 */       return str2;
/*      */     }
/* 1656 */     if (str2 == null) {
/* 1657 */       return str1;
/*      */     }
/* 1659 */     int at = indexOfDifference(str1, str2);
/* 1660 */     if (at == -1) {
/* 1661 */       return "";
/*      */     }
/* 1663 */     return str2.substring(at);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean endsWith(CharSequence str, CharSequence suffix)
/*      */   {
/* 1691 */     return endsWith(str, suffix, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static boolean endsWith(CharSequence str, CharSequence suffix, boolean ignoreCase)
/*      */   {
/* 1706 */     if (str == null || suffix == null) {
/* 1707 */       return str == suffix;
/*      */     }
/* 1709 */     if (suffix.length() > str.length()) {
/* 1710 */       return false;
/*      */     }
/* 1712 */     int strOffset = str.length() - suffix.length();
/* 1713 */     return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean endsWithAny(CharSequence sequence, CharSequence... searchStrings)
/*      */   {
/* 1738 */     if (isEmpty(sequence) || ArrayUtils.isEmpty(searchStrings)) {
/* 1739 */       return false;
/*      */     }
/* 1741 */     for (CharSequence searchString : searchStrings) {
/* 1742 */       if (endsWith(sequence, searchString)) {
/* 1743 */         return true;
/*      */       }
/*      */     }
/* 1746 */     return false;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean endsWithIgnoreCase(CharSequence str, CharSequence suffix)
/*      */   {
/* 1773 */     return endsWith(str, suffix, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean equals(CharSequence cs1, CharSequence cs2)
/*      */   {
/* 1799 */     if (cs1 == cs2) {
/* 1800 */       return true;
/*      */     }
/* 1802 */     if (cs1 == null || cs2 == null) {
/* 1803 */       return false;
/*      */     }
/* 1805 */     if (cs1.length() != cs2.length()) {
/* 1806 */       return false;
/*      */     }
/* 1808 */     if ((cs1 instanceof String) && (cs2 instanceof String)) {
/* 1809 */       return cs1.equals(cs2);
/*      */     }
/*      */     
/* 1812 */     int length = cs1.length();
/* 1813 */     for (int i = 0; i < length; i++) {
/* 1814 */       if (cs1.charAt(i) != cs2.charAt(i)) {
/* 1815 */         return false;
/*      */       }
/*      */     }
/* 1818 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean equalsAny(CharSequence string, CharSequence... searchStrings)
/*      */   {
/* 1841 */     if (ArrayUtils.isNotEmpty(searchStrings)) {
/* 1842 */       for (CharSequence next : searchStrings) {
/* 1843 */         if (equals(string, next)) {
/* 1844 */           return true;
/*      */         }
/*      */       }
/*      */     }
/* 1848 */     return false;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean equalsAnyIgnoreCase(CharSequence string, CharSequence... searchStrings)
/*      */   {
/* 1871 */     if (ArrayUtils.isNotEmpty(searchStrings)) {
/* 1872 */       for (CharSequence next : searchStrings) {
/* 1873 */         if (equalsIgnoreCase(string, next)) {
/* 1874 */           return true;
/*      */         }
/*      */       }
/*      */     }
/* 1878 */     return false;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean equalsIgnoreCase(CharSequence cs1, CharSequence cs2)
/*      */   {
/* 1903 */     if (cs1 == cs2) {
/* 1904 */       return true;
/*      */     }
/* 1906 */     if (cs1 == null || cs2 == null) {
/* 1907 */       return false;
/*      */     }
/* 1909 */     if (cs1.length() != cs2.length()) {
/* 1910 */       return false;
/*      */     }
/* 1912 */     return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, cs1.length());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @SafeVarargs
/*      */   public static <T extends CharSequence> T firstNonBlank(T... values)
/*      */   {
/* 1942 */     if (values != null) {
/* 1943 */       for (T val : values) {
/* 1944 */         if (isNotBlank(val)) {
/* 1945 */           return val;
/*      */         }
/*      */       }
/*      */     }
/* 1949 */     return null;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @SafeVarargs
/*      */   public static <T extends CharSequence> T firstNonEmpty(T... values)
/*      */   {
/* 1977 */     if (values != null) {
/* 1978 */       for (T val : values) {
/* 1979 */         if (isNotEmpty(val)) {
/* 1980 */           return val;
/*      */         }
/*      */       }
/*      */     }
/* 1984 */     return null;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] getBytes(String string, Charset charset)
/*      */   {
/* 1997 */     return string == null ? ArrayUtils.EMPTY_BYTE_ARRAY : string.getBytes(Charsets.toCharset(charset));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static byte[] getBytes(String string, String charset)
/*      */     throws UnsupportedEncodingException
/*      */   {
/* 2011 */     return string == null ? ArrayUtils.EMPTY_BYTE_ARRAY : string.getBytes(Charsets.toCharsetName(charset));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String getCommonPrefix(String... strs)
/*      */   {
/* 2048 */     if (ArrayUtils.isEmpty(strs)) {
/* 2049 */       return "";
/*      */     }
/* 2051 */     int smallestIndexOfDiff = indexOfDifference(strs);
/* 2052 */     if (smallestIndexOfDiff == -1)
/*      */     {
/* 2054 */       if (strs[0] == null) {
/* 2055 */         return "";
/*      */       }
/* 2057 */       return strs[0]; }
/* 2058 */     if (smallestIndexOfDiff == 0)
/*      */     {
/* 2060 */       return "";
/*      */     }
/*      */     
/* 2063 */     return strs[0].substring(0, smallestIndexOfDiff);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String getDigits(String str)
/*      */   {
/* 2090 */     if (isEmpty(str)) {
/* 2091 */       return str;
/*      */     }
/* 2093 */     int sz = str.length();
/* 2094 */     StringBuilder strDigits = new StringBuilder(sz);
/* 2095 */     for (int i = 0; i < sz; i++) {
/* 2096 */       char tempChar = str.charAt(i);
/* 2097 */       if (Character.isDigit(tempChar)) {
/* 2098 */         strDigits.append(tempChar);
/*      */       }
/*      */     }
/* 2101 */     return strDigits.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static int getFuzzyDistance(CharSequence term, CharSequence query, Locale locale)
/*      */   {
/* 2135 */     if (term == null || query == null)
/* 2136 */       throw new IllegalArgumentException("Strings must not be null");
/* 2137 */     if (locale == null) {
/* 2138 */       throw new IllegalArgumentException("Locale must not be null");
/*      */     }
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 2145 */     String termLowerCase = term.toString().toLowerCase(locale);
/* 2146 */     String queryLowerCase = query.toString().toLowerCase(locale);
/*      */     
/*      */ 
/* 2149 */     int score = 0;
/*      */     
/*      */ 
/*      */ 
/* 2153 */     int termIndex = 0;
/*      */     
/*      */ 
/* 2156 */     int previousMatchingCharacterIndex = Integer.MIN_VALUE;
/*      */     
/* 2158 */     for (int queryIndex = 0; queryIndex < queryLowerCase.length(); queryIndex++) {
/* 2159 */       char queryChar = queryLowerCase.charAt(queryIndex);
/*      */       
/* 2161 */       boolean termCharacterMatchFound = false;
/* 2162 */       for (; termIndex < termLowerCase.length() && !termCharacterMatchFound; termIndex++) {
/* 2163 */         char termChar = termLowerCase.charAt(termIndex);
/*      */         
/* 2165 */         if (queryChar != termChar)
/*      */           continue;
/* 2167 */         score++;
/*      */         
/*      */ 
/*      */ 
/* 2171 */         if (previousMatchingCharacterIndex + 1 == termIndex) {
/* 2172 */           score += 2;
/*      */         }
/*      */         
/* 2175 */         previousMatchingCharacterIndex = termIndex;
/*      */         
/*      */ 
/*      */ 
/* 2179 */         termCharacterMatchFound = true;
/*      */       }
/*      */     }
/*      */     
/*      */ 
/* 2184 */     return score;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T extends CharSequence> T getIfBlank(T str, Supplier<T> defaultSupplier)
/*      */   {
/* 2213 */     return isBlank(str) ? defaultSupplier == null ? null : defaultSupplier.get() : str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T extends CharSequence> T getIfEmpty(T str, Supplier<T> defaultSupplier)
/*      */   {
/* 2241 */     return isEmpty(str) ? defaultSupplier == null ? null : defaultSupplier.get() : str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static double getJaroWinklerDistance(CharSequence first, CharSequence second)
/*      */   {
/* 2281 */     double DEFAULT_SCALING_FACTOR = 0.1D;
/*      */     
/* 2283 */     if (first == null || second == null) {
/* 2284 */       throw new IllegalArgumentException("Strings must not be null");
/*      */     }
/*      */     
/* 2287 */     int[] mtp = matches(first, second);
/* 2288 */     double m = mtp[0];
/* 2289 */     if (m == 0.0D) {
/* 2290 */       return 0.0D;
/*      */     }
/* 2292 */     double j = (m / first.length() + m / second.length() + (m - mtp[1]) / m) / 3.0D;
/* 2293 */     double jw = j < 0.7D ? j : j + Math.min(0.1D, 1.0D / mtp[3]) * mtp[2] * (1.0D - j);
/* 2294 */     return Math.round(jw * 100.0D) / 100.0D;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static int getLevenshteinDistance(CharSequence s, CharSequence t)
/*      */   {
/* 2334 */     if (s == null || t == null) {
/* 2335 */       throw new IllegalArgumentException("Strings must not be null");
/*      */     }
/*      */     
/* 2338 */     int n = s.length();
/* 2339 */     int m = t.length();
/*      */     
/* 2341 */     if (n == 0)
/* 2342 */       return m;
/* 2343 */     if (m == 0) {
/* 2344 */       return n;
/*      */     }
/*      */     
/* 2347 */     if (n > m)
/*      */     {
/* 2349 */       CharSequence tmp = s;
/* 2350 */       s = t;
/* 2351 */       t = tmp;
/* 2352 */       n = m;
/* 2353 */       m = t.length();
/*      */     }
/*      */     
/* 2356 */     int[] p = new int[n + 1];
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */     int i;
/*      */     
/*      */ 
/*      */ 
/*      */ 
/* 2366 */     for (i = 0; i <= n; i++) {
/* 2367 */       p[i] = i;
/*      */     }
/*      */     
/* 2370 */     for (int j = 1; j <= m; j++) {
/* 2371 */       int upper_left = p[0];
/* 2372 */       char t_j = t.charAt(j - 1);
/* 2373 */       p[0] = j;
/*      */       
/* 2375 */       for (i = 1; i <= n; i++) {
/* 2376 */         int upper = p[i];
/* 2377 */         int cost = s.charAt(i - 1) == t_j ? 0 : 1;
/*      */         
/* 2379 */         p[i] = Math.min(Math.min(p[(i - 1)] + 1, p[i] + 1), upper_left + cost);
/* 2380 */         upper_left = upper;
/*      */       }
/*      */     }
/*      */     
/* 2384 */     return p[n];
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static int getLevenshteinDistance(CharSequence s, CharSequence t, int threshold)
/*      */   {
/* 2424 */     if (s == null || t == null) {
/* 2425 */       throw new IllegalArgumentException("Strings must not be null");
/*      */     }
/* 2427 */     if (threshold < 0) {
/* 2428 */       throw new IllegalArgumentException("Threshold must not be negative");
/*      */     }
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 2475 */     int n = s.length();
/* 2476 */     int m = t.length();
/*      */     
/*      */ 
/* 2479 */     if (n == 0)
/* 2480 */       return m <= threshold ? m : -1;
/* 2481 */     if (m == 0)
/* 2482 */       return n <= threshold ? n : -1;
/* 2483 */     if (Math.abs(n - m) > threshold)
/*      */     {
/* 2485 */       return -1;
/*      */     }
/*      */     
/* 2488 */     if (n > m)
/*      */     {
/* 2490 */       CharSequence tmp = s;
/* 2491 */       s = t;
/* 2492 */       t = tmp;
/* 2493 */       n = m;
/* 2494 */       m = t.length();
/*      */     }
/*      */     
/* 2497 */     int[] p = new int[n + 1];
/* 2498 */     int[] d = new int[n + 1];
/*      */     
/*      */ 
/*      */ 
/* 2502 */     int boundary = Math.min(n, threshold) + 1;
/* 2503 */     for (int i = 0; i < boundary; i++) {
/* 2504 */       p[i] = i;
/*      */     }
/*      */     
/*      */ 
/* 2508 */     Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);
/* 2509 */     Arrays.fill(d, Integer.MAX_VALUE);
/*      */     
/*      */ 
/* 2512 */     for (int j = 1; j <= m; j++) {
/* 2513 */       char t_j = t.charAt(j - 1);
/* 2514 */       d[0] = j;
/*      */       
/*      */ 
/* 2517 */       int min = Math.max(1, j - threshold);
/* 2518 */       int max = j > Integer.MAX_VALUE - threshold ? n : Math.min(n, j + threshold);
/*      */       
/*      */ 
/* 2521 */       if (min > max) {
/* 2522 */         return -1;
/*      */       }
/*      */       
/*      */ 
/* 2526 */       if (min > 1) {
/* 2527 */         d[(min - 1)] = Integer.MAX_VALUE;
/*      */       }
/*      */       
/*      */ 
/* 2531 */       for (int i = min; i <= max; i++) {
/* 2532 */         if (s.charAt(i - 1) == t_j)
/*      */         {
/* 2534 */           d[i] = p[(i - 1)];
/*      */         }
/*      */         else {
/* 2537 */           d[i] = (1 + Math.min(Math.min(d[(i - 1)], p[i]), p[(i - 1)]));
/*      */         }
/*      */       }
/*      */       
/*      */ 
/* 2542 */       int[] _d = p;
/* 2543 */       p = d;
/* 2544 */       d = _d;
/*      */     }
/*      */     
/*      */ 
/*      */ 
/* 2549 */     if (p[n] <= threshold) {
/* 2550 */       return p[n];
/*      */     }
/* 2552 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(CharSequence seq, CharSequence searchSeq)
/*      */   {
/* 2580 */     if (seq == null || searchSeq == null) {
/* 2581 */       return -1;
/*      */     }
/* 2583 */     return CharSequenceUtils.indexOf(seq, searchSeq, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(CharSequence seq, CharSequence searchSeq, int startPos)
/*      */   {
/* 2620 */     if (seq == null || searchSeq == null) {
/* 2621 */       return -1;
/*      */     }
/* 2623 */     return CharSequenceUtils.indexOf(seq, searchSeq, startPos);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(CharSequence seq, int searchChar)
/*      */   {
/* 2664 */     if (isEmpty(seq)) {
/* 2665 */       return -1;
/*      */     }
/* 2667 */     return CharSequenceUtils.indexOf(seq, searchChar, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOf(CharSequence seq, int searchChar, int startPos)
/*      */   {
/* 2724 */     if (isEmpty(seq)) {
/* 2725 */       return -1;
/*      */     }
/* 2727 */     return CharSequenceUtils.indexOf(seq, searchChar, startPos);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOfAny(CharSequence cs, char... searchChars)
/*      */   {
/* 2754 */     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
/* 2755 */       return -1;
/*      */     }
/* 2757 */     int csLen = cs.length();
/* 2758 */     int csLast = csLen - 1;
/* 2759 */     int searchLen = searchChars.length;
/* 2760 */     int searchLast = searchLen - 1;
/* 2761 */     for (int i = 0; i < csLen; i++) {
/* 2762 */       char ch = cs.charAt(i);
/* 2763 */       for (int j = 0; j < searchLen; j++) {
/* 2764 */         if (searchChars[j] == ch) {
/* 2765 */           if (i < csLast && j < searchLast && Character.isHighSurrogate(ch))
/*      */           {
/* 2767 */             if (searchChars[(j + 1)] == cs.charAt(i + 1)) {
/* 2768 */               return i;
/*      */             }
/*      */           } else {
/* 2771 */             return i;
/*      */           }
/*      */         }
/*      */       }
/*      */     }
/* 2776 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOfAny(CharSequence str, CharSequence... searchStrs)
/*      */   {
/* 2807 */     if (str == null || searchStrs == null) {
/* 2808 */       return -1;
/*      */     }
/*      */     
/*      */ 
/* 2812 */     int ret = Integer.MAX_VALUE;
/*      */     
/* 2814 */     int tmp = 0;
/* 2815 */     for (CharSequence search : searchStrs) {
/* 2816 */       if (search == null) {
/*      */         continue;
/*      */       }
/* 2819 */       tmp = CharSequenceUtils.indexOf(str, search, 0);
/* 2820 */       if (tmp == -1 || 
/*      */       
/*      */ 
/*      */ 
/* 2824 */         tmp >= ret) continue;
/* 2825 */       ret = tmp;
/*      */     }
/*      */     
/*      */ 
/* 2829 */     return ret == Integer.MAX_VALUE ? -1 : ret;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOfAny(CharSequence cs, String searchChars)
/*      */   {
/* 2856 */     if (isEmpty(cs) || isEmpty(searchChars)) {
/* 2857 */       return -1;
/*      */     }
/* 2859 */     return indexOfAny(cs, searchChars.toCharArray());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOfAnyBut(CharSequence cs, char... searchChars)
/*      */   {
/* 2887 */     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
/* 2888 */       return -1;
/*      */     }
/* 2890 */     int csLen = cs.length();
/* 2891 */     int csLast = csLen - 1;
/* 2892 */     int searchLen = searchChars.length;
/* 2893 */     int searchLast = searchLen - 1;
/*      */     label127:
/* 2895 */     for (int i = 0; i < csLen; i++) {
/* 2896 */       char ch = cs.charAt(i);
/* 2897 */       for (int j = 0; j < searchLen; j++) {
/* 2898 */         if (searchChars[j] == ch && 
/* 2899 */           i >= csLast || j >= searchLast || !Character.isHighSurrogate(ch) || 
/* 2900 */           searchChars[(j + 1)] == cs.charAt(i + 1)) {
/*      */           break label127;
/*      */         }
/*      */       }
/*      */       
/*      */ 
/*      */ 
/*      */ 
/* 2908 */       return i;
/*      */     }
/* 2910 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOfAnyBut(CharSequence seq, CharSequence searchChars)
/*      */   {
/* 2937 */     if (isEmpty(seq) || isEmpty(searchChars)) {
/* 2938 */       return -1;
/*      */     }
/* 2940 */     int strLen = seq.length();
/* 2941 */     for (int i = 0; i < strLen; i++) {
/* 2942 */       char ch = seq.charAt(i);
/* 2943 */       boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;
/* 2944 */       if (i + 1 < strLen && Character.isHighSurrogate(ch)) {
/* 2945 */         char ch2 = seq.charAt(i + 1);
/* 2946 */         if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {
/* 2947 */           return i;
/*      */         }
/* 2949 */       } else if (!chFound) {
/* 2950 */         return i;
/*      */       }
/*      */     }
/* 2953 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOfDifference(CharSequence... css)
/*      */   {
/* 2989 */     if (ArrayUtils.getLength(css) <= 1) {
/* 2990 */       return -1;
/*      */     }
/* 2992 */     boolean anyStringNull = false;
/* 2993 */     boolean allStringsNull = true;
/* 2994 */     int arrayLen = css.length;
/* 2995 */     int shortestStrLen = Integer.MAX_VALUE;
/* 2996 */     int longestStrLen = 0;
/*      */     
/*      */ 
/*      */ 
/*      */ 
/* 3001 */     for (CharSequence cs : css) {
/* 3002 */       if (cs == null) {
/* 3003 */         anyStringNull = true;
/* 3004 */         shortestStrLen = 0;
/*      */       } else {
/* 3006 */         allStringsNull = false;
/* 3007 */         shortestStrLen = Math.min(cs.length(), shortestStrLen);
/* 3008 */         longestStrLen = Math.max(cs.length(), longestStrLen);
/*      */       }
/*      */     }
/*      */     
/*      */ 
/* 3013 */     if (allStringsNull || longestStrLen == 0 && !anyStringNull) {
/* 3014 */       return -1;
/*      */     }
/*      */     
/*      */ 
/* 3018 */     if (shortestStrLen == 0) {
/* 3019 */       return 0;
/*      */     }
/*      */     
/*      */ 
/* 3023 */     int firstDiff = -1;
/* 3024 */     for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {
/* 3025 */       char comparisonChar = css[0].charAt(stringPos);
/* 3026 */       for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
/* 3027 */         if (css[arrayPos].charAt(stringPos) != comparisonChar) {
/* 3028 */           firstDiff = stringPos;
/* 3029 */           break;
/*      */         }
/*      */       }
/* 3032 */       if (firstDiff != -1) {
/*      */         break;
/*      */       }
/*      */     }
/*      */     
/* 3037 */     if (firstDiff == -1 && shortestStrLen != longestStrLen)
/*      */     {
/*      */ 
/*      */ 
/* 3041 */       return shortestStrLen;
/*      */     }
/* 3043 */     return firstDiff;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOfDifference(CharSequence cs1, CharSequence cs2)
/*      */   {
/* 3072 */     if (cs1 == cs2) {
/* 3073 */       return -1;
/*      */     }
/* 3075 */     if (cs1 == null || cs2 == null) {
/* 3076 */       return 0;
/*      */     }
/*      */     int i;
/* 3079 */     for (i = 0; i < cs1.length() && i < cs2.length(); i++) {
/* 3080 */       if (cs1.charAt(i) != cs2.charAt(i)) {
/*      */         break;
/*      */       }
/*      */     }
/* 3084 */     if (i < cs2.length() || i < cs1.length()) {
/* 3085 */       return i;
/*      */     }
/* 3087 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr)
/*      */   {
/* 3116 */     return indexOfIgnoreCase(str, searchStr, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int indexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos)
/*      */   {
/* 3152 */     if (str == null || searchStr == null) {
/* 3153 */       return -1;
/*      */     }
/* 3155 */     if (startPos < 0) {
/* 3156 */       startPos = 0;
/*      */     }
/* 3158 */     int endLimit = str.length() - searchStr.length() + 1;
/* 3159 */     if (startPos > endLimit) {
/* 3160 */       return -1;
/*      */     }
/* 3162 */     if (searchStr.length() == 0) {
/* 3163 */       return startPos;
/*      */     }
/* 3165 */     for (int i = startPos; i < endLimit; i++) {
/* 3166 */       if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {
/* 3167 */         return i;
/*      */       }
/*      */     }
/* 3170 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAllBlank(CharSequence... css)
/*      */   {
/* 3195 */     if (ArrayUtils.isEmpty(css)) {
/* 3196 */       return true;
/*      */     }
/* 3198 */     for (CharSequence cs : css) {
/* 3199 */       if (isNotBlank(cs)) {
/* 3200 */         return false;
/*      */       }
/*      */     }
/* 3203 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAllEmpty(CharSequence... css)
/*      */   {
/* 3226 */     if (ArrayUtils.isEmpty(css)) {
/* 3227 */       return true;
/*      */     }
/* 3229 */     for (CharSequence cs : css) {
/* 3230 */       if (isNotEmpty(cs)) {
/* 3231 */         return false;
/*      */       }
/*      */     }
/* 3234 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAllLowerCase(CharSequence cs)
/*      */   {
/* 3260 */     if (isEmpty(cs)) {
/* 3261 */       return false;
/*      */     }
/* 3263 */     int sz = cs.length();
/* 3264 */     for (int i = 0; i < sz; i++) {
/* 3265 */       if (!Character.isLowerCase(cs.charAt(i))) {
/* 3266 */         return false;
/*      */       }
/*      */     }
/* 3269 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAllUpperCase(CharSequence cs)
/*      */   {
/* 3295 */     if (isEmpty(cs)) {
/* 3296 */       return false;
/*      */     }
/* 3298 */     int sz = cs.length();
/* 3299 */     for (int i = 0; i < sz; i++) {
/* 3300 */       if (!Character.isUpperCase(cs.charAt(i))) {
/* 3301 */         return false;
/*      */       }
/*      */     }
/* 3304 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAlpha(CharSequence cs)
/*      */   {
/* 3328 */     if (isEmpty(cs)) {
/* 3329 */       return false;
/*      */     }
/* 3331 */     int sz = cs.length();
/* 3332 */     for (int i = 0; i < sz; i++) {
/* 3333 */       if (!Character.isLetter(cs.charAt(i))) {
/* 3334 */         return false;
/*      */       }
/*      */     }
/* 3337 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAlphanumeric(CharSequence cs)
/*      */   {
/* 3363 */     if (isEmpty(cs)) {
/* 3364 */       return false;
/*      */     }
/* 3366 */     int sz = cs.length();
/* 3367 */     for (int i = 0; i < sz; i++) {
/* 3368 */       if (!Character.isLetterOrDigit(cs.charAt(i))) {
/* 3369 */         return false;
/*      */       }
/*      */     }
/* 3372 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAlphanumericSpace(CharSequence cs)
/*      */   {
/* 3398 */     if (cs == null) {
/* 3399 */       return false;
/*      */     }
/* 3401 */     int sz = cs.length();
/* 3402 */     for (int i = 0; i < sz; i++) {
/* 3403 */       char nowChar = cs.charAt(i);
/* 3404 */       if (nowChar != ' ' && !Character.isLetterOrDigit(nowChar)) {
/* 3405 */         return false;
/*      */       }
/*      */     }
/* 3408 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAlphaSpace(CharSequence cs)
/*      */   {
/* 3434 */     if (cs == null) {
/* 3435 */       return false;
/*      */     }
/* 3437 */     int sz = cs.length();
/* 3438 */     for (int i = 0; i < sz; i++) {
/* 3439 */       char nowChar = cs.charAt(i);
/* 3440 */       if (nowChar != ' ' && !Character.isLetter(nowChar)) {
/* 3441 */         return false;
/*      */       }
/*      */     }
/* 3444 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAnyBlank(CharSequence... css)
/*      */   {
/* 3471 */     if (ArrayUtils.isEmpty(css)) {
/* 3472 */       return false;
/*      */     }
/* 3474 */     for (CharSequence cs : css) {
/* 3475 */       if (isBlank(cs)) {
/* 3476 */         return true;
/*      */       }
/*      */     }
/* 3479 */     return false;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAnyEmpty(CharSequence... css)
/*      */   {
/* 3503 */     if (ArrayUtils.isEmpty(css)) {
/* 3504 */       return false;
/*      */     }
/* 3506 */     for (CharSequence cs : css) {
/* 3507 */       if (isEmpty(cs)) {
/* 3508 */         return true;
/*      */       }
/*      */     }
/* 3511 */     return false;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isAsciiPrintable(CharSequence cs)
/*      */   {
/* 3541 */     if (cs == null) {
/* 3542 */       return false;
/*      */     }
/* 3544 */     int sz = cs.length();
/* 3545 */     for (int i = 0; i < sz; i++) {
/* 3546 */       if (!CharUtils.isAsciiPrintable(cs.charAt(i))) {
/* 3547 */         return false;
/*      */       }
/*      */     }
/* 3550 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isBlank(CharSequence cs)
/*      */   {
/* 3572 */     int strLen = length(cs);
/* 3573 */     if (strLen == 0) {
/* 3574 */       return true;
/*      */     }
/* 3576 */     for (int i = 0; i < strLen; i++) {
/* 3577 */       if (!Character.isWhitespace(cs.charAt(i))) {
/* 3578 */         return false;
/*      */       }
/*      */     }
/* 3581 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(CharSequence cs)
/*      */   {
/* 3604 */     return cs == null || cs.length() == 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isMixedCase(CharSequence cs)
/*      */   {
/* 3630 */     if (isEmpty(cs) || cs.length() == 1) {
/* 3631 */       return false;
/*      */     }
/* 3633 */     boolean containsUppercase = false;
/* 3634 */     boolean containsLowercase = false;
/* 3635 */     int sz = cs.length();
/* 3636 */     for (int i = 0; i < sz; i++) {
/* 3637 */       if (containsUppercase && containsLowercase)
/* 3638 */         return true;
/* 3639 */       if (Character.isUpperCase(cs.charAt(i))) {
/* 3640 */         containsUppercase = true;
/* 3641 */       } else if (Character.isLowerCase(cs.charAt(i))) {
/* 3642 */         containsLowercase = true;
/*      */       }
/*      */     }
/* 3645 */     return containsUppercase && containsLowercase;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNoneBlank(CharSequence... css)
/*      */   {
/* 3672 */     return !isAnyBlank(css);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNoneEmpty(CharSequence... css)
/*      */   {
/* 3696 */     return !isAnyEmpty(css);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotBlank(CharSequence cs)
/*      */   {
/* 3719 */     return !isBlank(cs);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNotEmpty(CharSequence cs)
/*      */   {
/* 3738 */     return !isEmpty(cs);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNumeric(CharSequence cs)
/*      */   {
/* 3773 */     if (isEmpty(cs)) {
/* 3774 */       return false;
/*      */     }
/* 3776 */     int sz = cs.length();
/* 3777 */     for (int i = 0; i < sz; i++) {
/* 3778 */       if (!Character.isDigit(cs.charAt(i))) {
/* 3779 */         return false;
/*      */       }
/*      */     }
/* 3782 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isNumericSpace(CharSequence cs)
/*      */   {
/* 3812 */     if (cs == null) {
/* 3813 */       return false;
/*      */     }
/* 3815 */     int sz = cs.length();
/* 3816 */     for (int i = 0; i < sz; i++) {
/* 3817 */       char nowChar = cs.charAt(i);
/* 3818 */       if (nowChar != ' ' && !Character.isDigit(nowChar)) {
/* 3819 */         return false;
/*      */       }
/*      */     }
/* 3822 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isWhitespace(CharSequence cs)
/*      */   {
/* 3848 */     if (cs == null) {
/* 3849 */       return false;
/*      */     }
/* 3851 */     int sz = cs.length();
/* 3852 */     for (int i = 0; i < sz; i++) {
/* 3853 */       if (!Character.isWhitespace(cs.charAt(i))) {
/* 3854 */         return false;
/*      */       }
/*      */     }
/* 3857 */     return true;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(boolean[] array, char delimiter)
/*      */   {
/* 3885 */     if (array == null) {
/* 3886 */       return null;
/*      */     }
/* 3888 */     return join(array, delimiter, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(boolean[] array, char delimiter, int startIndex, int endIndex)
/*      */   {
/* 3922 */     if (array == null) {
/* 3923 */       return null;
/*      */     }
/* 3925 */     if (endIndex - startIndex <= 0) {
/* 3926 */       return "";
/*      */     }
/* 3928 */     StringJoiner joiner = newStringJoiner(delimiter);
/* 3929 */     for (int i = startIndex; i < endIndex; i++) {
/* 3930 */       joiner.add(String.valueOf(array[i]));
/*      */     }
/* 3932 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(byte[] array, char delimiter)
/*      */   {
/* 3961 */     if (array == null) {
/* 3962 */       return null;
/*      */     }
/* 3964 */     return join(array, delimiter, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(byte[] array, char delimiter, int startIndex, int endIndex)
/*      */   {
/* 3999 */     if (array == null) {
/* 4000 */       return null;
/*      */     }
/* 4002 */     if (endIndex - startIndex <= 0) {
/* 4003 */       return "";
/*      */     }
/* 4005 */     StringJoiner joiner = newStringJoiner(delimiter);
/* 4006 */     for (int i = startIndex; i < endIndex; i++) {
/* 4007 */       joiner.add(String.valueOf(array[i]));
/*      */     }
/* 4009 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(char[] array, char delimiter)
/*      */   {
/* 4038 */     if (array == null) {
/* 4039 */       return null;
/*      */     }
/* 4041 */     return join(array, delimiter, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(char[] array, char delimiter, int startIndex, int endIndex)
/*      */   {
/* 4076 */     if (array == null) {
/* 4077 */       return null;
/*      */     }
/* 4079 */     if (endIndex - startIndex <= 0) {
/* 4080 */       return "";
/*      */     }
/* 4082 */     StringJoiner joiner = newStringJoiner(delimiter);
/* 4083 */     for (int i = startIndex; i < endIndex; i++) {
/* 4084 */       joiner.add(String.valueOf(array[i]));
/*      */     }
/* 4086 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(double[] array, char delimiter)
/*      */   {
/* 4115 */     if (array == null) {
/* 4116 */       return null;
/*      */     }
/* 4118 */     return join(array, delimiter, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(double[] array, char delimiter, int startIndex, int endIndex)
/*      */   {
/* 4153 */     if (array == null) {
/* 4154 */       return null;
/*      */     }
/* 4156 */     if (endIndex - startIndex <= 0) {
/* 4157 */       return "";
/*      */     }
/* 4159 */     StringJoiner joiner = newStringJoiner(delimiter);
/* 4160 */     for (int i = startIndex; i < endIndex; i++) {
/* 4161 */       joiner.add(String.valueOf(array[i]));
/*      */     }
/* 4163 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(float[] array, char delimiter)
/*      */   {
/* 4192 */     if (array == null) {
/* 4193 */       return null;
/*      */     }
/* 4195 */     return join(array, delimiter, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(float[] array, char delimiter, int startIndex, int endIndex)
/*      */   {
/* 4230 */     if (array == null) {
/* 4231 */       return null;
/*      */     }
/* 4233 */     if (endIndex - startIndex <= 0) {
/* 4234 */       return "";
/*      */     }
/* 4236 */     StringJoiner joiner = newStringJoiner(delimiter);
/* 4237 */     for (int i = startIndex; i < endIndex; i++) {
/* 4238 */       joiner.add(String.valueOf(array[i]));
/*      */     }
/* 4240 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(int[] array, char separator)
/*      */   {
/* 4269 */     if (array == null) {
/* 4270 */       return null;
/*      */     }
/* 4272 */     return join(array, separator, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(int[] array, char delimiter, int startIndex, int endIndex)
/*      */   {
/* 4307 */     if (array == null) {
/* 4308 */       return null;
/*      */     }
/* 4310 */     if (endIndex - startIndex <= 0) {
/* 4311 */       return "";
/*      */     }
/* 4313 */     StringJoiner joiner = newStringJoiner(delimiter);
/* 4314 */     for (int i = startIndex; i < endIndex; i++) {
/* 4315 */       joiner.add(String.valueOf(array[i]));
/*      */     }
/* 4317 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(Iterable<?> iterable, char separator)
/*      */   {
/* 4335 */     if (iterable == null) {
/* 4336 */       return null;
/*      */     }
/* 4338 */     return join(iterable.iterator(), separator);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(Iterable<?> iterable, String separator)
/*      */   {
/* 4356 */     if (iterable == null) {
/* 4357 */       return null;
/*      */     }
/* 4359 */     return join(iterable.iterator(), separator);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(Iterator<?> iterator, char separator)
/*      */   {
/* 4379 */     if (iterator == null) {
/* 4380 */       return null;
/*      */     }
/* 4382 */     if (!iterator.hasNext()) {
/* 4383 */       return "";
/*      */     }
/* 4385 */     Object first = iterator.next();
/* 4386 */     if (!iterator.hasNext()) {
/* 4387 */       return toStringOrEmpty(first);
/*      */     }
/*      */     
/*      */ 
/* 4391 */     StringBuilder buf = new StringBuilder(256);
/* 4392 */     if (first != null) {
/* 4393 */       buf.append(first);
/*      */     }
/*      */     
/* 4396 */     while (iterator.hasNext()) {
/* 4397 */       buf.append(separator);
/* 4398 */       Object obj = iterator.next();
/* 4399 */       if (obj != null) {
/* 4400 */         buf.append(obj);
/*      */       }
/*      */     }
/*      */     
/* 4404 */     return buf.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(Iterator<?> iterator, String separator)
/*      */   {
/* 4423 */     if (iterator == null) {
/* 4424 */       return null;
/*      */     }
/* 4426 */     if (!iterator.hasNext()) {
/* 4427 */       return "";
/*      */     }
/* 4429 */     Object first = iterator.next();
/* 4430 */     if (!iterator.hasNext()) {
/* 4431 */       return Objects.toString(first, "");
/*      */     }
/*      */     
/*      */ 
/* 4435 */     StringBuilder buf = new StringBuilder(256);
/* 4436 */     if (first != null) {
/* 4437 */       buf.append(first);
/*      */     }
/*      */     
/* 4440 */     while (iterator.hasNext()) {
/* 4441 */       if (separator != null) {
/* 4442 */         buf.append(separator);
/*      */       }
/* 4444 */       Object obj = iterator.next();
/* 4445 */       if (obj != null) {
/* 4446 */         buf.append(obj);
/*      */       }
/*      */     }
/* 4449 */     return buf.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(List<?> list, char separator, int startIndex, int endIndex)
/*      */   {
/* 4479 */     if (list == null) {
/* 4480 */       return null;
/*      */     }
/* 4482 */     int noOfItems = endIndex - startIndex;
/* 4483 */     if (noOfItems <= 0) {
/* 4484 */       return "";
/*      */     }
/* 4486 */     List<?> subList = list.subList(startIndex, endIndex);
/* 4487 */     return join(subList.iterator(), separator);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(List<?> list, String separator, int startIndex, int endIndex)
/*      */   {
/* 4517 */     if (list == null) {
/* 4518 */       return null;
/*      */     }
/* 4520 */     int noOfItems = endIndex - startIndex;
/* 4521 */     if (noOfItems <= 0) {
/* 4522 */       return "";
/*      */     }
/* 4524 */     List<?> subList = list.subList(startIndex, endIndex);
/* 4525 */     return join(subList.iterator(), separator);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(long[] array, char separator)
/*      */   {
/* 4555 */     if (array == null) {
/* 4556 */       return null;
/*      */     }
/* 4558 */     return join(array, separator, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(long[] array, char delimiter, int startIndex, int endIndex)
/*      */   {
/* 4593 */     if (array == null) {
/* 4594 */       return null;
/*      */     }
/* 4596 */     if (endIndex - startIndex <= 0) {
/* 4597 */       return "";
/*      */     }
/* 4599 */     StringJoiner joiner = newStringJoiner(delimiter);
/* 4600 */     for (int i = startIndex; i < endIndex; i++) {
/* 4601 */       joiner.add(String.valueOf(array[i]));
/*      */     }
/* 4603 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(Object[] array, char delimiter)
/*      */   {
/* 4629 */     if (array == null) {
/* 4630 */       return null;
/*      */     }
/* 4632 */     return join(array, delimiter, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(Object[] array, char delimiter, int startIndex, int endIndex)
/*      */   {
/* 4662 */     if (array == null) {
/* 4663 */       return null;
/*      */     }
/* 4665 */     if (endIndex - startIndex <= 0) {
/* 4666 */       return "";
/*      */     }
/* 4668 */     StringJoiner joiner = newStringJoiner(delimiter);
/* 4669 */     for (int i = startIndex; i < endIndex; i++) {
/* 4670 */       joiner.add(toStringOrEmpty(array[i]));
/*      */     }
/* 4672 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(Object[] array, String delimiter)
/*      */   {
/* 4699 */     if (array == null) {
/* 4700 */       return null;
/*      */     }
/* 4702 */     return join(array, delimiter, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(Object[] array, String delimiter, int startIndex, int endIndex)
/*      */   {
/* 4741 */     if (array == null) {
/* 4742 */       return null;
/*      */     }
/* 4744 */     if (endIndex - startIndex <= 0) {
/* 4745 */       return "";
/*      */     }
/* 4747 */     StringJoiner joiner = new StringJoiner(toStringOrEmpty(delimiter));
/* 4748 */     for (int i = startIndex; i < endIndex; i++) {
/* 4749 */       joiner.add(toStringOrEmpty(array[i]));
/*      */     }
/* 4751 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(short[] array, char delimiter)
/*      */   {
/* 4780 */     if (array == null) {
/* 4781 */       return null;
/*      */     }
/* 4783 */     return join(array, delimiter, 0, array.length);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String join(short[] array, char delimiter, int startIndex, int endIndex)
/*      */   {
/* 4818 */     if (array == null) {
/* 4819 */       return null;
/*      */     }
/* 4821 */     if (endIndex - startIndex <= 0) {
/* 4822 */       return "";
/*      */     }
/* 4824 */     StringJoiner joiner = newStringJoiner(delimiter);
/* 4825 */     for (int i = startIndex; i < endIndex; i++) {
/* 4826 */       joiner.add(String.valueOf(array[i]));
/*      */     }
/* 4828 */     return joiner.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @SafeVarargs
/*      */   public static <T> String join(T... elements)
/*      */   {
/* 4855 */     return join(elements, null);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String joinWith(String delimiter, Object... array)
/*      */   {
/* 4879 */     if (array == null) {
/* 4880 */       throw new IllegalArgumentException("Object varargs must not be null");
/*      */     }
/* 4882 */     return join(array, delimiter);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(CharSequence seq, CharSequence searchSeq)
/*      */   {
/* 4909 */     if (seq == null) {
/* 4910 */       return -1;
/*      */     }
/* 4912 */     return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(CharSequence seq, CharSequence searchSeq, int startPos)
/*      */   {
/* 4951 */     return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(CharSequence seq, int searchChar)
/*      */   {
/* 4989 */     if (isEmpty(seq)) {
/* 4990 */       return -1;
/*      */     }
/* 4992 */     return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOf(CharSequence seq, int searchChar, int startPos)
/*      */   {
/* 5040 */     if (isEmpty(seq)) {
/* 5041 */       return -1;
/*      */     }
/* 5043 */     return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOfAny(CharSequence str, CharSequence... searchStrs)
/*      */   {
/* 5073 */     if (str == null || searchStrs == null) {
/* 5074 */       return -1;
/*      */     }
/* 5076 */     int ret = -1;
/* 5077 */     int tmp = 0;
/* 5078 */     for (CharSequence search : searchStrs) {
/* 5079 */       if (search == null) {
/*      */         continue;
/*      */       }
/* 5082 */       tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());
/* 5083 */       if (tmp > ret) {
/* 5084 */         ret = tmp;
/*      */       }
/*      */     }
/* 5087 */     return ret;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr)
/*      */   {
/* 5114 */     if (str == null || searchStr == null) {
/* 5115 */       return -1;
/*      */     }
/* 5117 */     return lastIndexOfIgnoreCase(str, searchStr, str.length());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastIndexOfIgnoreCase(CharSequence str, CharSequence searchStr, int startPos)
/*      */   {
/* 5153 */     if (str == null || searchStr == null) {
/* 5154 */       return -1;
/*      */     }
/* 5156 */     int searchStrLength = searchStr.length();
/* 5157 */     int strLength = str.length();
/* 5158 */     if (startPos > strLength - searchStrLength) {
/* 5159 */       startPos = strLength - searchStrLength;
/*      */     }
/* 5161 */     if (startPos < 0) {
/* 5162 */       return -1;
/*      */     }
/* 5164 */     if (searchStrLength == 0) {
/* 5165 */       return startPos;
/*      */     }
/*      */     
/* 5168 */     for (int i = startPos; i >= 0; i--) {
/* 5169 */       if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStrLength)) {
/* 5170 */         return i;
/*      */       }
/*      */     }
/* 5173 */     return -1;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int lastOrdinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal)
/*      */   {
/* 5211 */     return ordinalIndexOf(str, searchStr, ordinal, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String left(String str, int len)
/*      */   {
/* 5235 */     if (str == null) {
/* 5236 */       return null;
/*      */     }
/* 5238 */     if (len < 0) {
/* 5239 */       return "";
/*      */     }
/* 5241 */     if (str.length() <= len) {
/* 5242 */       return str;
/*      */     }
/* 5244 */     return str.substring(0, len);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String leftPad(String str, int size)
/*      */   {
/* 5267 */     return leftPad(str, size, ' ');
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String leftPad(String str, int size, char padChar)
/*      */   {
/* 5292 */     if (str == null) {
/* 5293 */       return null;
/*      */     }
/* 5295 */     int pads = size - str.length();
/* 5296 */     if (pads <= 0) {
/* 5297 */       return str;
/*      */     }
/* 5299 */     if (pads > 8192) {
/* 5300 */       return leftPad(str, size, String.valueOf(padChar));
/*      */     }
/* 5302 */     return repeat(padChar, pads).concat(str);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String leftPad(String str, int size, String padStr)
/*      */   {
/* 5329 */     if (str == null) {
/* 5330 */       return null;
/*      */     }
/* 5332 */     if (isEmpty(padStr)) {
/* 5333 */       padStr = " ";
/*      */     }
/* 5335 */     int padLen = padStr.length();
/* 5336 */     int strLen = str.length();
/* 5337 */     int pads = size - strLen;
/* 5338 */     if (pads <= 0) {
/* 5339 */       return str;
/*      */     }
/* 5341 */     if (padLen == 1 && pads <= 8192) {
/* 5342 */       return leftPad(str, size, padStr.charAt(0));
/*      */     }
/*      */     
/* 5345 */     if (pads == padLen)
/* 5346 */       return padStr.concat(str);
/* 5347 */     if (pads < padLen) {
/* 5348 */       return padStr.substring(0, pads).concat(str);
/*      */     }
/* 5350 */     char[] padding = new char[pads];
/* 5351 */     char[] padChars = padStr.toCharArray();
/* 5352 */     for (int i = 0; i < pads; i++) {
/* 5353 */       padding[i] = padChars[(i % padLen)];
/*      */     }
/* 5355 */     return new String(padding).concat(str);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int length(CharSequence cs)
/*      */   {
/* 5371 */     return cs == null ? 0 : cs.length();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String lowerCase(String str)
/*      */   {
/* 5394 */     if (str == null) {
/* 5395 */       return null;
/*      */     }
/* 5397 */     return str.toLowerCase();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String lowerCase(String str, Locale locale)
/*      */   {
/* 5417 */     if (str == null) {
/* 5418 */       return null;
/*      */     }
/* 5420 */     return str.toLowerCase(LocaleUtils.toLocale(locale));
/*      */   }
/*      */   
/*      */   private static int[] matches(CharSequence first, CharSequence second) {
/*      */     CharSequence min;
/*      */     CharSequence max;
/* 5426 */     if (first.length() > second.length()) {
/* 5427 */       max = first;
/* 5428 */       min = second;
/*      */     } else {
/* 5430 */       max = second;
/* 5431 */       min = first;
/*      */     }
/* 5433 */     int range = Math.max(max.length() / 2 - 1, 0);
/* 5434 */     int[] matchIndexes = new int[min.length()];
/* 5435 */     Arrays.fill(matchIndexes, -1);
/* 5436 */     boolean[] matchFlags = new boolean[max.length()];
/* 5437 */     int matches = 0;
/* 5438 */     for (int mi = 0; mi < min.length(); mi++) {
/* 5439 */       char c1 = min.charAt(mi);
/* 5440 */       for (int xi = Math.max(mi - range, 0), xn = Math.min(mi + range + 1, max.length()); xi < xn; xi++) {
/* 5441 */         if (!matchFlags[xi] && c1 == max.charAt(xi)) {
/* 5442 */           matchIndexes[mi] = xi;
/* 5443 */           matchFlags[xi] = true;
/* 5444 */           matches++;
/* 5445 */           break;
/*      */         }
/*      */       }
/*      */     }
/* 5449 */     char[] ms1 = new char[matches];
/* 5450 */     char[] ms2 = new char[matches];
/* 5451 */     for (int i = 0, si = 0; i < min.length(); i++) {
/* 5452 */       if (matchIndexes[i] != -1) {
/* 5453 */         ms1[si] = min.charAt(i);
/* 5454 */         si++;
/*      */       }
/*      */     }
/* 5457 */     for (int i = 0, si = 0; i < max.length(); i++) {
/* 5458 */       if (matchFlags[i]) {
/* 5459 */         ms2[si] = max.charAt(i);
/* 5460 */         si++;
/*      */       }
/*      */     }
/* 5463 */     int transpositions = 0;
/* 5464 */     for (int mi = 0; mi < ms1.length; mi++) {
/* 5465 */       if (ms1[mi] != ms2[mi]) {
/* 5466 */         transpositions++;
/*      */       }
/*      */     }
/* 5469 */     int prefix = 0;
/* 5470 */     for (int mi = 0; mi < min.length(); mi++) {
/* 5471 */       if (first.charAt(mi) != second.charAt(mi)) break;
/* 5472 */       prefix++;
/*      */     }
/*      */     
/*      */ 
/*      */ 
/* 5477 */     return new int[] { matches, transpositions / 2, prefix, max.length() };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String mid(String str, int pos, int len)
/*      */   {
/* 5506 */     if (str == null) {
/* 5507 */       return null;
/*      */     }
/* 5509 */     if (len < 0 || pos > str.length()) {
/* 5510 */       return "";
/*      */     }
/* 5512 */     if (pos < 0) {
/* 5513 */       pos = 0;
/*      */     }
/* 5515 */     if (str.length() <= pos + len) {
/* 5516 */       return str.substring(pos);
/*      */     }
/* 5518 */     return str.substring(pos, pos + len);
/*      */   }
/*      */   
/*      */   private static StringJoiner newStringJoiner(char delimiter) {
/* 5522 */     return new StringJoiner(String.valueOf(delimiter));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String normalizeSpace(String str)
/*      */   {
/* 5569 */     if (isEmpty(str)) {
/* 5570 */       return str;
/*      */     }
/* 5572 */     int size = str.length();
/* 5573 */     char[] newChars = new char[size];
/* 5574 */     int count = 0;
/* 5575 */     int whitespacesCount = 0;
/* 5576 */     boolean startWhitespaces = true;
/* 5577 */     for (int i = 0; i < size; i++) {
/* 5578 */       char actualChar = str.charAt(i);
/* 5579 */       boolean isWhitespace = Character.isWhitespace(actualChar);
/* 5580 */       if (isWhitespace) {
/* 5581 */         if (whitespacesCount == 0 && !startWhitespaces) {
/* 5582 */           newChars[(count++)] = " ".charAt(0);
/*      */         }
/* 5584 */         whitespacesCount++;
/*      */       } else {
/* 5586 */         startWhitespaces = false;
/* 5587 */         newChars[(count++)] = (actualChar == ' ' ? 32 : actualChar);
/* 5588 */         whitespacesCount = 0;
/*      */       }
/*      */     }
/* 5591 */     if (startWhitespaces) {
/* 5592 */       return "";
/*      */     }
/* 5594 */     return new String(newChars, 0, count - (whitespacesCount > 0 ? 1 : 0)).trim();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal)
/*      */   {
/* 5648 */     return ordinalIndexOf(str, searchStr, ordinal, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static int ordinalIndexOf(CharSequence str, CharSequence searchStr, int ordinal, boolean lastIndex)
/*      */   {
/* 5667 */     if (str == null || searchStr == null || ordinal <= 0) {
/* 5668 */       return -1;
/*      */     }
/* 5670 */     if (searchStr.length() == 0) {
/* 5671 */       return lastIndex ? str.length() : 0;
/*      */     }
/* 5673 */     int found = 0;
/*      */     
/*      */ 
/* 5676 */     int index = lastIndex ? str.length() : -1;
/*      */     do {
/* 5678 */       if (lastIndex) {
/* 5679 */         index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);
/*      */       } else {
/* 5681 */         index = CharSequenceUtils.indexOf(str, searchStr, index + 1);
/*      */       }
/* 5683 */       if (index < 0) {
/* 5684 */         return index;
/*      */       }
/* 5686 */       found++;
/* 5687 */     } while (found < ordinal);
/* 5688 */     return index;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String overlay(String str, String overlay, int start, int end)
/*      */   {
/* 5721 */     if (str == null) {
/* 5722 */       return null;
/*      */     }
/* 5724 */     if (overlay == null) {
/* 5725 */       overlay = "";
/*      */     }
/* 5727 */     int len = str.length();
/* 5728 */     if (start < 0) {
/* 5729 */       start = 0;
/*      */     }
/* 5731 */     if (start > len) {
/* 5732 */       start = len;
/*      */     }
/* 5734 */     if (end < 0) {
/* 5735 */       end = 0;
/*      */     }
/* 5737 */     if (end > len) {
/* 5738 */       end = len;
/*      */     }
/* 5740 */     if (start > end) {
/* 5741 */       int temp = start;
/* 5742 */       start = end;
/* 5743 */       end = temp;
/*      */     }
/* 5745 */     return str.substring(0, start) + overlay + str
/*      */     
/* 5747 */       .substring(end);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static String prependIfMissing(String str, CharSequence prefix, boolean ignoreCase, CharSequence... prefixes)
/*      */   {
/* 5762 */     if (str == null || isEmpty(prefix) || startsWith(str, prefix, ignoreCase)) {
/* 5763 */       return str;
/*      */     }
/* 5765 */     if (ArrayUtils.isNotEmpty(prefixes)) {
/* 5766 */       for (CharSequence p : prefixes) {
/* 5767 */         if (startsWith(str, p, ignoreCase)) {
/* 5768 */           return str;
/*      */         }
/*      */       }
/*      */     }
/* 5772 */     return prefix.toString() + str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String prependIfMissing(String str, CharSequence prefix, CharSequence... prefixes)
/*      */   {
/* 5810 */     return prependIfMissing(str, prefix, false, prefixes);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String prependIfMissingIgnoreCase(String str, CharSequence prefix, CharSequence... prefixes)
/*      */   {
/* 5848 */     return prependIfMissing(str, prefix, true, prefixes);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String remove(String str, char remove)
/*      */   {
/* 5871 */     if (isEmpty(str) || str.indexOf(remove) == -1) {
/* 5872 */       return str;
/*      */     }
/* 5874 */     char[] chars = str.toCharArray();
/* 5875 */     int pos = 0;
/* 5876 */     for (int i = 0; i < chars.length; i++) {
/* 5877 */       if (chars[i] != remove) {
/* 5878 */         chars[(pos++)] = chars[i];
/*      */       }
/*      */     }
/* 5881 */     return new String(chars, 0, pos);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String remove(String str, String remove)
/*      */   {
/* 5908 */     if (isEmpty(str) || isEmpty(remove)) {
/* 5909 */       return str;
/*      */     }
/* 5911 */     return replace(str, remove, "", -1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static String removeAll(String text, String regex)
/*      */   {
/* 5961 */     return RegExUtils.removeAll(text, regex);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String removeEnd(String str, String remove)
/*      */   {
/* 5989 */     if (isEmpty(str) || isEmpty(remove)) {
/* 5990 */       return str;
/*      */     }
/* 5992 */     if (str.endsWith(remove)) {
/* 5993 */       return str.substring(0, str.length() - remove.length());
/*      */     }
/* 5995 */     return str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String removeEndIgnoreCase(String str, String remove)
/*      */   {
/* 6025 */     if (isEmpty(str) || isEmpty(remove)) {
/* 6026 */       return str;
/*      */     }
/* 6028 */     if (endsWithIgnoreCase(str, remove)) {
/* 6029 */       return str.substring(0, str.length() - remove.length());
/*      */     }
/* 6031 */     return str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static String removeFirst(String text, String regex)
/*      */   {
/* 6080 */     return replaceFirst(text, regex, "");
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String removeIgnoreCase(String str, String remove)
/*      */   {
/* 6117 */     return replaceIgnoreCase(str, remove, "", -1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static String removePattern(String source, String regex)
/*      */   {
/* 6154 */     return RegExUtils.removePattern(source, regex);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String removeStart(String str, String remove)
/*      */   {
/* 6182 */     if (isEmpty(str) || isEmpty(remove)) {
/* 6183 */       return str;
/*      */     }
/* 6185 */     if (str.startsWith(remove)) {
/* 6186 */       return str.substring(remove.length());
/*      */     }
/* 6188 */     return str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String removeStartIgnoreCase(String str, String remove)
/*      */   {
/* 6217 */     if (str != null && startsWithIgnoreCase(str, remove)) {
/* 6218 */       return str.substring(length(remove));
/*      */     }
/* 6220 */     return str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String repeat(char ch, int repeat)
/*      */   {
/* 6246 */     if (repeat <= 0) {
/* 6247 */       return "";
/*      */     }
/* 6249 */     char[] buf = new char[repeat];
/* 6250 */     Arrays.fill(buf, ch);
/* 6251 */     return new String(buf);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String repeat(String str, int repeat)
/*      */   {
/* 6274 */     if (str == null) {
/* 6275 */       return null;
/*      */     }
/* 6277 */     if (repeat <= 0) {
/* 6278 */       return "";
/*      */     }
/* 6280 */     int inputLength = str.length();
/* 6281 */     if (repeat == 1 || inputLength == 0) {
/* 6282 */       return str;
/*      */     }
/* 6284 */     if (inputLength == 1 && repeat <= 8192) {
/* 6285 */       return repeat(str.charAt(0), repeat);
/*      */     }
/*      */     
/* 6288 */     int outputLength = inputLength * repeat;
/* 6289 */     switch (inputLength) {
/*      */     case 1: 
/* 6291 */       return repeat(str.charAt(0), repeat);
/*      */     case 2: {
/* 6293 */       char ch0 = str.charAt(0);
/* 6294 */       char ch1 = str.charAt(1);
/* 6295 */       char[] output2 = new char[outputLength];
/* 6296 */       for (int i = repeat * 2 - 2; i >= 0; i--, i--) {
/* 6297 */         output2[i] = ch0;
/* 6298 */         output2[(i + 1)] = ch1;
/*      */       }
/* 6300 */       return new String(output2);
/*      */     }}
/* 6302 */     StringBuilder buf = new StringBuilder(outputLength);
/* 6303 */     for (int i = 0; i < repeat; i++) {
/* 6304 */       buf.append(str);
/*      */     }
/* 6306 */     return buf.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String repeat(String str, String separator, int repeat)
/*      */   {
/* 6331 */     if (str == null || separator == null) {
/* 6332 */       return repeat(str, repeat);
/*      */     }
/*      */     
/* 6335 */     String result = repeat(str + separator, repeat);
/* 6336 */     return removeEnd(result, separator);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replace(String text, String searchString, String replacement)
/*      */   {
/* 6363 */     return replace(text, searchString, replacement, -1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replace(String text, String searchString, String replacement, int max)
/*      */   {
/* 6395 */     return replace(text, searchString, replacement, max, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static String replace(String text, String searchString, String replacement, int max, boolean ignoreCase)
/*      */   {
/* 6430 */     if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {
/* 6431 */       return text;
/*      */     }
/* 6433 */     if (ignoreCase) {
/* 6434 */       searchString = searchString.toLowerCase();
/*      */     }
/* 6436 */     int start = 0;
/* 6437 */     int end = ignoreCase ? indexOfIgnoreCase(text, searchString, start) : indexOf(text, searchString, start);
/* 6438 */     if (end == -1) {
/* 6439 */       return text;
/*      */     }
/* 6441 */     int replLength = searchString.length();
/* 6442 */     int increase = Math.max(replacement.length() - replLength, 0);
/* 6443 */     increase *= (max < 0 ? 16 : Math.min(max, 64));
/* 6444 */     StringBuilder buf = new StringBuilder(text.length() + increase);
/* 6445 */     while (end != -1) {
/* 6446 */       buf.append(text, start, end).append(replacement);
/* 6447 */       start = end + replLength;
/* 6448 */       max--; if (max == 0) {
/*      */         break;
/*      */       }
/* 6451 */       end = ignoreCase ? indexOfIgnoreCase(text, searchString, start) : indexOf(text, searchString, start);
/*      */     }
/* 6453 */     buf.append(text, start, text.length());
/* 6454 */     return buf.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static String replaceAll(String text, String regex, String replacement)
/*      */   {
/* 6509 */     return RegExUtils.replaceAll(text, regex, replacement);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replaceChars(String str, char searchChar, char replaceChar)
/*      */   {
/* 6533 */     if (str == null) {
/* 6534 */       return null;
/*      */     }
/* 6536 */     return str.replace(searchChar, replaceChar);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replaceChars(String str, String searchChars, String replaceChars)
/*      */   {
/* 6576 */     if (isEmpty(str) || isEmpty(searchChars)) {
/* 6577 */       return str;
/*      */     }
/* 6579 */     if (replaceChars == null) {
/* 6580 */       replaceChars = "";
/*      */     }
/* 6582 */     boolean modified = false;
/* 6583 */     int replaceCharsLength = replaceChars.length();
/* 6584 */     int strLength = str.length();
/* 6585 */     StringBuilder buf = new StringBuilder(strLength);
/* 6586 */     for (int i = 0; i < strLength; i++) {
/* 6587 */       char ch = str.charAt(i);
/* 6588 */       int index = searchChars.indexOf(ch);
/* 6589 */       if (index >= 0) {
/* 6590 */         modified = true;
/* 6591 */         if (index < replaceCharsLength) {
/* 6592 */           buf.append(replaceChars.charAt(index));
/*      */         }
/*      */       } else {
/* 6595 */         buf.append(ch);
/*      */       }
/*      */     }
/* 6598 */     if (modified) {
/* 6599 */       return buf.toString();
/*      */     }
/* 6601 */     return str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replaceEach(String text, String[] searchList, String[] replacementList)
/*      */   {
/* 6644 */     return replaceEach(text, searchList, replacementList, false, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static String replaceEach(String text, String[] searchList, String[] replacementList, boolean repeat, int timeToLive)
/*      */   {
/* 6704 */     if (timeToLive < 0) {
/* 6705 */       Set<String> searchSet = new HashSet<>(Arrays.asList(searchList));
/* 6706 */       Set<String> replacementSet = new HashSet<>(Arrays.asList(replacementList));
/* 6707 */       searchSet.retainAll(replacementSet);
/* 6708 */       if (!searchSet.isEmpty()) {
/* 6709 */         throw new IllegalStateException("Aborting to protect against StackOverflowError - output of one loop is the input of another");
/*      */       }
/*      */     }
/*      */     
/*      */ 
/* 6714 */     if (isEmpty(text) || ArrayUtils.isEmpty(searchList) || ArrayUtils.isEmpty(replacementList) || ArrayUtils.isNotEmpty(searchList) && timeToLive == -1) {
/* 6715 */       return text;
/*      */     }
/*      */     
/* 6718 */     int searchLength = searchList.length;
/* 6719 */     int replacementLength = replacementList.length;
/*      */     
/*      */ 
/* 6722 */     if (searchLength != replacementLength) {
/* 6723 */       throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs " + replacementLength);
/*      */     }
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/* 6730 */     boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
/*      */     
/*      */ 
/* 6733 */     int textIndex = -1;
/* 6734 */     int replaceIndex = -1;
/* 6735 */     int tempIndex = -1;
/*      */     
/*      */ 
/*      */ 
/* 6739 */     for (int i = 0; i < searchLength; i++) {
/* 6740 */       if (noMoreMatchesForReplIndex[i] || isEmpty(searchList[i]) || replacementList[i] == null) {
/*      */         continue;
/*      */       }
/* 6743 */       tempIndex = text.indexOf(searchList[i]);
/*      */       
/*      */ 
/* 6746 */       if (tempIndex == -1) {
/* 6747 */         noMoreMatchesForReplIndex[i] = true;
/* 6748 */       } else if (textIndex == -1 || tempIndex < textIndex) {
/* 6749 */         textIndex = tempIndex;
/* 6750 */         replaceIndex = i;
/*      */       }
/*      */     }
/*      */     
/*      */ 
/*      */ 
/* 6756 */     if (textIndex == -1) {
/* 6757 */       return text;
/*      */     }
/*      */     
/* 6760 */     int start = 0;
/*      */     
/*      */ 
/* 6763 */     int increase = 0;
/*      */     
/*      */ 
/* 6766 */     for (int i = 0; i < searchList.length; i++) {
/* 6767 */       if (searchList[i] == null || replacementList[i] == null) {
/*      */         continue;
/*      */       }
/* 6770 */       int greater = replacementList[i].length() - searchList[i].length();
/* 6771 */       if (greater > 0) {
/* 6772 */         increase += 3 * greater;
/*      */       }
/*      */     }
/*      */     
/* 6776 */     increase = Math.min(increase, text.length() / 5);
/*      */     
/* 6778 */     StringBuilder buf = new StringBuilder(text.length() + increase);
/*      */     
/* 6780 */     while (textIndex != -1)
/*      */     {
/* 6782 */       for (int i = start; i < textIndex; i++) {
/* 6783 */         buf.append(text.charAt(i));
/*      */       }
/* 6785 */       buf.append(replacementList[replaceIndex]);
/*      */       
/* 6787 */       start = textIndex + searchList[replaceIndex].length();
/*      */       
/* 6789 */       textIndex = -1;
/* 6790 */       replaceIndex = -1;
/*      */       
/*      */ 
/* 6793 */       for (int i = 0; i < searchLength; i++) {
/* 6794 */         if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
/* 6795 */           searchList[i].isEmpty() || replacementList[i] == null) {
/*      */           continue;
/*      */         }
/* 6798 */         tempIndex = text.indexOf(searchList[i], start);
/*      */         
/*      */ 
/* 6801 */         if (tempIndex == -1) {
/* 6802 */           noMoreMatchesForReplIndex[i] = true;
/* 6803 */         } else if (textIndex == -1 || tempIndex < textIndex) {
/* 6804 */           textIndex = tempIndex;
/* 6805 */           replaceIndex = i;
/*      */         }
/*      */       }
/*      */     }
/*      */     
/*      */ 
/* 6811 */     int textLength = text.length();
/* 6812 */     for (int i = start; i < textLength; i++) {
/* 6813 */       buf.append(text.charAt(i));
/*      */     }
/* 6815 */     String result = buf.toString();
/* 6816 */     if (!repeat) {
/* 6817 */       return result;
/*      */     }
/*      */     
/* 6820 */     return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList)
/*      */   {
/* 6868 */     int timeToLive = searchList == null ? 0 : searchList.length;
/* 6869 */     return replaceEach(text, searchList, replacementList, true, timeToLive);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static String replaceFirst(String text, String regex, String replacement)
/*      */   {
/* 6922 */     return RegExUtils.replaceFirst(text, regex, replacement);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replaceIgnoreCase(String text, String searchString, String replacement)
/*      */   {
/* 6950 */     return replaceIgnoreCase(text, searchString, replacement, -1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replaceIgnoreCase(String text, String searchString, String replacement, int max)
/*      */   {
/* 6983 */     return replace(text, searchString, replacement, max, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replaceOnce(String text, String searchString, String replacement)
/*      */   {
/* 7010 */     return replace(text, searchString, replacement, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String replaceOnceIgnoreCase(String text, String searchString, String replacement)
/*      */   {
/* 7039 */     return replaceIgnoreCase(text, searchString, replacement, 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static String replacePattern(String source, String regex, String replacement)
/*      */   {
/* 7085 */     return RegExUtils.replacePattern(source, regex, replacement);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String reverse(String str)
/*      */   {
/* 7103 */     if (str == null) {
/* 7104 */       return null;
/*      */     }
/* 7106 */     return new StringBuilder(str).reverse().toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String reverseDelimited(String str, char separatorChar)
/*      */   {
/* 7129 */     if (str == null) {
/* 7130 */       return null;
/*      */     }
/*      */     
/*      */ 
/* 7134 */     String[] strs = split(str, separatorChar);
/* 7135 */     ArrayUtils.reverse(strs);
/* 7136 */     return join(strs, separatorChar);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String right(String str, int len)
/*      */   {
/* 7160 */     if (str == null) {
/* 7161 */       return null;
/*      */     }
/* 7163 */     if (len < 0) {
/* 7164 */       return "";
/*      */     }
/* 7166 */     if (str.length() <= len) {
/* 7167 */       return str;
/*      */     }
/* 7169 */     return str.substring(str.length() - len);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String rightPad(String str, int size)
/*      */   {
/* 7192 */     return rightPad(str, size, ' ');
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String rightPad(String str, int size, char padChar)
/*      */   {
/* 7217 */     if (str == null) {
/* 7218 */       return null;
/*      */     }
/* 7220 */     int pads = size - str.length();
/* 7221 */     if (pads <= 0) {
/* 7222 */       return str;
/*      */     }
/* 7224 */     if (pads > 8192) {
/* 7225 */       return rightPad(str, size, String.valueOf(padChar));
/*      */     }
/* 7227 */     return str.concat(repeat(padChar, pads));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String rightPad(String str, int size, String padStr)
/*      */   {
/* 7254 */     if (str == null) {
/* 7255 */       return null;
/*      */     }
/* 7257 */     if (isEmpty(padStr)) {
/* 7258 */       padStr = " ";
/*      */     }
/* 7260 */     int padLen = padStr.length();
/* 7261 */     int strLen = str.length();
/* 7262 */     int pads = size - strLen;
/* 7263 */     if (pads <= 0) {
/* 7264 */       return str;
/*      */     }
/* 7266 */     if (padLen == 1 && pads <= 8192) {
/* 7267 */       return rightPad(str, size, padStr.charAt(0));
/*      */     }
/*      */     
/* 7270 */     if (pads == padLen)
/* 7271 */       return str.concat(padStr);
/* 7272 */     if (pads < padLen) {
/* 7273 */       return str.concat(padStr.substring(0, pads));
/*      */     }
/* 7275 */     char[] padding = new char[pads];
/* 7276 */     char[] padChars = padStr.toCharArray();
/* 7277 */     for (int i = 0; i < pads; i++) {
/* 7278 */       padding[i] = padChars[(i % padLen)];
/*      */     }
/* 7280 */     return str.concat(new String(padding));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String rotate(String str, int shift)
/*      */   {
/* 7311 */     if (str == null) {
/* 7312 */       return null;
/*      */     }
/*      */     
/* 7315 */     int strLen = str.length();
/* 7316 */     if (shift == 0 || strLen == 0 || shift % strLen == 0) {
/* 7317 */       return str;
/*      */     }
/*      */     
/* 7320 */     StringBuilder builder = new StringBuilder(strLen);
/* 7321 */     int offset = -(shift % strLen);
/* 7322 */     builder.append(substring(str, offset));
/* 7323 */     builder.append(substring(str, 0, offset));
/* 7324 */     return builder.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] split(String str)
/*      */   {
/* 7350 */     return split(str, null, -1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] split(String str, char separatorChar)
/*      */   {
/* 7378 */     return splitWorker(str, separatorChar, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] split(String str, String separatorChars)
/*      */   {
/* 7407 */     return splitWorker(str, separatorChars, -1, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] split(String str, String separatorChars, int max)
/*      */   {
/* 7441 */     return splitWorker(str, separatorChars, max, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitByCharacterType(String str)
/*      */   {
/* 7464 */     return splitByCharacterType(str, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static String[] splitByCharacterType(String str, boolean camelCase)
/*      */   {
/* 7482 */     if (str == null) {
/* 7483 */       return null;
/*      */     }
/* 7485 */     if (str.isEmpty()) {
/* 7486 */       return ArrayUtils.EMPTY_STRING_ARRAY;
/*      */     }
/* 7488 */     char[] c = str.toCharArray();
/* 7489 */     List<String> list = new ArrayList<>();
/* 7490 */     int tokenStart = 0;
/* 7491 */     int currentType = Character.getType(c[tokenStart]);
/* 7492 */     for (int pos = tokenStart + 1; pos < c.length; pos++) {
/* 7493 */       int type = Character.getType(c[pos]);
/* 7494 */       if (type == currentType) {
/*      */         continue;
/*      */       }
/* 7497 */       if (camelCase && type == 2 && currentType == 1) {
/* 7498 */         int newTokenStart = pos - 1;
/* 7499 */         if (newTokenStart != tokenStart) {
/* 7500 */           list.add(new String(c, tokenStart, newTokenStart - tokenStart));
/* 7501 */           tokenStart = newTokenStart;
/*      */         }
/*      */       } else {
/* 7504 */         list.add(new String(c, tokenStart, pos - tokenStart));
/* 7505 */         tokenStart = pos;
/*      */       }
/* 7507 */       currentType = type;
/*      */     }
/* 7509 */     list.add(new String(c, tokenStart, c.length - tokenStart));
/* 7510 */     return (String[])list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitByCharacterTypeCamelCase(String str)
/*      */   {
/* 7538 */     return splitByCharacterType(str, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitByWholeSeparator(String str, String separator)
/*      */   {
/* 7565 */     return splitByWholeSeparatorWorker(str, separator, -1, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitByWholeSeparator(String str, String separator, int max)
/*      */   {
/* 7596 */     return splitByWholeSeparatorWorker(str, separator, max, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator)
/*      */   {
/* 7625 */     return splitByWholeSeparatorWorker(str, separator, -1, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max)
/*      */   {
/* 7658 */     return splitByWholeSeparatorWorker(str, separator, max, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static String[] splitByWholeSeparatorWorker(String str, String separator, int max, boolean preserveAllTokens)
/*      */   {
/* 7677 */     if (str == null) {
/* 7678 */       return null;
/*      */     }
/*      */     
/* 7681 */     int len = str.length();
/*      */     
/* 7683 */     if (len == 0) {
/* 7684 */       return ArrayUtils.EMPTY_STRING_ARRAY;
/*      */     }
/*      */     
/* 7687 */     if (separator == null || "".equals(separator))
/*      */     {
/* 7689 */       return splitWorker(str, null, max, preserveAllTokens);
/*      */     }
/*      */     
/* 7692 */     int separatorLength = separator.length();
/*      */     
/* 7694 */     ArrayList<String> substrings = new ArrayList<>();
/* 7695 */     int numberOfSubstrings = 0;
/* 7696 */     int beg = 0;
/* 7697 */     int end = 0;
/* 7698 */     while (end < len) {
/* 7699 */       end = str.indexOf(separator, beg);
/*      */       
/* 7701 */       if (end > -1) {
/* 7702 */         if (end > beg) {
/* 7703 */           numberOfSubstrings++;
/*      */           
/* 7705 */           if (numberOfSubstrings == max) {
/* 7706 */             end = len;
/* 7707 */             substrings.add(str.substring(beg));
/*      */           }
/*      */           else
/*      */           {
/* 7711 */             substrings.add(str.substring(beg, end));
/*      */             
/*      */ 
/*      */ 
/*      */ 
/* 7716 */             beg = end + separatorLength;
/*      */           }
/*      */         }
/*      */         else {
/* 7720 */           if (preserveAllTokens) {
/* 7721 */             numberOfSubstrings++;
/* 7722 */             if (numberOfSubstrings == max) {
/* 7723 */               end = len;
/* 7724 */               substrings.add(str.substring(beg));
/*      */             } else {
/* 7726 */               substrings.add("");
/*      */             }
/*      */           }
/* 7729 */           beg = end + separatorLength;
/*      */         }
/*      */       }
/*      */       else {
/* 7733 */         substrings.add(str.substring(beg));
/* 7734 */         end = len;
/*      */       }
/*      */     }
/*      */     
/* 7738 */     return (String[])substrings.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitPreserveAllTokens(String str)
/*      */   {
/* 7766 */     return splitWorker(str, null, -1, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitPreserveAllTokens(String str, char separatorChar)
/*      */   {
/* 7802 */     return splitWorker(str, separatorChar, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitPreserveAllTokens(String str, String separatorChars)
/*      */   {
/* 7839 */     return splitWorker(str, separatorChars, -1, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] splitPreserveAllTokens(String str, String separatorChars, int max)
/*      */   {
/* 7879 */     return splitWorker(str, separatorChars, max, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens)
/*      */   {
/* 7897 */     if (str == null) {
/* 7898 */       return null;
/*      */     }
/* 7900 */     int len = str.length();
/* 7901 */     if (len == 0) {
/* 7902 */       return ArrayUtils.EMPTY_STRING_ARRAY;
/*      */     }
/* 7904 */     List<String> list = new ArrayList<>();
/* 7905 */     int i = 0;
/* 7906 */     int start = 0;
/* 7907 */     boolean match = false;
/* 7908 */     boolean lastMatch = false;
/* 7909 */     while (i < len)
/* 7910 */       if (str.charAt(i) == separatorChar) {
/* 7911 */         if (match || preserveAllTokens) {
/* 7912 */           list.add(str.substring(start, i));
/* 7913 */           match = false;
/* 7914 */           lastMatch = true;
/*      */         }
/* 7916 */         i++;start = i;
/*      */       }
/*      */       else {
/* 7919 */         lastMatch = false;
/* 7920 */         match = true;
/* 7921 */         i++;
/*      */       }
/* 7923 */     if (match || preserveAllTokens && lastMatch) {
/* 7924 */       list.add(str.substring(start, i));
/*      */     }
/* 7926 */     return (String[])list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens)
/*      */   {
/* 7948 */     if (str == null) {
/* 7949 */       return null;
/*      */     }
/* 7951 */     int len = str.length();
/* 7952 */     if (len == 0) {
/* 7953 */       return ArrayUtils.EMPTY_STRING_ARRAY;
/*      */     }
/* 7955 */     List<String> list = new ArrayList<>();
/* 7956 */     int sizePlus1 = 1;
/* 7957 */     int i = 0;
/* 7958 */     int start = 0;
/* 7959 */     boolean match = false;
/* 7960 */     boolean lastMatch = false;
/* 7961 */     if (separatorChars == null)
/*      */     {
/* 7963 */       while (i < len)
/* 7964 */         if (Character.isWhitespace(str.charAt(i))) {
/* 7965 */           if (match || preserveAllTokens) {
/* 7966 */             lastMatch = true;
/* 7967 */             if (sizePlus1++ == max) {
/* 7968 */               i = len;
/* 7969 */               lastMatch = false;
/*      */             }
/* 7971 */             list.add(str.substring(start, i));
/* 7972 */             match = false;
/*      */           }
/* 7974 */           i++;start = i;
/*      */         }
/*      */         else {
/* 7977 */           lastMatch = false;
/* 7978 */           match = true;
/* 7979 */           i++;
/*      */         } }
/* 7981 */     if (separatorChars.length() == 1)
/*      */     {
/* 7983 */       char sep = separatorChars.charAt(0);
/* 7984 */       while (i < len) {
/* 7985 */         if (str.charAt(i) == sep) {
/* 7986 */           if (match || preserveAllTokens) {
/* 7987 */             lastMatch = true;
/* 7988 */             if (sizePlus1++ == max) {
/* 7989 */               i = len;
/* 7990 */               lastMatch = false;
/*      */             }
/* 7992 */             list.add(str.substring(start, i));
/* 7993 */             match = false;
/*      */           }
/* 7995 */           i++;start = i;
/*      */         }
/*      */         else {
/* 7998 */           lastMatch = false;
/* 7999 */           match = true;
/* 8000 */           i++;
/*      */         }
/*      */       }
/*      */     } else {
/* 8004 */       while (i < len)
/* 8005 */         if (separatorChars.indexOf(str.charAt(i)) >= 0) {
/* 8006 */           if (match || preserveAllTokens) {
/* 8007 */             lastMatch = true;
/* 8008 */             if (sizePlus1++ == max) {
/* 8009 */               i = len;
/* 8010 */               lastMatch = false;
/*      */             }
/* 8012 */             list.add(str.substring(start, i));
/* 8013 */             match = false;
/*      */           }
/* 8015 */           i++;start = i;
/*      */         }
/*      */         else {
/* 8018 */           lastMatch = false;
/* 8019 */           match = true;
/* 8020 */           i++;
/*      */         }
/*      */     }
/* 8023 */     if (match || preserveAllTokens && lastMatch) {
/* 8024 */       list.add(str.substring(start, i));
/*      */     }
/* 8026 */     return (String[])list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean startsWith(CharSequence str, CharSequence prefix)
/*      */   {
/* 8052 */     return startsWith(str, prefix, false);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static boolean startsWith(CharSequence str, CharSequence prefix, boolean ignoreCase)
/*      */   {
/* 8067 */     if (str == null || prefix == null) {
/* 8068 */       return str == prefix;
/*      */     }
/*      */     
/* 8071 */     int preLen = prefix.length();
/* 8072 */     if (preLen > str.length()) {
/* 8073 */       return false;
/*      */     }
/* 8075 */     return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, preLen);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean startsWithAny(CharSequence sequence, CharSequence... searchStrings)
/*      */   {
/* 8101 */     if (isEmpty(sequence) || ArrayUtils.isEmpty(searchStrings)) {
/* 8102 */       return false;
/*      */     }
/* 8104 */     for (CharSequence searchString : searchStrings) {
/* 8105 */       if (startsWith(sequence, searchString)) {
/* 8106 */         return true;
/*      */       }
/*      */     }
/* 8109 */     return false;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean startsWithIgnoreCase(CharSequence str, CharSequence prefix)
/*      */   {
/* 8135 */     return startsWith(str, prefix, true);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String strip(String str)
/*      */   {
/* 8161 */     return strip(str, null);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String strip(String str, String stripChars)
/*      */   {
/* 8191 */     str = stripStart(str, stripChars);
/* 8192 */     return stripEnd(str, stripChars);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String stripAccents(String input)
/*      */   {
/* 8214 */     if (input == null) {
/* 8215 */       return null;
/*      */     }
/* 8217 */     StringBuilder decomposed = new StringBuilder(Normalizer.normalize(input, Form.NFD));
/* 8218 */     convertRemainingAccentCharacters(decomposed);
/*      */     
/* 8220 */     return STRIP_ACCENTS_PATTERN.matcher(decomposed).replaceAll("");
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] stripAll(String... strs)
/*      */   {
/* 8243 */     return stripAll(strs, null);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] stripAll(String[] strs, String stripChars)
/*      */   {
/* 8272 */     int strsLen = ArrayUtils.getLength(strs);
/* 8273 */     if (strsLen == 0) {
/* 8274 */       return strs;
/*      */     }
/* 8276 */     String[] newArr = new String[strsLen];
/* 8277 */     for (int i = 0; i < strsLen; i++) {
/* 8278 */       newArr[i] = strip(strs[i], stripChars);
/*      */     }
/* 8280 */     return newArr;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String stripEnd(String str, String stripChars)
/*      */   {
/* 8309 */     int end = length(str);
/* 8310 */     if (end == 0) {
/* 8311 */       return str;
/*      */     }
/*      */     
/* 8314 */     if (stripChars == null) {
/* 8315 */       while (end != 0 && Character.isWhitespace(str.charAt(end - 1)))
/* 8316 */         end--;
/*      */     }
/* 8318 */     if (stripChars.isEmpty()) {
/* 8319 */       return str;
/*      */     }
/* 8321 */     while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != -1) {
/* 8322 */       end--;
/*      */     }
/*      */     
/* 8325 */     return str.substring(0, end);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String stripStart(String str, String stripChars)
/*      */   {
/* 8353 */     int strLen = length(str);
/* 8354 */     if (strLen == 0) {
/* 8355 */       return str;
/*      */     }
/* 8357 */     int start = 0;
/* 8358 */     if (stripChars == null) {
/* 8359 */       while (start != strLen && Character.isWhitespace(str.charAt(start)))
/* 8360 */         start++;
/*      */     }
/* 8362 */     if (stripChars.isEmpty()) {
/* 8363 */       return str;
/*      */     }
/* 8365 */     while (start != strLen && stripChars.indexOf(str.charAt(start)) != -1) {
/* 8366 */       start++;
/*      */     }
/*      */     
/* 8369 */     return str.substring(start);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String stripToEmpty(String str)
/*      */   {
/* 8395 */     return str == null ? "" : strip(str, null);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String stripToNull(String str)
/*      */   {
/* 8422 */     if (str == null) {
/* 8423 */       return null;
/*      */     }
/* 8425 */     str = strip(str, null);
/* 8426 */     return str.isEmpty() ? null : str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substring(String str, int start)
/*      */   {
/* 8454 */     if (str == null) {
/* 8455 */       return null;
/*      */     }
/*      */     
/*      */ 
/* 8459 */     if (start < 0) {
/* 8460 */       start = str.length() + start;
/*      */     }
/*      */     
/* 8463 */     if (start < 0) {
/* 8464 */       start = 0;
/*      */     }
/* 8466 */     if (start > str.length()) {
/* 8467 */       return "";
/*      */     }
/*      */     
/* 8470 */     return str.substring(start);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substring(String str, int start, int end)
/*      */   {
/* 8509 */     if (str == null) {
/* 8510 */       return null;
/*      */     }
/*      */     
/*      */ 
/* 8514 */     if (end < 0) {
/* 8515 */       end = str.length() + end;
/*      */     }
/* 8517 */     if (start < 0) {
/* 8518 */       start = str.length() + start;
/*      */     }
/*      */     
/*      */ 
/* 8522 */     if (end > str.length()) {
/* 8523 */       end = str.length();
/*      */     }
/*      */     
/*      */ 
/* 8527 */     if (start > end) {
/* 8528 */       return "";
/*      */     }
/*      */     
/* 8531 */     if (start < 0) {
/* 8532 */       start = 0;
/*      */     }
/* 8534 */     if (end < 0) {
/* 8535 */       end = 0;
/*      */     }
/*      */     
/* 8538 */     return str.substring(start, end);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substringAfter(String str, int separator)
/*      */   {
/* 8567 */     if (isEmpty(str)) {
/* 8568 */       return str;
/*      */     }
/* 8570 */     int pos = str.indexOf(separator);
/* 8571 */     if (pos == -1) {
/* 8572 */       return "";
/*      */     }
/* 8574 */     return str.substring(pos + 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substringAfter(String str, String separator)
/*      */   {
/* 8606 */     if (isEmpty(str)) {
/* 8607 */       return str;
/*      */     }
/* 8609 */     if (separator == null) {
/* 8610 */       return "";
/*      */     }
/* 8612 */     int pos = str.indexOf(separator);
/* 8613 */     if (pos == -1) {
/* 8614 */       return "";
/*      */     }
/* 8616 */     return str.substring(pos + separator.length());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substringAfterLast(String str, int separator)
/*      */   {
/* 8646 */     if (isEmpty(str)) {
/* 8647 */       return str;
/*      */     }
/* 8649 */     int pos = str.lastIndexOf(separator);
/* 8650 */     if (pos == -1 || pos == str.length() - 1) {
/* 8651 */       return "";
/*      */     }
/* 8653 */     return str.substring(pos + 1);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substringAfterLast(String str, String separator)
/*      */   {
/* 8686 */     if (isEmpty(str)) {
/* 8687 */       return str;
/*      */     }
/* 8689 */     if (isEmpty(separator)) {
/* 8690 */       return "";
/*      */     }
/* 8692 */     int pos = str.lastIndexOf(separator);
/* 8693 */     if (pos == -1 || pos == str.length() - separator.length()) {
/* 8694 */       return "";
/*      */     }
/* 8696 */     return str.substring(pos + separator.length());
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substringBefore(String str, int separator)
/*      */   {
/* 8727 */     if (isEmpty(str)) {
/* 8728 */       return str;
/*      */     }
/* 8730 */     int pos = str.indexOf(separator);
/* 8731 */     if (pos == -1) {
/* 8732 */       return str;
/*      */     }
/* 8734 */     return str.substring(0, pos);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substringBefore(String str, String separator)
/*      */   {
/* 8765 */     if (isEmpty(str) || separator == null) {
/* 8766 */       return str;
/*      */     }
/* 8768 */     if (separator.isEmpty()) {
/* 8769 */       return "";
/*      */     }
/* 8771 */     int pos = str.indexOf(separator);
/* 8772 */     if (pos == -1) {
/* 8773 */       return str;
/*      */     }
/* 8775 */     return str.substring(0, pos);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substringBeforeLast(String str, String separator)
/*      */   {
/* 8806 */     if (isEmpty(str) || isEmpty(separator)) {
/* 8807 */       return str;
/*      */     }
/* 8809 */     int pos = str.lastIndexOf(separator);
/* 8810 */     if (pos == -1) {
/* 8811 */       return str;
/*      */     }
/* 8813 */     return str.substring(0, pos);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substringBetween(String str, String tag)
/*      */   {
/* 8838 */     return substringBetween(str, tag, tag);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String substringBetween(String str, String open, String close)
/*      */   {
/* 8869 */     if (!ObjectUtils.allNotNull(new Object[] { str, open, close })) {
/* 8870 */       return null;
/*      */     }
/* 8872 */     int start = str.indexOf(open);
/* 8873 */     if (start != -1) {
/* 8874 */       int end = str.indexOf(close, start + open.length());
/* 8875 */       if (end != -1) {
/* 8876 */         return str.substring(start + open.length(), end);
/*      */       }
/*      */     }
/* 8879 */     return null;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String[] substringsBetween(String str, String open, String close)
/*      */   {
/* 8905 */     if (str == null || isEmpty(open) || isEmpty(close)) {
/* 8906 */       return null;
/*      */     }
/* 8908 */     int strLen = str.length();
/* 8909 */     if (strLen == 0) {
/* 8910 */       return ArrayUtils.EMPTY_STRING_ARRAY;
/*      */     }
/* 8912 */     int closeLen = close.length();
/* 8913 */     int openLen = open.length();
/* 8914 */     List<String> list = new ArrayList<>();
/* 8915 */     int pos = 0;
/* 8916 */     while (pos < strLen - closeLen) {
/* 8917 */       int start = str.indexOf(open, pos);
/* 8918 */       if (start < 0) {
/*      */         break;
/*      */       }
/* 8921 */       start += openLen;
/* 8922 */       int end = str.indexOf(close, start);
/* 8923 */       if (end < 0) {
/*      */         break;
/*      */       }
/* 8926 */       list.add(str.substring(start, end));
/* 8927 */       pos = end + closeLen;
/*      */     }
/* 8929 */     if (list.isEmpty()) {
/* 8930 */       return null;
/*      */     }
/* 8932 */     return (String[])list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String swapCase(String str)
/*      */   {
/* 8963 */     if (isEmpty(str)) {
/* 8964 */       return str;
/*      */     }
/*      */     
/* 8967 */     int strLen = str.length();
/* 8968 */     int[] newCodePoints = new int[strLen];
/* 8969 */     int outOffset = 0;
/* 8970 */     for (int i = 0; i < strLen;) {
/* 8971 */       int oldCodepoint = str.codePointAt(i);
/*      */       int newCodePoint;
/* 8973 */       if (Character.isUpperCase(oldCodepoint) || Character.isTitleCase(oldCodepoint)) {
/* 8974 */         newCodePoint = Character.toLowerCase(oldCodepoint);
/* 8975 */       } else if (Character.isLowerCase(oldCodepoint)) {
/* 8976 */         newCodePoint = Character.toUpperCase(oldCodepoint);
/*      */       } else {
/* 8978 */         newCodePoint = oldCodepoint;
/*      */       }
/* 8980 */       newCodePoints[(outOffset++)] = newCodePoint;
/* 8981 */       i += Character.charCount(newCodePoint);
/*      */     }
/* 8983 */     return new String(newCodePoints, 0, outOffset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int[] toCodePoints(CharSequence cs)
/*      */   {
/* 9003 */     if (cs == null) {
/* 9004 */       return null;
/*      */     }
/* 9006 */     if (cs.length() == 0) {
/* 9007 */       return ArrayUtils.EMPTY_INT_ARRAY;
/*      */     }
/*      */     
/* 9010 */     String s = cs.toString();
/* 9011 */     int[] result = new int[s.codePointCount(0, s.length())];
/* 9012 */     int index = 0;
/* 9013 */     for (int i = 0; i < result.length; i++) {
/* 9014 */       result[i] = s.codePointAt(index);
/* 9015 */       index += Character.charCount(result[i]);
/*      */     }
/* 9017 */     return result;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String toEncodedString(byte[] bytes, Charset charset)
/*      */   {
/* 9034 */     return new String(bytes, Charsets.toCharset(charset));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String toRootLowerCase(String source)
/*      */   {
/* 9045 */     return source == null ? null : source.toLowerCase(Locale.ROOT);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String toRootUpperCase(String source)
/*      */   {
/* 9056 */     return source == null ? null : source.toUpperCase(Locale.ROOT);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   @Deprecated
/*      */   public static String toString(byte[] bytes, String charsetName)
/*      */     throws UnsupportedEncodingException
/*      */   {
/* 9076 */     return new String(bytes, Charsets.toCharset(charsetName));
/*      */   }
/*      */   
/*      */   private static String toStringOrEmpty(Object obj) {
/* 9080 */     return Objects.toString(obj, "");
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String trim(String str)
/*      */   {
/* 9107 */     return str == null ? null : str.trim();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String trimToEmpty(String str)
/*      */   {
/* 9132 */     return str == null ? "" : str.trim();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String trimToNull(String str)
/*      */   {
/* 9158 */     String ts = trim(str);
/* 9159 */     return isEmpty(ts) ? null : ts;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String truncate(String str, int maxWidth)
/*      */   {
/* 9195 */     return truncate(str, 0, maxWidth);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String truncate(String str, int offset, int maxWidth)
/*      */   {
/* 9259 */     if (offset < 0) {
/* 9260 */       throw new IllegalArgumentException("offset cannot be negative");
/*      */     }
/* 9262 */     if (maxWidth < 0) {
/* 9263 */       throw new IllegalArgumentException("maxWith cannot be negative");
/*      */     }
/* 9265 */     if (str == null) {
/* 9266 */       return null;
/*      */     }
/* 9268 */     if (offset > str.length()) {
/* 9269 */       return "";
/*      */     }
/* 9271 */     if (str.length() > maxWidth) {
/* 9272 */       int ix = Math.min(offset + maxWidth, str.length());
/* 9273 */       return str.substring(offset, ix);
/*      */     }
/* 9275 */     return str.substring(offset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String uncapitalize(String str)
/*      */   {
/* 9300 */     int strLen = length(str);
/* 9301 */     if (strLen == 0) {
/* 9302 */       return str;
/*      */     }
/*      */     
/* 9305 */     int firstCodepoint = str.codePointAt(0);
/* 9306 */     int newCodePoint = Character.toLowerCase(firstCodepoint);
/* 9307 */     if (firstCodepoint == newCodePoint)
/*      */     {
/* 9309 */       return str;
/*      */     }
/*      */     
/* 9312 */     int[] newCodePoints = new int[strLen];
/* 9313 */     int outOffset = 0;
/* 9314 */     newCodePoints[(outOffset++)] = newCodePoint;
/* 9315 */     for (int inOffset = Character.charCount(firstCodepoint); inOffset < strLen;) {
/* 9316 */       int codepoint = str.codePointAt(inOffset);
/* 9317 */       newCodePoints[(outOffset++)] = codepoint;
/* 9318 */       inOffset += Character.charCount(codepoint);
/*      */     }
/* 9320 */     return new String(newCodePoints, 0, outOffset);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String unwrap(String str, char wrapChar)
/*      */   {
/* 9350 */     if (isEmpty(str) || wrapChar == 0 || str.length() == 1) {
/* 9351 */       return str;
/*      */     }
/*      */     
/* 9354 */     if (str.charAt(0) == wrapChar && str.charAt(str.length() - 1) == wrapChar) {
/* 9355 */       int startIndex = 0;
/* 9356 */       int endIndex = str.length() - 1;
/*      */       
/* 9358 */       return str.substring(1, endIndex);
/*      */     }
/*      */     
/* 9361 */     return str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String unwrap(String str, String wrapToken)
/*      */   {
/* 9392 */     if (isEmpty(str) || isEmpty(wrapToken) || str.length() < 2 * wrapToken.length()) {
/* 9393 */       return str;
/*      */     }
/*      */     
/* 9396 */     if (startsWith(str, wrapToken) && endsWith(str, wrapToken)) {
/* 9397 */       int startIndex = str.indexOf(wrapToken);
/* 9398 */       int endIndex = str.lastIndexOf(wrapToken);
/* 9399 */       int wrapLength = wrapToken.length();
/*      */       
/* 9401 */       if (startIndex != -1 && endIndex != -1) {
/* 9402 */         return str.substring(startIndex + wrapLength, endIndex);
/*      */       }
/*      */     }
/*      */     
/* 9406 */     return str;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String upperCase(String str)
/*      */   {
/* 9429 */     if (str == null) {
/* 9430 */       return null;
/*      */     }
/* 9432 */     return str.toUpperCase();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String upperCase(String str, Locale locale)
/*      */   {
/* 9452 */     if (str == null) {
/* 9453 */       return null;
/*      */     }
/* 9455 */     return str.toUpperCase(LocaleUtils.toLocale(locale));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String valueOf(char[] value)
/*      */   {
/* 9467 */     return value == null ? null : String.valueOf(value);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String wrap(String str, char wrapWith)
/*      */   {
/* 9493 */     if (isEmpty(str) || wrapWith == 0) {
/* 9494 */       return str;
/*      */     }
/*      */     
/* 9497 */     return wrapWith + str + wrapWith;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String wrap(String str, String wrapWith)
/*      */   {
/* 9531 */     if (isEmpty(str) || isEmpty(wrapWith)) {
/* 9532 */       return str;
/*      */     }
/*      */     
/* 9535 */     return wrapWith.concat(str).concat(wrapWith);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String wrapIfMissing(String str, char wrapWith)
/*      */   {
/* 9566 */     if (isEmpty(str) || wrapWith == 0) {
/* 9567 */       return str;
/*      */     }
/* 9569 */     boolean wrapStart = str.charAt(0) != wrapWith;
/* 9570 */     boolean wrapEnd = str.charAt(str.length() - 1) != wrapWith;
/* 9571 */     if (!wrapStart && !wrapEnd) {
/* 9572 */       return str;
/*      */     }
/*      */     
/* 9575 */     StringBuilder builder = new StringBuilder(str.length() + 2);
/* 9576 */     if (wrapStart) {
/* 9577 */       builder.append(wrapWith);
/*      */     }
/* 9579 */     builder.append(str);
/* 9580 */     if (wrapEnd) {
/* 9581 */       builder.append(wrapWith);
/*      */     }
/* 9583 */     return builder.toString();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static String wrapIfMissing(String str, String wrapWith)
/*      */   {
/* 9618 */     if (isEmpty(str) || isEmpty(wrapWith)) {
/* 9619 */       return str;
/*      */     }
/*      */     
/* 9622 */     boolean wrapStart = !str.startsWith(wrapWith);
/* 9623 */     boolean wrapEnd = !str.endsWith(wrapWith);
/* 9624 */     if (!wrapStart && !wrapEnd) {
/* 9625 */       return str;
/*      */     }
/*      */     
/* 9628 */     StringBuilder builder = new StringBuilder(str.length() + wrapWith.length() + wrapWith.length());
/* 9629 */     if (wrapStart) {
/* 9630 */       builder.append(wrapWith);
/*      */     }
/* 9632 */     builder.append(str);
/* 9633 */     if (wrapEnd) {
/* 9634 */       builder.append(wrapWith);
/*      */     }
/* 9636 */     return builder.toString();
/*      */   }
/*      */ }
