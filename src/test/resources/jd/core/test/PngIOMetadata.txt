/*     */ package net.sourceforge.plantuml.png;
/*     */ 
/*     */ import java.awt.image.RenderedImage;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStream;
/*     */ import java.util.Iterator;
/*     */ import javax.imageio.IIOImage;
/*     */ import javax.imageio.ImageIO;
/*     */ import javax.imageio.ImageTypeSpecifier;
/*     */ import javax.imageio.ImageWriteParam;
/*     */ import javax.imageio.ImageWriter;
/*     */ import javax.imageio.metadata.IIOInvalidTreeException;
/*     */ import javax.imageio.metadata.IIOMetadata;
/*     */ import javax.imageio.metadata.IIOMetadataNode;
/*     */ import javax.imageio.stream.ImageOutputStream;
/*     */ import net.sourceforge.plantuml.security.SImageIO;
/*     */ import net.sourceforge.plantuml.utils.Log;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class PngIOMetadata
/*     */ {
/*     */   private static final String copyleft = "Generated by https://plantuml.com";
/*     */   
/*     */   public static void writeWithMetadata(RenderedImage image, OutputStream os, String metadata, int dpi, String debugData)
/*     */     throws IOException
/*     */   {
/*  68 */     writeInternal(image, os, metadata, dpi, debugData);
/*     */   }
/*     */   
/*     */   private static void writeInternal(RenderedImage image, OutputStream os, String metadata, int dpi, String debugData)
/*     */     throws IOException
/*     */   {
/*  74 */     ImageWriter writer = (ImageWriter)ImageIO.getImageWritersByFormatName("png").next();
/*  75 */     ImageWriteParam writeParam = writer.getDefaultWriteParam();
/*     */     
/*  77 */     ImageTypeSpecifier typeSpecifier = ImageTypeSpecifier.createFromBufferedImageType(1);
/*     */     
/*  79 */     IIOMetadata meta = writer.getDefaultImageMetadata(typeSpecifier, writeParam);
/*     */     
/*  81 */     if (dpi != 96) {
/*  82 */       addDpi(meta, dpi);
/*     */     }
/*     */     
/*  85 */     if (debugData != null) {
/*  86 */       addText(meta, "debug", debugData);
/*     */     }
/*  88 */     addText(meta, "copyleft", "Generated by https://plantuml.com");
/*  89 */     addiText(meta, "plantuml", metadata);
/*     */     
/*  91 */     Log.debug("PngIOMetadata pngMetadata=" + meta);
/*     */     
/*     */ 
/*  94 */     IIOImage iioImage = new IIOImage(image, null, meta);
/*  95 */     Log.debug("PngIOMetadata iioImage=" + iioImage);
/*     */     
/*  97 */     ImageWriter imagewriter = getImageWriter();
/*  98 */     Log.debug("PngIOMetadata imagewriter=" + imagewriter);
/*     */     
/*     */ 
/*     */ 
/*     */ 
/* 103 */     synchronized (imagewriter) {
/* 104 */       ImageOutputStream imageOutputStream = SImageIO.createImageOutputStream(os);
/* 105 */       imagewriter.setOutput(imageOutputStream);
/*     */       try {
/* 107 */         imagewriter.write(null, iioImage, null);
/*     */       }
/*     */       finally
/*     */       {
/* 111 */         imageOutputStream.flush();
/*     */         
/* 113 */         imageOutputStream.close();
/*     */         
/* 115 */         imagewriter.reset();
/*     */         
/* 117 */         imagewriter.dispose();
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   private static void addDpi(IIOMetadata meta, double dpi) throws IIOInvalidTreeException
/*     */   {
/* 124 */     IIOMetadataNode dimension = new IIOMetadataNode("Dimension");
/*     */     
/* 126 */     IIOMetadataNode horizontalPixelSize = new IIOMetadataNode("HorizontalPixelSize");
/* 127 */     double value = dpi / 0.0254D / 1000.0D;
/* 128 */     horizontalPixelSize.setAttribute("value", Double.toString(value));
/* 129 */     dimension.appendChild(horizontalPixelSize);
/*     */     
/* 131 */     IIOMetadataNode verticalPixelSize = new IIOMetadataNode("VerticalPixelSize");
/* 132 */     verticalPixelSize.setAttribute("value", Double.toString(value));
/* 133 */     dimension.appendChild(verticalPixelSize);
/*     */     
/* 135 */     IIOMetadataNode root = new IIOMetadataNode("javax_imageio_1.0");
/* 136 */     root.appendChild(dimension);
/*     */     
/* 138 */     meta.mergeTree("javax_imageio_1.0", root);
/*     */   }
/*     */   
/*     */   private static void addiText(IIOMetadata meta, String key, String value) throws IIOInvalidTreeException
/*     */   {
/* 143 */     IIOMetadataNode text = new IIOMetadataNode("iTXt");
/* 144 */     IIOMetadataNode entry = new IIOMetadataNode("iTXtEntry");
/* 145 */     entry.setAttribute("keyword", key);
/* 146 */     entry.setAttribute("compressionFlag", "true");
/* 147 */     entry.setAttribute("compressionMethod", "0");
/* 148 */     entry.setAttribute("languageTag", "");
/* 149 */     entry.setAttribute("translatedKeyword", "");
/* 150 */     entry.setAttribute("text", value);
/*     */     
/* 152 */     text.appendChild(entry);
/* 153 */     IIOMetadataNode root = new IIOMetadataNode("javax_imageio_png_1.0");
/* 154 */     root.appendChild(text);
/*     */     
/* 156 */     meta.mergeTree("javax_imageio_png_1.0", root);
/*     */   }
/*     */   
/*     */   private static void addText(IIOMetadata meta, String key, String value) throws IIOInvalidTreeException
/*     */   {
/* 161 */     IIOMetadataNode text = new IIOMetadataNode("tEXt");
/* 162 */     IIOMetadataNode entry = new IIOMetadataNode("tEXtEntry");
/* 163 */     entry.setAttribute("keyword", key);
/* 164 */     entry.setAttribute("value", value);
/*     */     
/* 166 */     text.appendChild(entry);
/* 167 */     IIOMetadataNode root = new IIOMetadataNode("javax_imageio_png_1.0");
/* 168 */     root.appendChild(text);
/*     */     
/* 170 */     meta.mergeTree("javax_imageio_png_1.0", root);
/*     */   }
/*     */   
/*     */   private static ImageWriter getImageWriter() {
/* 174 */     Iterator<ImageWriter> iterator = SImageIO.getImageWritersBySuffix("png");
/* 175 */     for (Iterator<ImageWriter> it = SImageIO.getImageWritersBySuffix("png"); it.hasNext();) {
/* 176 */       ImageWriter imagewriter = (ImageWriter)iterator.next();
/* 177 */       Log.debug("PngIOMetadata countImageWriter = " + it.next());
/* 178 */       if (imagewriter.getClass().getName().equals("com.sun.imageio.plugins.png.PNGImageWriter")) {
/* 179 */         Log.debug("PngIOMetadata Found sun PNGImageWriter");
/* 180 */         return imagewriter;
/*     */       }
/*     */     }
/*     */     
/* 184 */     Log.debug("Using first one");
/* 185 */     return (ImageWriter)SImageIO.getImageWritersBySuffix("png").next();
/*     */   }
/*     */ }
