/*     */ package org.apache.commons.lang3.builder;
/*     */ 
/*     */ import java.lang.reflect.AccessibleObject;
/*     */ import java.lang.reflect.Field;
/*     */ import java.lang.reflect.Modifier;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Arrays;
/*     */ import java.util.Collection;
/*     */ import java.util.Comparator;
/*     */ import java.util.List;
/*     */ import org.apache.commons.lang3.ArraySorter;
/*     */ import org.apache.commons.lang3.ArrayUtils;
/*     */ import org.apache.commons.lang3.Validate;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ReflectionToStringBuilder
/*     */   extends ToStringBuilder
/*     */ {
/*     */   private boolean appendStatics;
/*     */   private boolean appendTransients;
/*     */   private boolean excludeNullValues;
/*     */   protected String[] excludeFieldNames;
/*     */   private Class<?> upToClass;
/*     */   
/*     */   public static String toString(Object object)
/*     */   {
/* 131 */     return toString(object, null, false, false, null);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static String toString(Object object, ToStringStyle style)
/*     */   {
/* 166 */     return toString(object, style, false, false, null);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static String toString(Object object, ToStringStyle style, boolean outputTransients)
/*     */   {
/* 207 */     return toString(object, style, outputTransients, false, null);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static String toString(Object object, ToStringStyle style, boolean outputTransients, boolean outputStatics)
/*     */   {
/* 256 */     return toString(object, style, outputTransients, outputStatics, null);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <T> String toString(T object, ToStringStyle style, boolean outputTransients, boolean outputStatics, Class<? super T> reflectUpToClass)
/*     */   {
/* 312 */     return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients, outputStatics)
/* 313 */       .toString();
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <T> String toString(T object, ToStringStyle style, boolean outputTransients, boolean outputStatics, boolean excludeNullValues, Class<? super T> reflectUpToClass)
/*     */   {
/* 371 */     return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients, outputStatics, excludeNullValues)
/* 372 */       .toString();
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static String toStringExclude(Object object, Collection<String> excludeFieldNames)
/*     */   {
/* 385 */     return toStringExclude(object, toNoNullStringArray(excludeFieldNames));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static String[] toNoNullStringArray(Collection<String> collection)
/*     */   {
/* 398 */     if (collection == null) {
/* 399 */       return ArrayUtils.EMPTY_STRING_ARRAY;
/*     */     }
/* 401 */     return toNoNullStringArray(collection.toArray());
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static String[] toNoNullStringArray(Object[] array)
/*     */   {
/* 414 */     List<String> list = new ArrayList<>(array.length);
/* 415 */     for (Object e : array) {
/* 416 */       if (e != null) {
/* 417 */         list.add(e.toString());
/*     */       }
/*     */     }
/* 420 */     return (String[])list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static String toStringExclude(Object object, String... excludeFieldNames)
/*     */   {
/* 434 */     return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();
/*     */   }
/*     */   
/*     */   private static Object checkNotNull(Object obj) {
/* 438 */     return Validate.notNull(obj, "obj");
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public ReflectionToStringBuilder(Object object)
/*     */   {
/* 483 */     super(checkNotNull(object));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public ReflectionToStringBuilder(Object object, ToStringStyle style)
/*     */   {
/* 503 */     super(checkNotNull(object), style);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer)
/*     */   {
/* 529 */     super(checkNotNull(object), style, buffer);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public <T> ReflectionToStringBuilder(T object, ToStringStyle style, StringBuffer buffer, Class<? super T> reflectUpToClass, boolean outputTransients, boolean outputStatics)
/*     */   {
/* 554 */     super(checkNotNull(object), style, buffer);
/* 555 */     setUpToClass(reflectUpToClass);
/* 556 */     setAppendTransients(outputTransients);
/* 557 */     setAppendStatics(outputStatics);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public <T> ReflectionToStringBuilder(T object, ToStringStyle style, StringBuffer buffer, Class<? super T> reflectUpToClass, boolean outputTransients, boolean outputStatics, boolean excludeNullValues)
/*     */   {
/* 585 */     super(checkNotNull(object), style, buffer);
/* 586 */     setUpToClass(reflectUpToClass);
/* 587 */     setAppendTransients(outputTransients);
/* 588 */     setAppendStatics(outputStatics);
/* 589 */     setExcludeNullValues(excludeNullValues);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   protected boolean accept(Field field)
/*     */   {
/* 605 */     if (field.getName().indexOf('$') != -1)
/*     */     {
/* 607 */       return false;
/*     */     }
/* 609 */     if (Modifier.isTransient(field.getModifiers()) && !isAppendTransients())
/*     */     {
/* 611 */       return false;
/*     */     }
/* 613 */     if (Modifier.isStatic(field.getModifiers()) && !isAppendStatics())
/*     */     {
/* 615 */       return false;
/*     */     }
/* 617 */     if (this.excludeFieldNames != null && 
/* 618 */       Arrays.binarySearch(this.excludeFieldNames, field.getName()) >= 0)
/*     */     {
/* 620 */       return false;
/*     */     }
/* 622 */     return !field.isAnnotationPresent(ToStringExclude.class);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   protected void appendFieldsIn(Class<?> clazz)
/*     */   {
/* 639 */     if (clazz.isArray()) {
/* 640 */       reflectionAppendArray(getObject());
/* 641 */       return;
/*     */     }
/*     */     
/* 644 */     Field[] fields = (Field[])ArraySorter.sort(clazz.getDeclaredFields(), Comparator.comparing(Field::getName));
/* 645 */     AccessibleObject.setAccessible(fields, true);
/* 646 */     for (Field field : fields) {
/* 647 */       String fieldName = field.getName();
/* 648 */       if (!accept(field)) {
/*     */         continue;
/*     */       }
/*     */       try {
/* 652 */         Object fieldValue = getValue(field);
/* 653 */         if (!this.excludeNullValues || fieldValue != null) {
/* 654 */           append(fieldName, fieldValue, !field.isAnnotationPresent(ToStringSummary.class));
/*     */         }
/*     */         
/*     */ 
/*     */       }
/*     */       catch (IllegalAccessException ex)
/*     */       {
/* 661 */         throw new InternalError("Unexpected IllegalAccessException: " + ex.getMessage());
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */   public String[] getExcludeFieldNames()
/*     */   {
/* 671 */     return (String[])this.excludeFieldNames.clone();
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public Class<?> getUpToClass()
/*     */   {
/* 682 */     return this.upToClass;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   protected Object getValue(Field field)
/*     */     throws IllegalAccessException
/*     */   {
/* 702 */     return field.get(getObject());
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public boolean isAppendStatics()
/*     */   {
/* 714 */     return this.appendStatics;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public boolean isAppendTransients()
/*     */   {
/* 725 */     return this.appendTransients;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public boolean isExcludeNullValues()
/*     */   {
/* 737 */     return this.excludeNullValues;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public ReflectionToStringBuilder reflectionAppendArray(Object array)
/*     */   {
/* 750 */     getStyle().reflectionAppendArrayDetail(getStringBuffer(), null, array);
/* 751 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public void setAppendStatics(boolean appendStatics)
/*     */   {
/* 764 */     this.appendStatics = appendStatics;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public void setAppendTransients(boolean appendTransients)
/*     */   {
/* 776 */     this.appendTransients = appendTransients;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public void setExcludeNullValues(boolean excludeNullValues)
/*     */   {
/* 789 */     this.excludeNullValues = excludeNullValues;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public ReflectionToStringBuilder setExcludeFieldNames(String... excludeFieldNamesParam)
/*     */   {
/* 800 */     if (excludeFieldNamesParam == null) {
/* 801 */       this.excludeFieldNames = null;
/*     */     }
/*     */     else {
/* 804 */       this.excludeFieldNames = ((String[])ArraySorter.sort(toNoNullStringArray(excludeFieldNamesParam)));
/*     */     }
/* 806 */     return this;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public void setUpToClass(Class<?> clazz)
/*     */   {
/* 818 */     if (clazz != null) {
/* 819 */       Object object = getObject();
/* 820 */       if (object != null && !clazz.isInstance(object)) {
/* 821 */         throw new IllegalArgumentException("Specified class is not a superclass of the object");
/*     */       }
/*     */     }
/* 824 */     this.upToClass = clazz;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   @Override
/*     */   public String toString()
/*     */   {
/* 836 */     if (getObject() == null) {
/* 837 */       return getStyle().getNullText();
/*     */     }
/* 839 */     Class<?> clazz = getObject().getClass();
/* 840 */     appendFieldsIn(clazz);
/* 841 */     while (clazz.getSuperclass() != null && clazz != getUpToClass()) {
/* 842 */       clazz = clazz.getSuperclass();
/* 843 */       appendFieldsIn(clazz);
/*     */     }
/* 845 */     return super.toString();
/*     */   }
/*     */ }
