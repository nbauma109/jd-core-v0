/*     */ package net.sourceforge.plantuml.code;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class AsciiEncoder
/*     */   implements URLEncoder
/*     */ {
/*     */   static final char[] encode6bit;
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static final byte[] decode6bit;
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   static
/*     */   {
/*  41 */     encode6bit = new char[64];
/*  42 */     decode6bit = new byte[128];
/*     */     
/*     */ 
/*  45 */     for (byte b = 0; b < 64; b = (byte)(b + 1)) {
/*  46 */       encode6bit[b] = encode6bit(b);
/*  47 */       decode6bit[encode6bit[b]] = b;
/*     */     }
/*     */   }
/*     */   
/*     */   @Override
/*  52 */   public String encode(byte[] data) { if (data == null) {
/*  53 */       return "";
/*     */     }
/*  55 */     StringBuilder result = new StringBuilder((data.length * 4 + 2) / 3);
/*  56 */     for (int i = 0; i < data.length; i += 3) {
/*  57 */       append3bytes(result, data[i] & 0xFF, i + 1 < data.length ? data[(i + 1)] & 0xFF : 0, 
/*  58 */         i + 2 < data.length ? data[(i + 2)] & 0xFF : 0);
/*     */     }
/*  60 */     return result.toString();
/*     */   }
/*     */   
/*     */ 
/*     */   @Override
/*     */   public byte[] decode(String s)
/*     */   {
/*  67 */     byte[] data = new byte[computeSize(s.length())];
/*  68 */     int pos = 0;
/*  69 */     for (int i = 0; i < s.length(); i += 4) {
/*  70 */       decode3bytes(data, pos, scharAt(s, i), scharAt(s, i + 1), scharAt(s, i + 2), scharAt(s, i + 3));
/*  71 */       pos += 3;
/*     */     }
/*  73 */     return data;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */   private int computeSize(int length)
/*     */   {
/*  80 */     int r = length % 4;
/*  81 */     if (r != 0) {
/*  82 */       length += 4 - r;
/*     */     }
/*     */     
/*     */ 
/*     */ 
/*     */ 
/*  88 */     assert (length % 4 == 0) : ("length=" + length);
/*  89 */     return (length * 3 + 3) / 4;
/*     */   }
/*     */   
/*     */   private char scharAt(String s, int i) {
/*  93 */     if (i >= s.length()) {
/*  94 */       return '0';
/*     */     }
/*  96 */     return s.charAt(i);
/*     */   }
/*     */   
/*     */   public static int decode6bit(char c) {
/* 100 */     return decode6bit[c];
/*     */   }
/*     */   
/*     */   public static char encode6bit(byte b) {
/* 104 */     assert (b >= 0 && b < 64);
/* 105 */     if (b < 10) {
/* 106 */       return (char)(48 + b);
/*     */     }
/* 108 */     b = (byte)(b - 10);
/* 109 */     if (b < 26) {
/* 110 */       return (char)(65 + b);
/*     */     }
/* 112 */     b = (byte)(b - 26);
/* 113 */     if (b < 26) {
/* 114 */       return (char)(97 + b);
/*     */     }
/* 116 */     b = (byte)(b - 26);
/* 117 */     if (b == 0) {
/* 118 */       return '-';
/*     */     }
/* 120 */     if (b == 1) {
/* 121 */       return '_';
/*     */     }
/* 123 */     assert false;
/* 124 */     return '?';
/*     */   }
/*     */   
/*     */   private void append3bytes(StringBuilder sb, int b1, int b2, int b3) {
/* 128 */     int c1 = b1 >> 2;
/* 129 */     int c2 = (b1 & 0x3) << 4 | b2 >> 4;
/* 130 */     int c3 = (b2 & 0xF) << 2 | b3 >> 6;
/* 131 */     int c4 = b3 & 0x3F;
/* 132 */     sb.append(encode6bit[(c1 & 0x3F)]);
/* 133 */     sb.append(encode6bit[(c2 & 0x3F)]);
/* 134 */     sb.append(encode6bit[(c3 & 0x3F)]);
/* 135 */     sb.append(encode6bit[(c4 & 0x3F)]);
/*     */   }
/*     */   
/*     */   private void decode3bytes(byte[] r, int pos, char cc1, char cc2, char cc3, char cc4) {
/* 139 */     int c1 = decode6bit[cc1];
/* 140 */     int c2 = decode6bit[cc2];
/* 141 */     int c3 = decode6bit[cc3];
/* 142 */     int c4 = decode6bit[cc4];
/* 143 */     r[pos] = ((byte)(c1 << 2 | c2 >> 4));
/* 144 */     r[(pos + 1)] = ((byte)((c2 & 0xF) << 4 | c3 >> 2));
/* 145 */     r[(pos + 2)] = ((byte)((c3 & 0x3) << 6 | c4));
/*     */   }
/*     */ }
