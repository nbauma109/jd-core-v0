/*     */ package jd.core.test;
/*     */ 
/*     */ import java.io.Serializable;
/*     */ import java.security.AccessController;
/*     */ import java.security.PrivilegedAction;
/*     */ 
/*     */ public class DotClass14
/*     */ {
/*     */   Class clazz;
/*     */   static Class staticClass;
/*  11 */   static final Class CONST = Object.class;
/*  12 */   static final Class ARRAY_CONST = Object[].class;
/*     */   
/*     */   boolean getField() {
/*  15 */     return this.clazz.equals(Object.class);
/*     */   }
/*     */   
/*     */   boolean preInc(Object[] array, int i) {
/*  19 */     return array[(++i)] == Object.class;
/*     */   }
/*     */   
/*     */   boolean postInc(Object[] array, int i) {
/*  23 */     return array[(i++)] == Object.class;
/*     */   }
/*     */   
/*     */   boolean arrayLoad(Object[] array) {
/*  27 */     return array[0].getClass() == Object.class;
/*     */   }
/*     */   
/*     */   boolean aNewArray() {
/*  31 */     return new Object[0].equals(Object.class);
/*     */   }
/*     */   
/*     */   Class xReturn() {
/*  35 */     return Object.class;
/*     */   }
/*     */   
/*     */   Class ldc(int dim) {
/*  39 */     return dim == 0 ? CONST : ARRAY_CONST;
/*     */   }
/*     */   
/*     */   void putField() {
/*  43 */     this.clazz = Object.class;
/*     */   }
/*     */   
/*     */   void putStatic() {
/*  47 */     staticClass = Object.class;
/*     */   }
/*     */   
/*     */   void aThrow() {
/*  51 */     throw new RuntimeException(String.valueOf(Object.class));
/*     */   }
/*     */   
/*     */   Class instanceOf(Class c) {
/*  55 */     if ((Object.class instanceof Class)) {
/*  56 */       return c;
/*     */     }
/*  58 */     return null;
/*     */   }
/*     */   
/*     */   Class ifCmp(Class c) {
/*  62 */     if (Object.class == c)
/*  63 */       return c;
/*  64 */     if (c == Object.class) {
/*  65 */       return c;
/*     */     }
/*  67 */     return null;
/*     */   }
/*     */   
/*     */   void aStore() {
/*  71 */     Class c = Object.class;
/*  72 */     System.out.println(c);
/*     */   }
/*     */   
/*     */   Object aaStore() {
/*  76 */     return new Class[] { String[].class };
/*     */   }
/*     */   
/*     */   int unaryOp() {
/*  80 */     return -Object.class.hashCode();
/*     */   }
/*     */   
/*     */   int binaryOp() {
/*  84 */     return Object.class.hashCode() + Object.class.hashCode();
/*     */   }
/*     */   
/*     */   void invokeStatic() {
/*  88 */     print(Object.class);
/*     */   }
/*     */   
/*     */   void invokeVirtual() {
/*  92 */     System.out.println(Object.class);
/*     */   }
/*     */   
/*     */   native Serializable readValue(Class paramClass);
/*     */   
/*     */   void checkCast() {
/*  98 */     this.clazz = (Class)readValue(Object.class);
/*     */   }
/*     */   
/*     */   void pop() {
/* 102 */     readValue(Object.class);
/*     */   }
/*     */   
/*     */   Class ternaryOpStore(String subtypeName) throws ClassNotFoundException {
/* 106 */     if (subtypeName == null) { if (class$0 != null) break label40; class$0; try { tmpTernaryOp = (class$0 = Class.forName("java.lang.Object")); } catch (ClassNotFoundException localClassNotFoundException) { throw new NoClassDefFoundError(localClassNotFoundException.getMessage()); } } label40: Class subtype = Class.forName(subtypeName);
/* 107 */     return subtype;
/*     */   }
/*     */   
/*     */   static native void print(Class paramClass);
/*     */   
/*     */   Class dupStore(Class c) {
/* 113 */     Class tmp = null;
/*     */     try {
/* 115 */       return tmp = c == (tmp = Object.class) ? (tmp = Integer.TYPE) : (tmp = Long.TYPE);
/*     */     } finally {
/* 117 */       System.out.println(tmp);
/*     */     }
/*     */   }
/*     */   
/*     */   Object anonymous() {
/* 122 */     return AccessController.doPrivileged(new PrivilegedAction() {
/*     */       public Object run() {
/* 124 */         return Object.class;
/*     */       }
/*     */     });
/*     */   }
/*     */ }
