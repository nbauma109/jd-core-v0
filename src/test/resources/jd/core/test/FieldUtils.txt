/*     */ package org.apache.commons.lang3.reflect;
/*     */ 
/*     */ import java.lang.annotation.Annotation;
/*     */ import java.lang.reflect.Field;
/*     */ import java.lang.reflect.Modifier;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collections;
/*     */ import java.util.List;
/*     */ import org.apache.commons.lang3.ArrayUtils;
/*     */ import org.apache.commons.lang3.ClassUtils;
/*     */ import org.apache.commons.lang3.JavaVersion;
/*     */ import org.apache.commons.lang3.StringUtils;
/*     */ import org.apache.commons.lang3.SystemUtils;
/*     */ import org.apache.commons.lang3.Validate;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class FieldUtils
/*     */ {
/*     */   public static Field getField(Class<?> cls, String fieldName)
/*     */   {
/*  65 */     Field field = getField(cls, fieldName, false);
/*  66 */     MemberUtils.setAccessibleWorkaround(field);
/*  67 */     return field;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Field getField(Class<?> cls, String fieldName, boolean forceAccess)
/*     */   {
/*  88 */     Validate.notNull(cls, "cls");
/*  89 */     Validate.isTrue(StringUtils.isNotBlank(fieldName), "The field name must not be blank/empty");
/*     */     
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/* 105 */     for (Class<?> acls = cls; acls != null; acls = acls.getSuperclass()) {
/*     */       try {
/* 107 */         Field field = acls.getDeclaredField(fieldName);
/*     */         
/*     */ 
/* 110 */         if (!Modifier.isPublic(field.getModifiers())) {
/* 111 */           if (forceAccess) {
/* 112 */             field.setAccessible(true);
/*     */           } else {
/*     */             continue;
/*     */           }
/*     */         }
/* 117 */         return field;
/*     */       }
/*     */       catch (NoSuchFieldException localNoSuchFieldException) {}
/*     */     }
/*     */     
/*     */ 
/*     */ 
/*     */ 
/* 125 */     Field match = null;
/* 126 */     for (Class<?> class1 : ClassUtils.getAllInterfaces(cls)) {
/*     */       try {
/* 128 */         Field test = class1.getField(fieldName);
/* 129 */         Validate.isTrue(match == null, "Reference to field %s is ambiguous relative to %s; a matching field exists on two or more implemented interfaces.", fieldName, cls);
/*     */         
/* 131 */         match = test;
/*     */       }
/*     */       catch (NoSuchFieldException localNoSuchFieldException1) {}
/*     */     }
/*     */     
/* 136 */     return match;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Field getDeclaredField(Class<?> cls, String fieldName)
/*     */   {
/* 151 */     return getDeclaredField(cls, fieldName, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Field getDeclaredField(Class<?> cls, String fieldName, boolean forceAccess)
/*     */   {
/* 171 */     Validate.notNull(cls, "cls");
/* 172 */     Validate.isTrue(StringUtils.isNotBlank(fieldName), "The field name must not be blank/empty");
/*     */     try
/*     */     {
/* 175 */       Field field = cls.getDeclaredField(fieldName);
/* 176 */       if (!MemberUtils.isAccessible(field)) {
/* 177 */         if (forceAccess) {
/* 178 */           field.setAccessible(true);
/*     */         } else {
/* 180 */           return null;
/*     */         }
/*     */       }
/* 183 */       return field;
/*     */     }
/*     */     catch (NoSuchFieldException localNoSuchFieldException) {}
/*     */     
/* 187 */     return null;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Field[] getAllFields(Class<?> cls)
/*     */   {
/* 201 */     List<Field> allFieldsList = getAllFieldsList(cls);
/* 202 */     return (Field[])allFieldsList.toArray(ArrayUtils.EMPTY_FIELD_ARRAY);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static List<Field> getAllFieldsList(Class<?> cls)
/*     */   {
/* 216 */     Validate.notNull(cls, "cls");
/* 217 */     List<Field> allFields = new ArrayList<>();
/* 218 */     Class<?> currentClass = cls;
/* 219 */     while (currentClass != null) {
/* 220 */       Field[] declaredFields = currentClass.getDeclaredFields();
/* 221 */       Collections.addAll(allFields, declaredFields);
/* 222 */       currentClass = currentClass.getSuperclass();
/*     */     }
/* 224 */     return allFields;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Field[] getFieldsWithAnnotation(Class<?> cls, Class<? extends Annotation> annotationCls)
/*     */   {
/* 239 */     List<Field> annotatedFieldsList = getFieldsListWithAnnotation(cls, annotationCls);
/* 240 */     return (Field[])annotatedFieldsList.toArray(ArrayUtils.EMPTY_FIELD_ARRAY);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static List<Field> getFieldsListWithAnnotation(Class<?> cls, Class<? extends Annotation> annotationCls)
/*     */   {
/* 255 */     Validate.notNull(annotationCls, "annotationCls");
/* 256 */     List<Field> allFields = getAllFieldsList(cls);
/* 257 */     List<Field> annotatedFields = new ArrayList<>();
/* 258 */     for (Field field : allFields) {
/* 259 */       if (field.getAnnotation(annotationCls) != null) {
/* 260 */         annotatedFields.add(field);
/*     */       }
/*     */     }
/* 263 */     return annotatedFields;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readStaticField(Field field)
/*     */     throws IllegalAccessException
/*     */   {
/* 278 */     return readStaticField(field, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readStaticField(Field field, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 296 */     Validate.notNull(field, "field");
/* 297 */     Validate.isTrue(Modifier.isStatic(field.getModifiers()), "The field '%s' is not static", field.getName());
/* 298 */     return readField(field, null, forceAccess);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readStaticField(Class<?> cls, String fieldName)
/*     */     throws IllegalAccessException
/*     */   {
/* 316 */     return readStaticField(cls, fieldName, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readStaticField(Class<?> cls, String fieldName, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 338 */     Field field = getField(cls, fieldName, forceAccess);
/* 339 */     Validate.notNull(field, "Cannot locate field '%s' on %s", fieldName, cls);
/*     */     
/* 341 */     return readStaticField(field, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readDeclaredStaticField(Class<?> cls, String fieldName)
/*     */     throws IllegalAccessException
/*     */   {
/* 360 */     return readDeclaredStaticField(cls, fieldName, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readDeclaredStaticField(Class<?> cls, String fieldName, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 382 */     Field field = getDeclaredField(cls, fieldName, forceAccess);
/* 383 */     Validate.notNull(field, "Cannot locate declared field %s.%s", cls.getName(), fieldName);
/*     */     
/* 385 */     return readStaticField(field, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readField(Field field, Object target)
/*     */     throws IllegalAccessException
/*     */   {
/* 402 */     return readField(field, target, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readField(Field field, Object target, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 422 */     Validate.notNull(field, "field");
/* 423 */     if (forceAccess && !field.isAccessible()) {
/* 424 */       field.setAccessible(true);
/*     */     } else {
/* 426 */       MemberUtils.setAccessibleWorkaround(field);
/*     */     }
/* 428 */     return field.get(target);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readField(Object target, String fieldName)
/*     */     throws IllegalAccessException
/*     */   {
/* 445 */     return readField(target, fieldName, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readField(Object target, String fieldName, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 466 */     Validate.notNull(target, "target");
/* 467 */     Class<?> cls = target.getClass();
/* 468 */     Field field = getField(cls, fieldName, forceAccess);
/* 469 */     Validate.isTrue(field != null, "Cannot locate field %s on %s", fieldName, cls);
/*     */     
/* 471 */     return readField(field, target, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readDeclaredField(Object target, String fieldName)
/*     */     throws IllegalAccessException
/*     */   {
/* 488 */     return readDeclaredField(target, fieldName, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static Object readDeclaredField(Object target, String fieldName, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 509 */     Validate.notNull(target, "target");
/* 510 */     Class<?> cls = target.getClass();
/* 511 */     Field field = getDeclaredField(cls, fieldName, forceAccess);
/* 512 */     Validate.isTrue(field != null, "Cannot locate declared field %s.%s", cls, fieldName);
/*     */     
/* 514 */     return readField(field, target, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeStaticField(Field field, Object value)
/*     */     throws IllegalAccessException
/*     */   {
/* 530 */     writeStaticField(field, value, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeStaticField(Field field, Object value, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 550 */     Validate.notNull(field, "field");
/* 551 */     Validate.isTrue(Modifier.isStatic(field.getModifiers()), "The field %s.%s is not static", field.getDeclaringClass().getName(), field
/* 552 */       .getName());
/* 553 */     writeField(field, null, value, forceAccess);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeStaticField(Class<?> cls, String fieldName, Object value)
/*     */     throws IllegalAccessException
/*     */   {
/* 572 */     writeStaticField(cls, fieldName, value, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeStaticField(Class<?> cls, String fieldName, Object value, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 596 */     Field field = getField(cls, fieldName, forceAccess);
/* 597 */     Validate.notNull(field, "Cannot locate field %s on %s", fieldName, cls);
/*     */     
/* 599 */     writeStaticField(field, value, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeDeclaredStaticField(Class<?> cls, String fieldName, Object value)
/*     */     throws IllegalAccessException
/*     */   {
/* 618 */     writeDeclaredStaticField(cls, fieldName, value, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeDeclaredStaticField(Class<?> cls, String fieldName, Object value, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 641 */     Field field = getDeclaredField(cls, fieldName, forceAccess);
/* 642 */     Validate.notNull(field, "Cannot locate declared field %s.%s", cls.getName(), fieldName);
/*     */     
/* 644 */     writeField(field, null, value, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeField(Field field, Object target, Object value)
/*     */     throws IllegalAccessException
/*     */   {
/* 661 */     writeField(field, target, value, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeField(Field field, Object target, Object value, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 684 */     Validate.notNull(field, "field");
/* 685 */     if (forceAccess && !field.isAccessible()) {
/* 686 */       field.setAccessible(true);
/*     */     } else {
/* 688 */       MemberUtils.setAccessibleWorkaround(field);
/*     */     }
/* 690 */     field.set(target, value);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void removeFinalModifier(Field field)
/*     */   {
/* 703 */     removeFinalModifier(field, true);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   @Deprecated
/*     */   public static void removeFinalModifier(Field field, boolean forceAccess)
/*     */   {
/* 724 */     Validate.notNull(field, "field");
/*     */     try
/*     */     {
/* 727 */       if (Modifier.isFinal(field.getModifiers()))
/*     */       {
/* 729 */         Field modifiersField = Field.class.getDeclaredField("modifiers");
/* 730 */         boolean doForceAccess = forceAccess && !modifiersField.isAccessible();
/* 731 */         if (doForceAccess) {
/* 732 */           modifiersField.setAccessible(true);
/*     */         }
/*     */         try {
/* 735 */           modifiersField.setInt(field, field.getModifiers() & 0xFFFFFFEF);
/*     */         } finally {
/* 737 */           if (doForceAccess) {
/* 738 */             modifiersField.setAccessible(false);
/*     */           }
/*     */         }
/*     */       }
/*     */     } catch (NoSuchFieldException|IllegalAccessException e) {
/* 743 */       if (SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_12)) {
/* 744 */         throw new UnsupportedOperationException("In java 12+ final cannot be removed.", e);
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeField(Object target, String fieldName, Object value)
/*     */     throws IllegalAccessException
/*     */   {
/* 769 */     writeField(target, fieldName, value, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeField(Object target, String fieldName, Object value, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 793 */     Validate.notNull(target, "target");
/* 794 */     Class<?> cls = target.getClass();
/* 795 */     Field field = getField(cls, fieldName, forceAccess);
/* 796 */     Validate.isTrue(field != null, "Cannot locate declared field %s.%s", cls.getName(), fieldName);
/*     */     
/* 798 */     writeField(field, target, value, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeDeclaredField(Object target, String fieldName, Object value)
/*     */     throws IllegalAccessException
/*     */   {
/* 817 */     writeDeclaredField(target, fieldName, value, false);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void writeDeclaredField(Object target, String fieldName, Object value, boolean forceAccess)
/*     */     throws IllegalAccessException
/*     */   {
/* 841 */     Validate.notNull(target, "target");
/* 842 */     Class<?> cls = target.getClass();
/* 843 */     Field field = getDeclaredField(cls, fieldName, forceAccess);
/* 844 */     Validate.isTrue(field != null, "Cannot locate declared field %s.%s", cls.getName(), fieldName);
/*     */     
/* 846 */     writeField(field, target, value, false);
/*     */   }
/*     */ }
