/*      */ package org.apache.commons.lang3.builder;
/*      */ 
/*      */ import java.lang.reflect.AccessibleObject;
/*      */ import java.lang.reflect.Field;
/*      */ import java.lang.reflect.Modifier;
/*      */ import java.util.Collection;
/*      */ import java.util.Comparator;
/*      */ import java.util.Objects;
/*      */ import org.apache.commons.lang3.ArrayUtils;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class CompareToBuilder
/*      */   implements Builder<Integer>
/*      */ {
/*      */   private int comparison;
/*      */   
/*      */   public CompareToBuilder()
/*      */   {
/*  111 */     this.comparison = 0;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int reflectionCompare(Object lhs, Object rhs)
/*      */   {
/*  142 */     return reflectionCompare(lhs, rhs, false, null);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients)
/*      */   {
/*  174 */     return reflectionCompare(lhs, rhs, compareTransients, null);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int reflectionCompare(Object lhs, Object rhs, Collection<String> excludeFields)
/*      */   {
/*  207 */     return reflectionCompare(lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int reflectionCompare(Object lhs, Object rhs, String... excludeFields)
/*      */   {
/*  240 */     return reflectionCompare(lhs, rhs, false, null, excludeFields);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients, Class<?> reflectUpToClass, String... excludeFields)
/*      */   {
/*  282 */     if (lhs == rhs) {
/*  283 */       return 0;
/*      */     }
/*  285 */     Objects.requireNonNull(lhs, "lhs");
/*  286 */     Objects.requireNonNull(rhs, "rhs");
/*      */     
/*  288 */     Class<?> lhsClazz = lhs.getClass();
/*  289 */     if (!lhsClazz.isInstance(rhs)) {
/*  290 */       throw new ClassCastException();
/*      */     }
/*  292 */     CompareToBuilder compareToBuilder = new CompareToBuilder();
/*  293 */     reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);
/*  294 */     while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {
/*  295 */       lhsClazz = lhsClazz.getSuperclass();
/*  296 */       reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients, excludeFields);
/*      */     }
/*  298 */     return compareToBuilder.toComparison();
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static void reflectionAppend(Object lhs, Object rhs, Class<?> clazz, CompareToBuilder builder, boolean useTransients, String[] excludeFields)
/*      */   {
/*  320 */     Field[] fields = clazz.getDeclaredFields();
/*  321 */     AccessibleObject.setAccessible(fields, true);
/*  322 */     for (int i = 0; i < fields.length && builder.comparison == 0; i++) {
/*  323 */       Field f = fields[i];
/*  324 */       if (ArrayUtils.contains(excludeFields, f.getName()) || 
/*  325 */         f.getName().contains("$") || !useTransients && 
/*  326 */         Modifier.isTransient(f.getModifiers()) || 
/*  327 */         Modifier.isStatic(f.getModifiers()))
/*      */         continue;
/*  329 */       try { builder.append(f.get(lhs), f.get(rhs));
/*      */       }
/*      */       catch (IllegalAccessException e)
/*      */       {
/*  333 */         throw new InternalError("Unexpected IllegalAccessException");
/*      */       }
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder appendSuper(int superCompareTo)
/*      */   {
/*  349 */     if (this.comparison != 0) {
/*  350 */       return this;
/*      */     }
/*  352 */     this.comparison = superCompareTo;
/*  353 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(Object lhs, Object rhs)
/*      */   {
/*  377 */     return append(lhs, rhs, null);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(Object lhs, Object rhs, Comparator<?> comparator)
/*      */   {
/*  406 */     if (this.comparison != 0) {
/*  407 */       return this;
/*      */     }
/*  409 */     if (lhs == rhs) {
/*  410 */       return this;
/*      */     }
/*  412 */     if (lhs == null) {
/*  413 */       this.comparison = -1;
/*  414 */       return this;
/*      */     }
/*  416 */     if (rhs == null) {
/*  417 */       this.comparison = 1;
/*  418 */       return this;
/*      */     }
/*  420 */     if (lhs.getClass().isArray())
/*      */     {
/*  422 */       appendArray(lhs, rhs, comparator);
/*      */     }
/*  424 */     else if (comparator == null)
/*      */     {
/*  426 */       Comparable<Object> comparable = (Comparable)lhs;
/*  427 */       this.comparison = comparable.compareTo(rhs);
/*      */     }
/*      */     else {
/*  430 */       Comparator<Object> comparator2 = (Comparator<Object>)comparator;
/*  431 */       this.comparison = comparator2.compare(lhs, rhs);
/*      */     }
/*  433 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */   private void appendArray(Object lhs, Object rhs, Comparator<?> comparator)
/*      */   {
/*  440 */     if ((lhs instanceof long[])) {
/*  441 */       append((long[])lhs, (long[])rhs);
/*  442 */     } else if ((lhs instanceof int[])) {
/*  443 */       append((int[])lhs, (int[])rhs);
/*  444 */     } else if ((lhs instanceof short[])) {
/*  445 */       append((short[])lhs, (short[])rhs);
/*  446 */     } else if ((lhs instanceof char[])) {
/*  447 */       append((char[])lhs, (char[])rhs);
/*  448 */     } else if ((lhs instanceof byte[])) {
/*  449 */       append((byte[])lhs, (byte[])rhs);
/*  450 */     } else if ((lhs instanceof double[])) {
/*  451 */       append((double[])lhs, (double[])rhs);
/*  452 */     } else if ((lhs instanceof float[])) {
/*  453 */       append((float[])lhs, (float[])rhs);
/*  454 */     } else if ((lhs instanceof boolean[])) {
/*  455 */       append((boolean[])lhs, (boolean[])rhs);
/*      */     }
/*      */     else
/*      */     {
/*  459 */       append((Object[])lhs, (Object[])rhs, comparator);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(long lhs, long rhs)
/*      */   {
/*  473 */     if (this.comparison != 0) {
/*  474 */       return this;
/*      */     }
/*  476 */     this.comparison = Long.compare(lhs, rhs);
/*  477 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(int lhs, int rhs)
/*      */   {
/*  489 */     if (this.comparison != 0) {
/*  490 */       return this;
/*      */     }
/*  492 */     this.comparison = Integer.compare(lhs, rhs);
/*  493 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(short lhs, short rhs)
/*      */   {
/*  505 */     if (this.comparison != 0) {
/*  506 */       return this;
/*      */     }
/*  508 */     this.comparison = Short.compare(lhs, rhs);
/*  509 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(char lhs, char rhs)
/*      */   {
/*  521 */     if (this.comparison != 0) {
/*  522 */       return this;
/*      */     }
/*  524 */     this.comparison = Character.compare(lhs, rhs);
/*  525 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(byte lhs, byte rhs)
/*      */   {
/*  537 */     if (this.comparison != 0) {
/*  538 */       return this;
/*      */     }
/*  540 */     this.comparison = Byte.compare(lhs, rhs);
/*  541 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(double lhs, double rhs)
/*      */   {
/*  558 */     if (this.comparison != 0) {
/*  559 */       return this;
/*      */     }
/*  561 */     this.comparison = Double.compare(lhs, rhs);
/*  562 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(float lhs, float rhs)
/*      */   {
/*  579 */     if (this.comparison != 0) {
/*  580 */       return this;
/*      */     }
/*  582 */     this.comparison = Float.compare(lhs, rhs);
/*  583 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(boolean lhs, boolean rhs)
/*      */   {
/*  595 */     if (this.comparison != 0) {
/*  596 */       return this;
/*      */     }
/*  598 */     if (lhs == rhs) {
/*  599 */       return this;
/*      */     }
/*  601 */     if (lhs) {
/*  602 */       this.comparison = 1;
/*      */     } else {
/*  604 */       this.comparison = -1;
/*      */     }
/*  606 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(Object[] lhs, Object[] rhs)
/*      */   {
/*  631 */     return append(lhs, rhs, null);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(Object[] lhs, Object[] rhs, Comparator<?> comparator)
/*      */   {
/*  658 */     if (this.comparison != 0) {
/*  659 */       return this;
/*      */     }
/*  661 */     if (lhs == rhs) {
/*  662 */       return this;
/*      */     }
/*  664 */     if (lhs == null) {
/*  665 */       this.comparison = -1;
/*  666 */       return this;
/*      */     }
/*  668 */     if (rhs == null) {
/*  669 */       this.comparison = 1;
/*  670 */       return this;
/*      */     }
/*  672 */     if (lhs.length != rhs.length) {
/*  673 */       this.comparison = (lhs.length < rhs.length ? -1 : 1);
/*  674 */       return this;
/*      */     }
/*  676 */     for (int i = 0; i < lhs.length && this.comparison == 0; i++) {
/*  677 */       append(lhs[i], rhs[i], comparator);
/*      */     }
/*  679 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(long[] lhs, long[] rhs)
/*      */   {
/*  698 */     if (this.comparison != 0) {
/*  699 */       return this;
/*      */     }
/*  701 */     if (lhs == rhs) {
/*  702 */       return this;
/*      */     }
/*  704 */     if (lhs == null) {
/*  705 */       this.comparison = -1;
/*  706 */       return this;
/*      */     }
/*  708 */     if (rhs == null) {
/*  709 */       this.comparison = 1;
/*  710 */       return this;
/*      */     }
/*  712 */     if (lhs.length != rhs.length) {
/*  713 */       this.comparison = (lhs.length < rhs.length ? -1 : 1);
/*  714 */       return this;
/*      */     }
/*  716 */     for (int i = 0; i < lhs.length && this.comparison == 0; i++) {
/*  717 */       append(lhs[i], rhs[i]);
/*      */     }
/*  719 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(int[] lhs, int[] rhs)
/*      */   {
/*  738 */     if (this.comparison != 0) {
/*  739 */       return this;
/*      */     }
/*  741 */     if (lhs == rhs) {
/*  742 */       return this;
/*      */     }
/*  744 */     if (lhs == null) {
/*  745 */       this.comparison = -1;
/*  746 */       return this;
/*      */     }
/*  748 */     if (rhs == null) {
/*  749 */       this.comparison = 1;
/*  750 */       return this;
/*      */     }
/*  752 */     if (lhs.length != rhs.length) {
/*  753 */       this.comparison = (lhs.length < rhs.length ? -1 : 1);
/*  754 */       return this;
/*      */     }
/*  756 */     for (int i = 0; i < lhs.length && this.comparison == 0; i++) {
/*  757 */       append(lhs[i], rhs[i]);
/*      */     }
/*  759 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(short[] lhs, short[] rhs)
/*      */   {
/*  778 */     if (this.comparison != 0) {
/*  779 */       return this;
/*      */     }
/*  781 */     if (lhs == rhs) {
/*  782 */       return this;
/*      */     }
/*  784 */     if (lhs == null) {
/*  785 */       this.comparison = -1;
/*  786 */       return this;
/*      */     }
/*  788 */     if (rhs == null) {
/*  789 */       this.comparison = 1;
/*  790 */       return this;
/*      */     }
/*  792 */     if (lhs.length != rhs.length) {
/*  793 */       this.comparison = (lhs.length < rhs.length ? -1 : 1);
/*  794 */       return this;
/*      */     }
/*  796 */     for (int i = 0; i < lhs.length && this.comparison == 0; i++) {
/*  797 */       append(lhs[i], rhs[i]);
/*      */     }
/*  799 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(char[] lhs, char[] rhs)
/*      */   {
/*  818 */     if (this.comparison != 0) {
/*  819 */       return this;
/*      */     }
/*  821 */     if (lhs == rhs) {
/*  822 */       return this;
/*      */     }
/*  824 */     if (lhs == null) {
/*  825 */       this.comparison = -1;
/*  826 */       return this;
/*      */     }
/*  828 */     if (rhs == null) {
/*  829 */       this.comparison = 1;
/*  830 */       return this;
/*      */     }
/*  832 */     if (lhs.length != rhs.length) {
/*  833 */       this.comparison = (lhs.length < rhs.length ? -1 : 1);
/*  834 */       return this;
/*      */     }
/*  836 */     for (int i = 0; i < lhs.length && this.comparison == 0; i++) {
/*  837 */       append(lhs[i], rhs[i]);
/*      */     }
/*  839 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(byte[] lhs, byte[] rhs)
/*      */   {
/*  858 */     if (this.comparison != 0) {
/*  859 */       return this;
/*      */     }
/*  861 */     if (lhs == rhs) {
/*  862 */       return this;
/*      */     }
/*  864 */     if (lhs == null) {
/*  865 */       this.comparison = -1;
/*  866 */       return this;
/*      */     }
/*  868 */     if (rhs == null) {
/*  869 */       this.comparison = 1;
/*  870 */       return this;
/*      */     }
/*  872 */     if (lhs.length != rhs.length) {
/*  873 */       this.comparison = (lhs.length < rhs.length ? -1 : 1);
/*  874 */       return this;
/*      */     }
/*  876 */     for (int i = 0; i < lhs.length && this.comparison == 0; i++) {
/*  877 */       append(lhs[i], rhs[i]);
/*      */     }
/*  879 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(double[] lhs, double[] rhs)
/*      */   {
/*  898 */     if (this.comparison != 0) {
/*  899 */       return this;
/*      */     }
/*  901 */     if (lhs == rhs) {
/*  902 */       return this;
/*      */     }
/*  904 */     if (lhs == null) {
/*  905 */       this.comparison = -1;
/*  906 */       return this;
/*      */     }
/*  908 */     if (rhs == null) {
/*  909 */       this.comparison = 1;
/*  910 */       return this;
/*      */     }
/*  912 */     if (lhs.length != rhs.length) {
/*  913 */       this.comparison = (lhs.length < rhs.length ? -1 : 1);
/*  914 */       return this;
/*      */     }
/*  916 */     for (int i = 0; i < lhs.length && this.comparison == 0; i++) {
/*  917 */       append(lhs[i], rhs[i]);
/*      */     }
/*  919 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(float[] lhs, float[] rhs)
/*      */   {
/*  938 */     if (this.comparison != 0) {
/*  939 */       return this;
/*      */     }
/*  941 */     if (lhs == rhs) {
/*  942 */       return this;
/*      */     }
/*  944 */     if (lhs == null) {
/*  945 */       this.comparison = -1;
/*  946 */       return this;
/*      */     }
/*  948 */     if (rhs == null) {
/*  949 */       this.comparison = 1;
/*  950 */       return this;
/*      */     }
/*  952 */     if (lhs.length != rhs.length) {
/*  953 */       this.comparison = (lhs.length < rhs.length ? -1 : 1);
/*  954 */       return this;
/*      */     }
/*  956 */     for (int i = 0; i < lhs.length && this.comparison == 0; i++) {
/*  957 */       append(lhs[i], rhs[i]);
/*      */     }
/*  959 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public CompareToBuilder append(boolean[] lhs, boolean[] rhs)
/*      */   {
/*  978 */     if (this.comparison != 0) {
/*  979 */       return this;
/*      */     }
/*  981 */     if (lhs == rhs) {
/*  982 */       return this;
/*      */     }
/*  984 */     if (lhs == null) {
/*  985 */       this.comparison = -1;
/*  986 */       return this;
/*      */     }
/*  988 */     if (rhs == null) {
/*  989 */       this.comparison = 1;
/*  990 */       return this;
/*      */     }
/*  992 */     if (lhs.length != rhs.length) {
/*  993 */       this.comparison = (lhs.length < rhs.length ? -1 : 1);
/*  994 */       return this;
/*      */     }
/*  996 */     for (int i = 0; i < lhs.length && this.comparison == 0; i++) {
/*  997 */       append(lhs[i], rhs[i]);
/*      */     }
/*  999 */     return this;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public int toComparison()
/*      */   {
/* 1013 */     return this.comparison;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public Integer build()
/*      */   {
/* 1028 */     return Integer.valueOf(toComparison());
/*      */   }
/*      */ }
