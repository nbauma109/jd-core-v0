/*    */ package org.apache.commons.io.filefilter;
/*    */ 
/*    */ import java.io.File;
/*    */ import java.io.IOException;
/*    */ import java.nio.file.FileVisitResult;
/*    */ import java.nio.file.Files;
/*    */ import java.nio.file.LinkOption;
/*    */ import java.nio.file.Path;
/*    */ import java.nio.file.attribute.BasicFileAttributes;
/*    */ import org.apache.commons.io.file.NoopPathVisitor;
/*    */ import org.apache.commons.io.file.PathUtils;
/*    */ import org.apache.commons.io.file.PathVisitor;
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ public class PathVisitorFileFilter
/*    */   extends AbstractFileFilter
/*    */ {
/*    */   private final PathVisitor pathVisitor;
/*    */   
/*    */   public PathVisitorFileFilter(PathVisitor pathVisitor)
/*    */   {
/* 46 */     this.pathVisitor = pathVisitor == null ? NoopPathVisitor.INSTANCE : pathVisitor;
/*    */   }
/*    */   
/*    */   @Override
/*    */   public boolean accept(File file) {
/*    */     try {
/* 52 */       Path path = file.toPath();
/* 53 */       return visitFile(path, file
/* 54 */         .exists() ? PathUtils.readBasicFileAttributes(path) : null) == FileVisitResult.CONTINUE;
/*    */     } catch (IOException e) {
/* 56 */       return handle(e) == FileVisitResult.CONTINUE;
/*    */     }
/*    */   }
/*    */   
/*    */   @Override
/*    */   public boolean accept(File dir, String name) {
/*    */     try {
/* 63 */       Path path = dir.toPath().resolve(name);
/* 64 */       return accept(path, PathUtils.readBasicFileAttributes(path)) == FileVisitResult.CONTINUE;
/*    */     } catch (IOException e) {
/* 66 */       return handle(e) == FileVisitResult.CONTINUE;
/*    */     }
/*    */   }
/*    */   
/*    */   @Override
/*    */   public FileVisitResult accept(Path path, BasicFileAttributes attributes) {
/*    */     try {
/* 73 */       return Files.isDirectory(path) ? this.pathVisitor.postVisitDirectory(path, null) : visitFile(path, attributes);
/*    */     } catch (IOException e) {
/* 75 */       return handle(e);
/*    */     }
/*    */   }
/*    */   
/*    */   @Override
/*    */   public FileVisitResult visitFile(Path path, BasicFileAttributes attributes) throws IOException {
/* 81 */     return this.pathVisitor.visitFile(path, attributes);
/*    */   }
/*    */ }
