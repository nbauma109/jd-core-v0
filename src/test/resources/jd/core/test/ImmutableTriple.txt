/*     */ package org.apache.commons.lang3.tuple;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public final class ImmutableTriple<L, M, R>
/*     */   extends Triple<L, M, R>
/*     */ {
/*     */   private static final long serialVersionUID = 1L;
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public final L left;
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public final M middle;
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public final R right;
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*  45 */   public static final ImmutableTriple<?, ?, ?>[] EMPTY_ARRAY = new ImmutableTriple[0];
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*  52 */   private static final ImmutableTriple NULL = of(null, null, null);
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <L, M, R> ImmutableTriple<L, M, R>[] emptyArray()
/*     */   {
/*  69 */     return (ImmutableTriple[])EMPTY_ARRAY;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <L, M, R> ImmutableTriple<L, M, R> nullTriple()
/*     */   {
/*  82 */     return NULL;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <L, M, R> ImmutableTriple<L, M, R> of(L left, M middle, R right)
/*     */   {
/* 100 */     return new ImmutableTriple<>(left, middle, right);
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public ImmutableTriple(L left, M middle, R right)
/*     */   {
/* 118 */     this.left = left;
/* 119 */     this.middle = middle;
/* 120 */     this.right = right;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */   @Override
/*     */   public L getLeft()
/*     */   {
/* 129 */     return this.left;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */   @Override
/*     */   public M getMiddle()
/*     */   {
/* 137 */     return this.middle;
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */   @Override
/*     */   public R getRight()
/*     */   {
/* 145 */     return this.right;
/*     */   }
/*     */ }
