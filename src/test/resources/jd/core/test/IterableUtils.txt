/*      */ package org.apache.commons.collections4;
/*      */ 
/*      */ import java.util.ArrayList;
/*      */ import java.util.Collection;
/*      */ import java.util.Collections;
/*      */ import java.util.Comparator;
/*      */ import java.util.Iterator;
/*      */ import java.util.List;
/*      */ import java.util.Set;
/*      */ import org.apache.commons.collections4.functors.EqualPredicate;
/*      */ import org.apache.commons.collections4.iterators.LazyIteratorChain;
/*      */ import org.apache.commons.collections4.iterators.ReverseListIterator;
/*      */ import org.apache.commons.collections4.iterators.UniqueFilterIterator;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class IterableUtils
/*      */ {
/*   56 */   static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {
/*      */     @Override
/*      */     public Iterator<Object> iterator() {
/*   59 */       return IteratorUtils.emptyIterator();
/*      */     }
/*      */   };
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> emptyIterable()
/*      */   {
/*   76 */     return EMPTY_ITERABLE;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> chainedIterable(Iterable<? extends E> a, Iterable<? extends E> b)
/*      */   {
/*  101 */     return chainedIterable(new Iterable[] { a, b });
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> chainedIterable(Iterable<? extends E> a, Iterable<? extends E> b, Iterable<? extends E> c)
/*      */   {
/*  125 */     return chainedIterable(new Iterable[] { a, b, c });
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> chainedIterable(Iterable<? extends E> a, Iterable<? extends E> b, Iterable<? extends E> c, Iterable<? extends E> d)
/*      */   {
/*  151 */     return chainedIterable(new Iterable[] { a, b, c, d });
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> chainedIterable(Iterable<? extends E>... iterables)
/*      */   {
/*  170 */     checkNotNull(iterables);
/*  171 */     return new FluentIterable<E>() {
/*      */       @Override
/*      */       public Iterator<E> iterator() {
/*  174 */         return new LazyIteratorChain<E>() {
/*      */           @Override
/*      */           protected Iterator<? extends E> nextIterator(int count) {
/*  177 */             if (count > iterables.length) {
/*  178 */               return null;
/*      */             }
/*  180 */             return iterables[(count - 1)].iterator();
/*      */           }
/*      */         };
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> collatedIterable(Iterable<? extends E> a, final Iterable<? extends E> b)
/*      */   {
/*  205 */     checkNotNull(new Iterable[] { a, b });
/*  206 */     return new FluentIterable<E>() {
/*      */       @Override
/*      */       public Iterator<E> iterator() {
/*  209 */         return IteratorUtils.collatedIterator(null, a.iterator(), b.iterator());
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> collatedIterable(Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)
/*      */   {
/*  233 */     checkNotNull(new Iterable[] { a, b });
/*  234 */     return new FluentIterable<E>() {
/*      */       @Override
/*      */       public Iterator<E> iterator() {
/*  237 */         return IteratorUtils.collatedIterator(comparator, a.iterator(), b.iterator());
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> filteredIterable(Iterable<E> iterable, final Predicate<? super E> predicate)
/*      */   {
/*  260 */     checkNotNull(iterable);
/*  261 */     if (predicate == null) {
/*  262 */       throw new NullPointerException("Predicate must not be null.");
/*      */     }
/*  264 */     return new FluentIterable<E>() {
/*      */       @Override
/*      */       public Iterator<E> iterator() {
/*  267 */         return IteratorUtils.filteredIterator(IterableUtils.emptyIteratorIfNull(iterable), predicate);
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> boundedIterable(Iterable<E> iterable, final long maxSize)
/*      */   {
/*  290 */     checkNotNull(iterable);
/*  291 */     if (maxSize < 0L) {
/*  292 */       throw new IllegalArgumentException("MaxSize parameter must not be negative.");
/*      */     }
/*      */     
/*  295 */     return new FluentIterable<E>() {
/*      */       @Override
/*      */       public Iterator<E> iterator() {
/*  298 */         return IteratorUtils.boundedIterator(iterable.iterator(), maxSize);
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> loopingIterable(Iterable<E> iterable)
/*      */   {
/*  322 */     checkNotNull(iterable);
/*  323 */     return new FluentIterable<E>() {
/*      */       @Override
/*      */       public Iterator<E> iterator() {
/*  326 */         return new LazyIteratorChain<E>() {
/*      */           @Override
/*      */           protected Iterator<? extends E> nextIterator(int count) {
/*  329 */             if (IterableUtils.isEmpty(iterable)) {
/*  330 */               return null;
/*      */             }
/*  332 */             return iterable.iterator();
/*      */           }
/*      */         };
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> reversedIterable(Iterable<E> iterable)
/*      */   {
/*  359 */     checkNotNull(iterable);
/*  360 */     return new FluentIterable<E>()
/*      */     {
/*      */       @Override
/*      */       public Iterator<E> iterator()
/*      */       {
/*  365 */         List<E> list = (iterable instanceof List) ? (List)iterable : IteratorUtils.toList(iterable.iterator());
/*  366 */         return new ReverseListIterator<>(list);
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> skippingIterable(Iterable<E> iterable, final long elementsToSkip)
/*      */   {
/*  388 */     checkNotNull(iterable);
/*  389 */     if (elementsToSkip < 0L) {
/*  390 */       throw new IllegalArgumentException("ElementsToSkip parameter must not be negative.");
/*      */     }
/*      */     
/*  393 */     return new FluentIterable<E>() {
/*      */       @Override
/*      */       public Iterator<E> iterator() {
/*  396 */         return IteratorUtils.skippingIterator(iterable.iterator(), elementsToSkip);
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <I, O> Iterable<O> transformedIterable(Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)
/*      */   {
/*  420 */     checkNotNull(iterable);
/*  421 */     if (transformer == null) {
/*  422 */       throw new NullPointerException("Transformer must not be null.");
/*      */     }
/*  424 */     return new FluentIterable<O>() {
/*      */       @Override
/*      */       public Iterator<O> iterator() {
/*  427 */         return IteratorUtils.transformedIterator(iterable.iterator(), transformer);
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> uniqueIterable(Iterable<E> iterable)
/*      */   {
/*  448 */     checkNotNull(iterable);
/*  449 */     return new FluentIterable<E>() {
/*      */       @Override
/*      */       public Iterator<E> iterator() {
/*  452 */         return new UniqueFilterIterator<>(iterable.iterator());
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> unmodifiableIterable(Iterable<E> iterable)
/*      */   {
/*  471 */     checkNotNull(iterable);
/*  472 */     if ((iterable instanceof UnmodifiableIterable)) {
/*  473 */       return iterable;
/*      */     }
/*  475 */     return new UnmodifiableIterable<>(iterable);
/*      */   }
/*      */   
/*      */ 
/*      */   private static final class UnmodifiableIterable<E>
/*      */     extends FluentIterable<E>
/*      */   {
/*      */     private final Iterable<E> unmodifiable;
/*      */     
/*      */     public UnmodifiableIterable(Iterable<E> iterable)
/*      */     {
/*  486 */       this.unmodifiable = iterable;
/*      */     }
/*      */     
/*      */     @Override
/*      */     public Iterator<E> iterator() {
/*  491 */       return IteratorUtils.unmodifiableIterator(this.unmodifiable.iterator());
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> zippingIterable(Iterable<? extends E> a, final Iterable<? extends E> b)
/*      */   {
/*  516 */     checkNotNull(a);
/*  517 */     checkNotNull(b);
/*  518 */     return new FluentIterable<E>() {
/*      */       @Override
/*      */       public Iterator<E> iterator() {
/*  521 */         return IteratorUtils.zippingIterator(a.iterator(), b.iterator());
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> zippingIterable(Iterable<? extends E> first, final Iterable<? extends E>... others)
/*      */   {
/*  544 */     checkNotNull(first);
/*  545 */     checkNotNull(others);
/*  546 */     return new FluentIterable<E>()
/*      */     {
/*      */       @Override
/*      */       public Iterator<E> iterator()
/*      */       {
/*  551 */         Iterator<? extends E>[] iterators = new Iterator[others.length + 1];
/*  552 */         iterators[0] = others.iterator();
/*  553 */         for (int i = 0; i < others.length; i++) {
/*  554 */           iterators[(i + 1)] = others[i].iterator();
/*      */         }
/*  556 */         return IteratorUtils.zippingIterator(iterators);
/*      */       }
/*      */     };
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> Iterable<E> emptyIfNull(Iterable<E> iterable)
/*      */   {
/*  573 */     return iterable == null ? emptyIterable() : iterable;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> void forEach(Iterable<E> iterable, Closure<? super E> closure)
/*      */   {
/*  585 */     IteratorUtils.forEach(emptyIteratorIfNull(iterable), closure);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> E forEachButLast(Iterable<E> iterable, Closure<? super E> closure)
/*      */   {
/*  599 */     return IteratorUtils.forEachButLast(emptyIteratorIfNull(iterable), closure);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> E find(Iterable<E> iterable, Predicate<? super E> predicate)
/*      */   {
/*  614 */     return IteratorUtils.find(emptyIteratorIfNull(iterable), predicate);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> int indexOf(Iterable<E> iterable, Predicate<? super E> predicate)
/*      */   {
/*  630 */     return IteratorUtils.indexOf(emptyIteratorIfNull(iterable), predicate);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> boolean matchesAll(Iterable<E> iterable, Predicate<? super E> predicate)
/*      */   {
/*  646 */     return IteratorUtils.matchesAll(emptyIteratorIfNull(iterable), predicate);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> boolean matchesAny(Iterable<E> iterable, Predicate<? super E> predicate)
/*      */   {
/*  661 */     return IteratorUtils.matchesAny(emptyIteratorIfNull(iterable), predicate);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> long countMatches(Iterable<E> input, Predicate<? super E> predicate)
/*      */   {
/*  676 */     if (predicate == null) {
/*  677 */       throw new NullPointerException("Predicate must not be null.");
/*      */     }
/*  679 */     return size(filteredIterable(emptyIfNull(input), predicate));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static boolean isEmpty(Iterable<?> iterable)
/*      */   {
/*  691 */     if ((iterable instanceof Collection)) {
/*  692 */       return ((Collection)iterable).isEmpty();
/*      */     }
/*  694 */     return IteratorUtils.isEmpty(emptyIteratorIfNull(iterable));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> boolean contains(Iterable<E> iterable, Object object)
/*      */   {
/*  708 */     if ((iterable instanceof Collection)) {
/*  709 */       return ((Collection)iterable).contains(object);
/*      */     }
/*  711 */     return IteratorUtils.contains(emptyIteratorIfNull(iterable), object);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> boolean contains(Iterable<? extends E> iterable, E object, Equator<? super E> equator)
/*      */   {
/*  733 */     if (equator == null) {
/*  734 */       throw new NullPointerException("Equator must not be null.");
/*      */     }
/*  736 */     return matchesAny(iterable, EqualPredicate.equalPredicate(object, equator));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E, T extends E> int frequency(Iterable<E> iterable, T obj)
/*      */   {
/*  749 */     if ((iterable instanceof Set)) {
/*  750 */       return ((Set)iterable).contains(obj) ? 1 : 0;
/*      */     }
/*  752 */     if ((iterable instanceof Bag)) {
/*  753 */       return ((Bag)iterable).getCount(obj);
/*      */     }
/*  755 */     return size(filteredIterable(emptyIfNull(iterable), EqualPredicate.equalPredicate(obj)));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T get(Iterable<T> iterable, int index)
/*      */   {
/*  771 */     CollectionUtils.checkIndexBounds(index);
/*  772 */     if ((iterable instanceof List)) {
/*  773 */       return ((List)iterable).get(index);
/*      */     }
/*  775 */     return IteratorUtils.get(emptyIteratorIfNull(iterable), index);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <T> T first(Iterable<T> iterable)
/*      */   {
/*  795 */     return get(iterable, 0);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static int size(Iterable<?> iterable)
/*      */   {
/*  807 */     if ((iterable instanceof Collection)) {
/*  808 */       return ((Collection)iterable).size();
/*      */     }
/*  810 */     return IteratorUtils.size(emptyIteratorIfNull(iterable));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <O> List<List<O>> partition(Iterable<? extends O> iterable, Predicate<? super O> predicate)
/*      */   {
/*  842 */     if (predicate == null) {
/*  843 */       throw new NullPointerException("Predicate must not be null.");
/*      */     }
/*      */     
/*  846 */     Factory<List<O>> factory = FactoryUtils.instantiateFactory(ArrayList.class);
/*      */     
/*  848 */     Predicate<? super O>[] predicates = { predicate };
/*  849 */     return partition(iterable, factory, predicates);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <O> List<List<O>> partition(Iterable<? extends O> iterable, Predicate<? super O>... predicates)
/*      */   {
/*  888 */     Factory<List<O>> factory = FactoryUtils.instantiateFactory(ArrayList.class);
/*  889 */     return partition(iterable, factory, predicates);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <O, R extends Collection<O>> List<R> partition(Iterable<? extends O> iterable, Factory<R> partitionFactory, Predicate<? super O>... predicates)
/*      */   {
/*      */     Iterable<O> empty;
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  931 */     if (iterable == null) {
/*  932 */       empty = emptyIterable();
/*  933 */       return partition(empty, partitionFactory, predicates);
/*      */     }
/*      */     
/*  936 */     if (predicates == null) {
/*  937 */       throw new NullPointerException("Predicates must not be null.");
/*      */     }
/*      */     
/*  940 */     for (Predicate<?> p : predicates) {
/*  941 */       if (p == null) {
/*  942 */         throw new NullPointerException("Predicate must not be null.");
/*      */       }
/*      */     }
/*      */     
/*  946 */     if (predicates.length < 1)
/*      */     {
/*  948 */       R singlePartition = (R)partitionFactory.create();
/*  949 */       CollectionUtils.addAll(singlePartition, iterable);
/*  950 */       return Collections.singletonList(singlePartition);
/*      */     }
/*      */     
/*      */ 
/*  954 */     int numberOfPredicates = predicates.length;
/*  955 */     int numberOfPartitions = numberOfPredicates + 1;
/*  956 */     List<R> partitions = new ArrayList<>(numberOfPartitions);
/*  957 */     for (int i = 0; i < numberOfPartitions; i++) {
/*  958 */       partitions.add(partitionFactory.create());
/*      */     }
/*      */     
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*  965 */     for (O element : iterable) {
/*  966 */       boolean elementAssigned = false;
/*  967 */       for (int i = 0; i < numberOfPredicates; i++) {
/*  968 */         if (predicates[i].evaluate(element)) {
/*  969 */           ((Collection)partitions.get(i)).add(element);
/*  970 */           elementAssigned = true;
/*  971 */           break;
/*      */         }
/*      */       }
/*      */       
/*  975 */       if (!elementAssigned)
/*      */       {
/*      */ 
/*  978 */         ((Collection)partitions.get(numberOfPredicates)).add(element);
/*      */       }
/*      */     }
/*      */     
/*  982 */     return partitions;
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> List<E> toList(Iterable<E> iterable)
/*      */   {
/*  993 */     return IteratorUtils.toList(emptyIteratorIfNull(iterable));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> String toString(Iterable<E> iterable)
/*      */   {
/* 1009 */     return IteratorUtils.toString(emptyIteratorIfNull(iterable));
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> String toString(Iterable<E> iterable, Transformer<? super E, String> transformer)
/*      */   {
/* 1028 */     if (transformer == null) {
/* 1029 */       throw new NullPointerException("Transformer must not be null.");
/*      */     }
/* 1031 */     return IteratorUtils.toString(emptyIteratorIfNull(iterable), transformer);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   public static <E> String toString(Iterable<E> iterable, Transformer<? super E, String> transformer, String delimiter, String prefix, String suffix)
/*      */   {
/* 1056 */     return IteratorUtils.toString(emptyIteratorIfNull(iterable), transformer, delimiter, prefix, suffix);
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   static void checkNotNull(Iterable<?> iterable)
/*      */   {
/* 1070 */     if (iterable == null) {
/* 1071 */       throw new NullPointerException("Iterable must not be null.");
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   static void checkNotNull(Iterable<?>... iterables)
/*      */   {
/* 1082 */     if (iterables == null) {
/* 1083 */       throw new NullPointerException("Iterables must not be null.");
/*      */     }
/* 1085 */     for (Iterable<?> iterable : iterables) {
/* 1086 */       checkNotNull(iterable);
/*      */     }
/*      */   }
/*      */   
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   private static <E> Iterator<E> emptyIteratorIfNull(Iterable<E> iterable)
/*      */   {
/* 1099 */     return iterable != null ? iterable.iterator() : IteratorUtils.emptyIterator();
/*      */   }
/*      */ }
