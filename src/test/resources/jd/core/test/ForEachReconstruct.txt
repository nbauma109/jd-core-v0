/*     */ package jd.core.test;
/*     */ 
/*     */ import java.lang.reflect.Method;
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ 
/*     */ 
/*     */ public class ForEachReconstruct<T>
/*     */ {
/*     */   private boolean flag;
/*     */   private List<T> _objects;
/*     */   
/*     */   void forEachInCatch()
/*     */   {
/*     */     try
/*     */     {
/*  20 */       System.out.println("try");
/*     */     } catch (Exception e) {
/*  22 */       for (StackTraceElement stackTraceElement : e.getStackTrace()) {
/*  23 */         System.out.println(stackTraceElement);
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */   public static void main(String[] args)
/*     */   {
/*  32 */     for (Object arg : args) {
/*  33 */       System.out.println(arg);
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */   void enhancedForEachStatement(Integer... ints)
/*     */   {
/*  41 */     for (Integer anInt : ints) {
/*  42 */       System.out.println(anInt);
/*     */     }
/*  44 */     List<Integer> intList = new ArrayList<>();
/*  45 */     if (ints != null) {
/*  46 */       for (int theInt : ints) {
/*  47 */         intList.add(Integer.valueOf(theInt));
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   void enhancedForEachStatement(Long... longs) {
/*  53 */     for (Long aLong : longs) {
/*  54 */       System.out.println(aLong);
/*     */     }
/*  56 */     List<Long> longList = new ArrayList<>();
/*  57 */     if (longs != null) {
/*  58 */       for (long theLong : longs) {
/*  59 */         longList.add(Long.valueOf(theLong));
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   void enhancedForEachStatement(Double... doubles) {
/*  65 */     for (Double aDouble : doubles) {
/*  66 */       System.out.println(aDouble);
/*     */     }
/*  68 */     List<Double> doubleList = new ArrayList<>();
/*  69 */     if (doubles != null) {
/*  70 */       for (double theDouble : doubles) {
/*  71 */         doubleList.add(Double.valueOf(theDouble));
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   void enhancedForEachStatement(Float... floats) {
/*  77 */     for (Float aFloat : floats) {
/*  78 */       System.out.println(aFloat);
/*     */     }
/*  80 */     List<Float> floatList = new ArrayList<>();
/*  81 */     if (floats != null) {
/*  82 */       for (float theFloat : floats) {
/*  83 */         floatList.add(Float.valueOf(theFloat));
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   void enhancedForEachStatement(Byte... bytes) {
/*  89 */     for (Byte aByte : bytes) {
/*  90 */       System.out.println(aByte);
/*     */     }
/*  92 */     List<Byte> byteList = new ArrayList<>();
/*  93 */     if (bytes != null) {
/*  94 */       for (byte theByte : bytes) {
/*  95 */         byteList.add(Byte.valueOf(theByte));
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   void enhancedForEachStatement(Short... shorts) {
/* 101 */     for (Short aShort : shorts) {
/* 102 */       System.out.println(aShort);
/*     */     }
/* 104 */     List<Short> shortList = new ArrayList<>();
/* 105 */     if (shorts != null) {
/* 106 */       for (short theShort : shorts) {
/* 107 */         shortList.add(Short.valueOf(theShort));
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   void enhancedForEachStatement(Character... chars) {
/* 113 */     for (Character aChar : chars) {
/* 114 */       System.out.println(aChar);
/*     */     }
/* 116 */     List<Character> charList = new ArrayList<>();
/* 117 */     if (chars != null) {
/* 118 */       for (char theChar : chars) {
/* 119 */         charList.add(Character.valueOf(theChar));
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   void enhancedForEachStatement(Boolean... booleans) {
/* 125 */     for (Boolean aBoolean : booleans) {
/* 126 */       System.out.println(aBoolean);
/*     */     }
/* 128 */     List<Boolean> booleanList = new ArrayList<>();
/* 129 */     if (booleans != null) {
/* 130 */       for (boolean theBoolean : booleans) {
/* 131 */         booleanList.add(Boolean.valueOf(theBoolean));
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */   void emptyForEach(Class c)
/*     */   {
/* 140 */     Method[] methods = c.getMethods();
/* 141 */     Map m = new HashMap<>();
/* 142 */     for (Method method : methods) {
/* 143 */       StringBuilder sb = new StringBuilder();
/* 144 */       sb.append(method.getName());
/* 145 */       if (method.getReturnType().equals(Void.TYPE)) {
/* 146 */         sb.append("");
/*     */       }
/* 148 */       m.put(method.getName(), sb.toString());
/*     */     }
/* 150 */     for (Iterator iter = m.values().iterator(); iter.hasNext();) {}
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */   public Map<T, String> addItems(T[] objects, T beforeObject)
/*     */   {
/* 157 */     HashMap<T, String> messages = null;
/*     */     
/* 159 */     if (!this.flag) {
/* 160 */       for (T object : objects)
/* 161 */         this._objects.remove(object);
/*     */     }
/* 163 */     int at = -1;
/*     */     
/* 165 */     if (beforeObject != null) {
/* 166 */       at = this._objects.indexOf(beforeObject);
/*     */     }
/* 168 */     if (at >= 0) {
/* 169 */       for (T object : objects) {
/* 170 */         String message = object.toString();
/*     */         
/* 172 */         if (message == null) {
/* 173 */           this._objects.add(at++, object);
/*     */         } else {
/* 175 */           if (messages == null)
/* 176 */             messages = new HashMap<>();
/* 177 */           messages.put(object, message);
/*     */         }
/*     */       }
/*     */     } else {
/* 181 */       for (T object : objects) {
/* 182 */         String message = object.toString();
/*     */         
/* 184 */         if (message == null) {
/* 185 */           this._objects.add(object);
/*     */         } else {
/* 187 */           if (messages == null)
/* 188 */             messages = new HashMap<>();
/* 189 */           messages.put(object, message);
/*     */         }
/*     */       }
/*     */     }
/*     */     
/* 194 */     return messages;
/*     */   }
/*     */ }
