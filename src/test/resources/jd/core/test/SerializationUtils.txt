/*     */ package org.apache.commons.lang3;
/*     */ 
/*     */ import java.io.ByteArrayInputStream;
/*     */ import java.io.ByteArrayOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.ObjectInputStream;
/*     */ import java.io.ObjectOutputStream;
/*     */ import java.io.ObjectStreamClass;
/*     */ import java.io.OutputStream;
/*     */ import java.io.Serializable;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class SerializationUtils
/*     */ {
/*     */   static class ClassLoaderAwareObjectInputStream
/*     */     extends ObjectInputStream
/*     */   {
/*     */     private final ClassLoader classLoader;
/*  63 */     private static final Map<String, Class<?>> primitiveTypes = new HashMap<>();
/*     */     
/*     */     static
/*     */     {
/*  67 */       primitiveTypes.put("byte", Byte.TYPE);
/*  68 */       primitiveTypes.put("short", Short.TYPE);
/*  69 */       primitiveTypes.put("int", Integer.TYPE);
/*  70 */       primitiveTypes.put("long", Long.TYPE);
/*  71 */       primitiveTypes.put("float", Float.TYPE);
/*  72 */       primitiveTypes.put("double", Double.TYPE);
/*  73 */       primitiveTypes.put("boolean", Boolean.TYPE);
/*  74 */       primitiveTypes.put("char", Character.TYPE);
/*  75 */       primitiveTypes.put("void", Void.TYPE);
/*     */     }
/*     */     
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader)
/*     */       throws IOException
/*     */     {
/*  88 */       super(in);
/*  89 */       this.classLoader = classLoader;
/*     */     }
/*     */     
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     @Override
/*     */     protected Class<?> resolveClass(ObjectStreamClass desc)
/*     */       throws IOException, ClassNotFoundException
/*     */     {
/* 102 */       String name = desc.getName();
/*     */       try {
/* 104 */         return Class.forName(name, false, this.classLoader);
/*     */       } catch (ClassNotFoundException ex) {
/*     */         try {
/* 107 */           return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
/*     */         } catch (ClassNotFoundException cnfe) {
/* 109 */           Class<?> cls = (Class)primitiveTypes.get(name);
/* 110 */           if (cls != null) {
/* 111 */             return cls;
/*     */           }
/* 113 */           throw cnfe;
/*     */         }
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <T extends Serializable> T clone(T object)
/*     */   {
/* 135 */     if (object == null) {
/* 136 */       return null;
/*     */     }
/* 138 */     byte[] objectData = serialize(object);
/* 139 */     ByteArrayInputStream bais = new ByteArrayInputStream(objectData);
/*     */     
/*     */ 
/* 142 */     try (ClassLoaderAwareObjectInputStream in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader()))
/*     */     {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/* 149 */       T readObject = (T)in.readObject();
/* 150 */       return readObject;
/*     */     }
/*     */     catch (ClassNotFoundException ex) {
/* 153 */       throw new SerializationException("ClassNotFoundException while reading cloned object data", ex);
/*     */     } catch (IOException ex) {
/* 155 */       throw new SerializationException("IOException while reading or closing cloned object data", ex);
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <T> T deserialize(byte[] objectData)
/*     */   {
/* 178 */     Validate.notNull(objectData, "objectData", new Object[0]);
/* 179 */     return deserialize(new ByteArrayInputStream(objectData));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <T> T deserialize(InputStream inputStream)
/*     */   {
/* 212 */     Validate.notNull(inputStream, "inputStream", new Object[0]);
/* 213 */     try (ObjectInputStream in = new ObjectInputStream(inputStream))
/*     */     {
/* 215 */       T obj = (T)in.readObject();
/* 216 */       return obj;
/*     */     } catch (ClassNotFoundException|IOException ex) {
/* 218 */       throw new SerializationException(ex);
/*     */     }
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static <T extends Serializable> T roundtrip(T obj)
/*     */   {
/* 235 */     return (T)deserialize(serialize(obj));
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static byte[] serialize(Serializable obj)
/*     */   {
/* 247 */     ByteArrayOutputStream baos = new ByteArrayOutputStream(512);
/* 248 */     serialize(obj, baos);
/* 249 */     return baos.toByteArray();
/*     */   }
/*     */   
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   public static void serialize(Serializable obj, OutputStream outputStream)
/*     */   {
/* 269 */     Validate.notNull(outputStream, "outputStream", new Object[0]);
/* 270 */     try (ObjectOutputStream out = new ObjectOutputStream(outputStream)) {
/* 271 */       out.writeObject(obj);
/*     */     } catch (IOException ex) {
/* 273 */       throw new SerializationException(ex);
/*     */     }
/*     */   }
/*     */ }
