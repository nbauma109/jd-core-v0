/*     */ package net.sourceforge.plantuml.regex;
/*     */ 
/*     */ import java.util.Arrays;
/*     */ import java.util.Collections;
/*     */ import java.util.HashMap;
/*     */ import java.util.Iterator;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import java.util.concurrent.atomic.AtomicReference;
/*     */ import net.sourceforge.plantuml.text.StringLocated;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public abstract class RegexComposed
/*     */   implements IRegex
/*     */ {
/*     */   private final List<IRegex> partials;
/*     */   
/*     */   protected final List<IRegex> partials()
/*     */   {
/*  57 */     return this.partials;
/*     */   }
/*     */   
/*     */   protected abstract String getFullSlow();
/*     */   
/*  62 */   private final AtomicReference<Pattern2> fullCached = new AtomicReference<>();
/*     */   
/*     */   private Pattern2 getPattern2() {
/*  65 */     Pattern2 result = (Pattern2)this.fullCached.get();
/*  66 */     if (result == null) {
/*  67 */       String fullSlow = getFullSlow();
/*  68 */       result = MyPattern.cmpile(fullSlow);
/*  69 */       this.fullCached.set(result);
/*     */     }
/*  71 */     return result;
/*     */   }
/*     */   
/*     */   protected final boolean isCompiled() {
/*  75 */     return this.fullCached.get() != null;
/*     */   }
/*     */   
/*     */   public RegexComposed(IRegex... partial) {
/*  79 */     this.partials = Collections.unmodifiableList(Arrays.asList(partial));
/*     */   }
/*     */   
/*     */   @Override
/*     */   public Map<String, RegexPartialMatch> createPartialMatch(Iterator<String> it) {
/*  84 */     Map<String, RegexPartialMatch> result = new HashMap<>();
/*  85 */     for (IRegex r : this.partials) {
/*  86 */       result.putAll(r.createPartialMatch(it));
/*     */     }
/*  88 */     return result;
/*     */   }
/*     */   
/*     */   @Override
/*  92 */   public final int count() { int cpt = getStartCount();
/*  93 */     for (IRegex r : this.partials) {
/*  94 */       cpt += r.count();
/*     */     }
/*  96 */     return cpt;
/*     */   }
/*     */   
/*     */ 
/* 100 */   protected int getStartCount() { return 0; }
/*     */   
/*     */   @Override
/*     */   public RegexResult matcher(String s) {
/* 104 */     Matcher2 matcher = getPattern2().matcher(s);
/* 105 */     if (!matcher.find()) {
/* 106 */       return null;
/*     */     }
/* 108 */     Iterator<String> it = new MatcherIterator(matcher);
/* 109 */     return new RegexResult(createPartialMatch(it));
/*     */   }
/*     */   
/*     */   @Override
/* 113 */   public boolean match(StringLocated s) { String tmp = s.getString();
/* 114 */     Matcher2 matcher = getPattern2().matcher(tmp);
/* 115 */     if (matcher == null) {
/* 116 */       return false;
/*     */     }
/* 118 */     return matcher.find();
/*     */   }
/*     */   
/*     */   @Override
/* 122 */   public final String getPattern() { return getPattern2().pattern(); }
/*     */   
/*     */   protected final List<IRegex> getPartials()
/*     */   {
/* 126 */     return this.partials;
/*     */   }
/*     */ }
