/*     */ package jd.core.test;
/*     */ 
/*     */ import java.util.Collection;
/*     */ import java.util.ConcurrentModificationException;
/*     */ import java.util.Iterator;
/*     */ import java.util.Map;
/*     */ import java.util.Map.Entry;
/*     */ import java.util.Set;
/*     */ import org.apache.commons.collections4.Bag;
/*     */ 
/*     */ public abstract class OuterIncGetStatic<E> implements Bag<E>
/*     */ {
/*     */   private transient Map<E, MutableInteger> map;
/*     */   private int size;
/*     */   private static int modCount;
/*     */   
/*     */   public int size()
/*     */   {
/*  19 */     return this.size;
/*     */   }
/*     */   
/*     */   public boolean isEmpty()
/*     */   {
/*  24 */     return this.size == 0;
/*     */   }
/*     */   
/*     */   public int getCount(Object object)
/*     */   {
/*  29 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public boolean contains(Object object)
/*     */   {
/*  34 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public boolean containsAll(Collection<?> coll)
/*     */   {
/*  39 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public Iterator<E> iterator() {
/*  43 */     return new BagIterator<>(this);
/*     */   }
/*     */   
/*     */   static class BagIterator<E> implements Iterator<E> {
/*     */     private final OuterIncGetStatic<E> parent;
/*     */     private final Iterator<Entry<E, OuterIncGetStatic.MutableInteger>> entryIterator;
/*     */     private Entry<E, OuterIncGetStatic.MutableInteger> current;
/*     */     private final int mods;
/*     */     private boolean canRemove;
/*     */     
/*     */     public BagIterator(OuterIncGetStatic<E> parent) {
/*  54 */       this.parent = parent;
/*  55 */       this.entryIterator = parent.map.entrySet().iterator();
/*  56 */       this.current = null;
/*  57 */       this.mods = OuterIncGetStatic.modCount;
/*  58 */       this.canRemove = false;
/*     */     }
/*     */     
/*     */     public boolean hasNext()
/*     */     {
/*  63 */       throw new UnsupportedOperationException();
/*     */     }
/*     */     
/*     */     public E next()
/*     */     {
/*  68 */       throw new UnsupportedOperationException();
/*     */     }
/*     */     
/*     */     public void remove()
/*     */     {
/*  73 */       if (OuterIncGetStatic.modCount != this.mods) {
/*  74 */         throw new ConcurrentModificationException();
/*     */       }
/*  76 */       if (!this.canRemove) {
/*  77 */         throw new IllegalStateException();
/*     */       }
/*  79 */       OuterIncGetStatic.MutableInteger mut = (OuterIncGetStatic.MutableInteger)this.current.getValue();
/*  80 */       if (mut.value > 1) {
/*  81 */         mut.value--;
/*     */       } else {
/*  83 */         this.entryIterator.remove();
/*     */       }
/*  85 */       --this.parent.size;
/*  86 */       --OuterIncGetStatic.modCount;
/*  87 */       this.canRemove = false;
/*     */     }
/*     */   }
/*     */   
/*     */   public boolean add(E object)
/*     */   {
/*  93 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public boolean add(E object, int nCopies)
/*     */   {
/*  98 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public boolean addAll(Collection<? extends E> coll)
/*     */   {
/* 103 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public void clear()
/*     */   {
/* 108 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public boolean remove(Object object)
/*     */   {
/* 113 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public boolean remove(Object object, int nCopies)
/*     */   {
/* 118 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public boolean removeAll(Collection<?> coll)
/*     */   {
/* 123 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public boolean retainAll(Collection<?> coll)
/*     */   {
/* 128 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   protected static class MutableInteger {
/*     */     protected int value;
/*     */     
/*     */     MutableInteger(int value) {
/* 135 */       this.value = value;
/*     */     }
/*     */     
/*     */     public boolean equals(Object obj)
/*     */     {
/* 140 */       return false;
/*     */     }
/*     */     
/*     */     public int hashCode()
/*     */     {
/* 145 */       return this.value;
/*     */     }
/*     */   }
/*     */   
/*     */   public Object[] toArray()
/*     */   {
/* 151 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public <T> T[] toArray(T[] array)
/*     */   {
/* 156 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public Set<E> uniqueSet()
/*     */   {
/* 161 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public boolean equals(Object object)
/*     */   {
/* 166 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public int hashCode()
/*     */   {
/* 171 */     throw new UnsupportedOperationException();
/*     */   }
/*     */   
/*     */   public String toString()
/*     */   {
/* 176 */     throw new UnsupportedOperationException();
/*     */   }
/*     */ }
