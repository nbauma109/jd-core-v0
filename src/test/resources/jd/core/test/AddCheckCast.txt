/*    */ package jd.core.test;
/*    */ 
/*    */ import java.awt.Component;
/*    */ import java.lang.reflect.Constructor;
/*    */ 
/*    */ public class AddCheckCast
/*    */ {
/*    */   ReflectionData reflectionData;
/*    */   static StaticReflectionData staticReflectionData;
/*    */   
/*    */   int getField(Component paramComponent)
/*    */   {
/* 13 */     java.awt.Point localPoint = paramComponent != null ? paramComponent.getLocation() : null;
/* 14 */     return localPoint.x;
/*    */   }
/*    */   
/*    */   void putField(Component paramComponent) {
/* 18 */     int i = paramComponent != null ? paramComponent.getWidth() : 0;
/* 19 */     java.awt.Point localPoint = paramComponent != null ? paramComponent.getLocation() : null;
/* 20 */     localPoint.x = i;
/*    */   }
/*    */   
/*    */   Constructor<?>[] privateGetDeclaredConstructors(Class<?> paramClass, boolean paramBoolean)
/*    */   {
/* 25 */     ReflectionData localReflectionData = reflectionData();
/* 26 */     Constructor[] arrayOfConstructor1; if (localReflectionData != null) {
/* 27 */       arrayOfConstructor1 = paramBoolean ? localReflectionData.publicConstructors : localReflectionData.declaredConstructors;
/* 28 */       if (arrayOfConstructor1 != null)
/* 29 */         return arrayOfConstructor1;
/*    */     }
/* 31 */     if (paramClass.isInterface()) {
/* 32 */       Constructor[] arrayOfConstructor2 = new Constructor[0];
/* 33 */       arrayOfConstructor1 = arrayOfConstructor2;
/*    */     } else {
/* 35 */       arrayOfConstructor1 = paramClass.getDeclaredConstructors();
/*    */     }
/* 37 */     if (localReflectionData != null) {
/* 38 */       if (paramBoolean) {
/* 39 */         localReflectionData.publicConstructors = arrayOfConstructor1;
/*    */       } else {
/* 41 */         localReflectionData.declaredConstructors = arrayOfConstructor1;
/*    */       }
/*    */     }
/* 44 */     return arrayOfConstructor1;
/*    */   }
/*    */   
/*    */ 
/*    */   Constructor<?>[] staticPrivateGetDeclaredConstructors(Class<?> paramClass, boolean paramBoolean)
/*    */   {
/* 50 */     StaticReflectionData localStaticReflectionData = staticReflectionData();
/* 51 */     Constructor[] arrayOfConstructor1; if (localStaticReflectionData != null) {
/* 52 */       arrayOfConstructor1 = paramBoolean ? StaticReflectionData.publicConstructors : StaticReflectionData.declaredConstructors;
/* 53 */       if (arrayOfConstructor1 != null)
/* 54 */         return arrayOfConstructor1;
/*    */     }
/* 56 */     if (paramClass.isInterface()) {
/* 57 */       Constructor[] arrayOfConstructor2 = new Constructor[0];
/* 58 */       arrayOfConstructor1 = arrayOfConstructor2;
/*    */     } else {
/* 60 */       arrayOfConstructor1 = paramClass.getDeclaredConstructors();
/*    */     }
/* 62 */     if (localStaticReflectionData != null) {
/* 63 */       if (paramBoolean) {
/* 64 */         StaticReflectionData.publicConstructors = arrayOfConstructor1;
/*    */       } else {
/* 66 */         StaticReflectionData.declaredConstructors = arrayOfConstructor1;
/*    */       }
/*    */     }
/* 69 */     return arrayOfConstructor1;
/*    */   }
/*    */   
/*    */   ReflectionData reflectionData() {
/* 73 */     return this.reflectionData;
/*    */   }
/*    */   
/*    */   StaticReflectionData staticReflectionData() {
/* 77 */     return staticReflectionData;
/*    */   }
/*    */   
/*    */   static class StaticReflectionData
/*    */   {
/*    */     static Constructor<?>[] publicConstructors;
/*    */     static Constructor<?>[] declaredConstructors;
/*    */   }
/*    */   
/*    */   class ReflectionData
/*    */   {
/*    */     Constructor<?>[] publicConstructors;
/*    */     Constructor<?>[] declaredConstructors;
/*    */   }
/*    */ }
