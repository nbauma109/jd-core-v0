/*    */ package jd.core.test;
/*    */ 
/*    */ import java.lang.reflect.InvocationTargetException;
/*    */ 
/*    */ public class OuterGetStatic { static int[] a;
/*    */   static int x;
/*    */   static int y;
/*    */   
/*    */   public OuterGetStatic() {}
/*    */   
/*    */   class Inner { Inner() {}
/* 12 */     int[] newInitArray = { OuterGetStatic.x, OuterGetStatic.y };
/*    */     
/*    */     void athrow() throws Exception {
/* 15 */       throw new Exception("Cannot convert " + Object.class + " to " + Void.class);
/*    */     }
/*    */     
/*    */     int arrayLength() {
/* 19 */       return new Class[] { Float.class }.length;
/*    */     }
/*    */     
/*    */     void arrayStore() {
/* 23 */       OuterGetStatic.a[Double.class.hashCode()] = Float.class.hashCode();
/*    */     }
/*    */     
/*    */     int unaryOp() {
/* 27 */       return -Double.class.hashCode();
/*    */     }
/*    */     
/*    */     void instanceOf() throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {
/* 31 */       if ((newInstance(Object.class) instanceof String)) {
/* 32 */         System.out.println("ok");
/*    */       }
/*    */     }
/*    */     
/*    */     Object newInstance(Class c) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException {
/* 37 */       return c.getConstructor(new Class[0]).newInstance(new Object[0]);
/*    */     }
/*    */     
/*    */     int binaryOp() {
/* 41 */       return Float.class.hashCode() + Double.class.hashCode();
/*    */     }
/*    */     
/*    */     int preIncPostInc() {
/* 45 */       return OuterGetStatic.x > 0 ? ++OuterGetStatic.y : OuterGetStatic.x++;
/*    */     }
/*    */     
/*    */     byte convert() {
/* 49 */       return (byte)OuterGetStatic.a[Byte.class.hashCode()];
/*    */     }
/*    */     
/*    */     void tableSwitch() {
/* 53 */       switch (Object.class.hashCode()) {
/*    */       case 1: 
/* 55 */         System.out.println("One");
/* 56 */         break;
/*    */       case 2: 
/* 58 */         System.out.println("Two");
/* 59 */         break;
/*    */       case 3: 
/* 61 */         System.out.println("Three");
/* 62 */         break;
/*    */       default: 
/* 64 */         throw new IllegalArgumentException();
/*    */       }
/*    */     }
/*    */     
/*    */     void lookupSwitch() {
/* 69 */       switch (Object.class.hashCode()) {
/*    */       case 1: 
/* 71 */         System.out.println("One");
/* 72 */         break;
/*    */       case 1000: 
/* 74 */         System.out.println("One thousand");
/* 75 */         break;
/*    */       case 1000000: 
/* 77 */         System.out.println("One million");
/* 78 */         break;
/*    */       default: 
/* 80 */         throw new IllegalArgumentException();
/*    */       }
/*    */     }
/*    */     
/*    */     Object[] aNewArray() {
/* 85 */       return new Object[Object.class.hashCode()];
/*    */     }
/*    */     
/*    */     int[] newArray() {
/* 89 */       return new int[Object.class.hashCode()];
/*    */     }
/*    */     
/*    */     Object[][] multiANewArray() {
/* 93 */       return new Object[Object.class.hashCode()][Object.class.hashCode()];
/*    */     }
/*    */     
/*    */     void dupStore() {
/* 97 */       synchronized (Object.class.toString()) {
/* 98 */         System.out.println("ok");
/*    */       }
/*    */     }
/*    */   }
/*    */ }
