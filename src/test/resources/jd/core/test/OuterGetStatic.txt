/*    */ package jd.core.test;
/*    */ 
/*    */ public class OuterGetStatic { static int[] a;
/*    */   static int x;
/*    */   static int y;
/*    */   
/*    */   public OuterGetStatic() {}
/*    */   
/*    */   class Inner { Inner() {}
/* 10 */     int[] newInitArray = { OuterGetStatic.x, OuterGetStatic.y };
/*    */     
/*    */     void athrow() throws Exception {
/* 13 */       throw new Exception("Cannot convert " + Object.class + " to " + Void.class);
/*    */     }
/*    */     
/*    */     int arrayLength() {
/* 17 */       return new Class[] { Float.class }.length;
/*    */     }
/*    */     
/*    */     void arrayStore() {
/* 21 */       OuterGetStatic.a[Double.class.hashCode()] = Float.class.hashCode();
/*    */     }
/*    */     
/*    */     int unaryOp() {
/* 25 */       return -Double.class.hashCode();
/*    */     }
/*    */     
/*    */     int binaryOp() {
/* 29 */       return Float.class.hashCode() + Double.class.hashCode();
/*    */     }
/*    */     
/*    */     byte convert() {
/* 33 */       return (byte)OuterGetStatic.a[Byte.class.hashCode()];
/*    */     }
/*    */     
/*    */     void tableSwitch() {
/* 37 */       switch (Object.class.hashCode()) {
/*    */       case 1: 
/* 39 */         System.out.println("One");
/* 40 */         break;
/*    */       case 2: 
/* 42 */         System.out.println("Two");
/* 43 */         break;
/*    */       case 3: 
/* 45 */         System.out.println("Three");
/* 46 */         break;
/*    */       default: 
/* 48 */         throw new IllegalArgumentException();
/*    */       }
/*    */     }
/*    */     
/*    */     void lookupSwitch() {
/* 53 */       switch (Object.class.hashCode()) {
/*    */       case 1: 
/* 55 */         System.out.println("One");
/* 56 */         break;
/*    */       case 1000: 
/* 58 */         System.out.println("One thousand");
/* 59 */         break;
/*    */       case 1000000: 
/* 61 */         System.out.println("One million");
/* 62 */         break;
/*    */       default: 
/* 64 */         throw new IllegalArgumentException();
/*    */       }
/*    */     }
/*    */     
/*    */     Object[] aNewArray() {
/* 69 */       return new Object[Object.class.hashCode()];
/*    */     }
/*    */     
/*    */     int[] newArray() {
/* 73 */       return new int[Object.class.hashCode()];
/*    */     }
/*    */     
/*    */     Object[][] multiANewArray() {
/* 77 */       return new Object[Object.class.hashCode()][Object.class.hashCode()];
/*    */     }
/*    */     
/*    */     void dupStore() {
/* 81 */       synchronized (Object.class.toString()) {
/* 82 */         System.out.println("ok");
/*    */       }
/*    */     }
/*    */   }
/*    */ }
